openapi: 3.0.0
servers:
  - url: https://unify.apideck.com
info:
  contact:
    email: hello@apideck.com
    url: https://developers.apideck.com
  description: |+
    Welcome to the Issue Tracking API.

    You can use this API to access all Issue Tracking API endpoints.

    ## Base URL

    The base URL for all API requests is `https://unify.apideck.com`

    We also provide a [Mock API](https://developers.apideck.com/mock-api) that can be used for testing purposes: `https://mock-api.apideck.com`

    ## Headers

    Custom headers that are expected as part of the request. Note that [RFC7230](https://tools.ietf.org/html/rfc7230) states header names are case insensitive.

    | Name                  | Type    | Required | Description                                                                                                                                                    |
    | --------------------- | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | x-apideck-consumer-id | String  | Yes      | The id of the customer stored inside Apideck Vault. This can be a user id, account id, device id or whatever entity that can have integration within your app. |
    | x-apideck-service-id  | String  | No       | Describe the service you want to call (e.g., pipedrive). Only needed when a customer has activated multiple integrations for the same Unified API.             |
    | x-apideck-raw         | Boolean | No       | Include raw response. Mostly used for debugging purposes.                                                                                                      |
    | x-apideck-app-id      | String  | Yes      | The application id of your Unify application. Available at https://app.apideck.com/unify/api-keys.                                                             |
    | Authorization         | String  | Yes      | Bearer API KEY                                                                                                                                                 |

    ## Authorization

    You can interact with the API through the authorization methods below.

    <!-- ReDoc-Inject: <security-definitions> -->

    ## Pagination

    All API resources have support for bulk retrieval via list APIs.  Apideck uses cursor-based pagination via the optional `cursor` and `limit` parameters.

    To fetch the first page of results, call the list API without a `cursor` parameter. Afterwards you can fetch subsequent pages by providing a cursor parameter. You will find the next cursor in the response body in `meta.cursors.next`. If `meta.cursors.next` is `null` you're at the end of the list.

    In the REST API you can also use the `links` from the response for added convenience. Simply call the URL in `links.next` to get the next page of results.

    ### Query Parameters

    | Name   | Type   | Required | Description                                                                                                        |
    | ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------ |
    | cursor | String | No       | Cursor to start from. You can find cursors for next & previous pages in the meta.cursors property of the response. |
    | limit  | Number | No       | Number of results to return. Minimum 1, Maximum 200, Default 20                                                    |

    ### Response Body

    | Name                  | Type   | Description                                                        |
    | --------------------- | ------ | ------------------------------------------------------------------ |
    | meta.cursors.previous | String | Cursor to navigate to the previous page of results through the API |
    | meta.cursors.current  | String | Cursor to navigate to the current page of results through the API  |
    | meta.cursors.next     | String | Cursor to navigate to the next page of results through the API     |
    | meta.items_on_page    | Number | Number of items returned in the data property of the response      |
    | links.previous        | String | Link to navigate to the previous page of results through the API   |
    | links.current         | String | Link to navigate to the current page of results through the API    |
    | links.next            | String | Link to navigate to the next page of results through the API       |

    ⚠️ `meta.cursors.previous`/`links.previous` is not available for all connectors.

    ## SDKs and API Clients

    We currently offer a [Node.js](https://developers.apideck.com/sdks/node), [PHP](https://developers.apideck.com/sdks/php) and [.NET](https://developers.apideck.com/sdks/dot-net) SDK.
    Need another SDK? [Request the SDK of your choice](https://integrations.apideck.com/request).

    ## Debugging

    Because of the nature of the abstraction we do in Apideck Unify we still provide the option to the receive raw requests and responses being handled underlying. By including the raw flag `?raw=true` in your requests you can still receive the full request. Please note that this increases the response size and can introduce extra latency.

    ## Errors

    The API returns standard HTTP response codes to indicate success or failure of the API requests. For errors, we also return a customized error message inside the JSON response. You can see the returned HTTP status codes below.

    | Code | Title                | Description                                                                                                                                                                                              |
    | ---- | -------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | 200  | OK                   | The request message has been successfully processed, and it has produced a response. The response message varies, depending on the request method and the requested data.                                |
    | 201  | Created              | The request has been fulfilled and has resulted in one or more new resources being created.                                                                                                              |
    | 204  | No Content           | The server has successfully fulfilled the request and that there is no additional content to send in the response payload body.                                                                          |
    | 400  | Bad Request          | The receiving server cannot understand the request because of malformed syntax. Do not repeat the request without first modifying it; check the request for errors, fix them and then retry the request. |
    | 401  | Unauthorized         | The request has not been applied because it lacks valid authentication credentials for the target resource.                                                                                              |
    | 402  | Payment Required     | Subscription data is incomplete or out of date. You'll need to provide payment details to continue.                                                                                                      |
    | 403  | Forbidden            | You do not have the appropriate user rights to access the request. Do not repeat the request.                                                                                                            |
    | 404  | Not Found            | The origin server did not find a current representation for the target resource or is not willing to disclose that one exists.                                                                           |
    | 409  | Conflict             | The request could not be completed due to a conflict with the current state of the target resource.                                                                                                      |
    | 422  | Unprocessable Entity | The server understands the content type of the request entity, and the syntax of the request entity is correct but was unable to process the contained instructions.                                     |
    | 429  | Too Many Requests    | You sent too many requests in a given amount of time ("rate limit"). Try again later                                                                                                                     |
    | 5xx  | Server Errors        | Something went wrong with the Unify API. These errors are logged on our side. You can contact our team to resolve the issue.                                                                             |

    ### Handling errors

    The Unify API and SDKs can produce errors for many reasons, such as a failed requests due to misconfigured integrations, invalid parameters, authentication errors, and network unavailability.

    ### Error Types

    #### RequestValidationError

    Request is not valid for the current endpoint. The response body will include details on the validation error. Check the spelling and types of your attributes, and ensure you are not passing data that is outside of the specification.

    #### UnsupportedFiltersError

    Filters in the request are valid, but not supported by the connector. Remove the unsupported filter(s) to get a successful response.

    #### UnsupportedSortFieldError

    Sort field (`sort[by]`) in the request is valid, but not supported by the connector. Replace or remove the sort field to get a successful response.

    #### InvalidCursorError

    Pagination cursor in the request is not valid for the current connector. Make sure to use a cursor returned from the API, for the same connector.

    #### ConnectorExecutionError

    A Unified API request made via one of our downstream connectors returned an unexpected error. The `status_code` returned is proxied through to error response along with their original response via the error detail.

    #### UnauthorizedError

    We were unable to authorize the request as made. This can happen for a number of reasons, from missing header params to passing an incorrect authorization token. Verify your Api Key is being set correctly in the authorization header. ie: `Authorization: 'Bearer sk_live_***'`

    #### ConnectorCredentialsError

    A request using a given connector has not been authorized. Ensure the connector you are trying to use has been configured correctly and been authorized for use.

    #### ConnectorDisabledError

    A request has been made to a connector that has since been disabled. This may be temporary - You can contact our team to resolve the issue.

    #### ConnectorRateLimitError

    You sent too many request to a connector. These rate limits vary from connector to connector. You will need to try again later.

    #### RequestLimitError

    You have reached the number of requests included in your Free Tier Subscription. You will no be able to make further requests until this limit resets at the end of the month, or talk to us about upgrading your subscription to continue immediately.

    #### EntityNotFoundError

    You've made a request for a resource or route that does not exist. Verify your path parameters or any identifiers used to fetch this resource.

    #### OAuthCredentialsNotFoundError

    When adding a connector integration that implements OAuth, both a `client_id` and `client_secret` must be provided before any authorizations can be performed. Verify the integration has been configured properly before continuing.

    #### IntegrationNotFoundError

    The requested connector integration could not be found associated to your `application_id`. Verify your `application_id` is correct, and that this connector has been added and configured for your application.

    #### ConnectionNotFoundError

    A valid connection could not be found associated to your `application_id`. Something _may_ have interrupted the authorization flow. You may need to start the connector authorization process again.

    #### ConnectionSettingsError

    The connector has required settings that were not supplied. Verify `connection.settings` contains all required settings for the connector to be callable.

    #### ConnectorNotFoundError

    A request was made for an unknown connector. Verify your `service_id` is spelled correctly, and that this connector is enabled for your provided `unified_api`.

    #### OAuthRedirectUriError

    A request was made either in a connector authorization flow, or attempting to revoke connector access without a valid `redirect_uri`. This is the url the user should be returned to on completion of process.

    #### OAuthInvalidStateError

    The state param is required and is used to ensure the outgoing authorization state has not been altered before the user is redirected back. It also contains required params needed to identify the connector being used. If this has been altered, the authorization will not succeed.

    #### OAuthCodeExchangeError

    When attempting to exchange the authorization code for an `access_token` during an OAuth flow, an error occurred. This may be temporary. You can reattempt authorization or contact our team to resolve the issue.

    #### OAuthConnectorError

    It seems something went wrong on the connector side. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### MappingError

    There was an error attempting to retrieve the mapping for a given attribute. We've been notified and are working to fix this issue.

    #### ConnectorMappingNotFoundError

    It seems the implementation for this connector is incomplete. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorResponseMappingNotFoundError

    We were unable to retrieve the response mapping for this connector. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorOperationMappingNotFoundError

    Connector mapping has not been implemented for the requested operation. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorWorkflowMappingError

    The composite api calls required for this operation have not been mapped entirely. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    #### ConnectorOperationUnsupportedError

    You're attempting a call that is not supported by the connector. It's likely this operation is supported by another connector, but we're unable to implement for this one.

    #### PaginationNotSupportedError

    Pagination is not yet supported for this connector, try removing limit and/or cursor from the query. It's possible this connector is in `beta` or still under development. We've been notified and are working to fix this issue.

    ## API Design

    ### API Styles and data formats

    #### REST API

    The API is organized around [REST](https://restfulapi.net/), providing simple and predictable URIs to access and modify objects. Requests support standard HTTP methods like GET, PUT, POST, and DELETE and standard status codes. JSON is returned by all API responses, including errors. In all API requests, you must set the content-type HTTP header to application/json. All API requests must be made over HTTPS. Calls made over HTTP will fail.

    ##### Available HTTP methods

    The Apideck API uses HTTP verbs to understand if you want to read (GET), delete (DELETE) or create (POST) an object. When your web application cannot do a POST or DELETE, we provide the ability to set the method through the query parameter \_method.

    ```
    POST /messages
    GET /messages
    GET /messages/{messageId}
    PATCH /messages/{messageId}
    DELETE /messages/{messageId}
    ```

    Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise. For some endpoints and use cases we divert from REST to provide a better developer experience.

    ### Schema

    All API requests and response bodies adhere to a common JSON format representing individual items, collections of items, links to related items and additional meta data.

    ### Meta

    Meta data can be represented as a top level member named “meta”. Any information may be provided in the meta data. It's most common use is to return the total number of records when requesting a collection of resources.

    ### Idempotence (upcoming)

    To prevent the creation of duplicate resources, every POST method (such as one that creates a consumer record) must specify a unique value for the X-Unique-Transaction-ID header name. Uniquely identifying each unique POST request ensures that the API processes a given request once and only once.

    Uniquely identifying new resource-creation POSTs is especially important when the outcome of a response is ambiguous because of a transient service interruption, such as a server-side timeout or network disruption. If a service interruption occurs, then the client application can safely retry the uniquely identified request without creating duplicate operations. (API endpoints that guarantee that every uniquely identified request is processed only once no matter how many times that uniquely identifiable request is made are described as idempotent.)

    ### Request IDs

    Each API request has an associated request identifier. You can find this value in the response headers, under Request-Id. You can also find request identifiers in the URLs of individual request logs in your Dashboard. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.

    ### Fixed field types

    #### Dates

    The dates returned by the API are all represented in UTC (ISO8601 format).

    This example `2019-11-14T00:55:31.820Z` is defined by the ISO 8601 standard. The T in the middle separates the year-month-day portion from the hour-minute-second portion. The Z on the end means UTC, that is, an offset-from-UTC of zero hours-minutes-seconds. The Z is pronounced "Zulu" per military/aviation tradition.

    The ISO 8601 standard is more modern. The formats are wisely designed to be easy to parse by machine as well as easy to read by humans across cultures.

    #### Prices and Currencies

    All prices returned by the API are represented as integer amounts in a currency's smallest unit. For example, $5 USD would be returned as 500 (i.e, 500 cents).

    For zero-decimal currencies, amounts will still be provided as an integer but without the need to divide by 100. For example, an amount of ¥5 (JPY) would be returned as 5.

    All currency codes conform to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).

    ## Support

    If you have problems or need help with your case, you can always reach out to our Support.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Issue Tracking API
  version: 9.3.0
  x-apideck-api: issue-tracking
  x-apideck-sdk-support: true
  x-apisguru-categories:
    - developer_tools
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_developers.apideck.com_icon.png
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/apideck-libraries/openapi-specs/master/issue-tracking.yml
      version: "3.0"
  x-providerName: apideck.com
  x-serviceName: issue-tracking
  x-tags:
    - partner
externalDocs:
  description: Apideck Developer Docs
  url: https://developers.apideck.com
security:
  - apiKey: []
tags:
  - description: ""
    name: Tickets
    x-apideck-model:
      $ref: "#/components/schemas/Ticket"
    x-apideck-resource-id: collection-tickets
  - description: ""
    name: Collections
    x-apideck-model:
      $ref: "#/components/schemas/Collection"
    x-apideck-resource-id: collections
  - description: ""
    name: Users
    x-apideck-model:
      $ref: "#/components/schemas/CollectionUser"
    x-apideck-resource-id: collection-users
  - description: ""
    name: Comments
    x-apideck-model:
      $ref: "#/components/schemas/CollectionTicketComment"
    x-apideck-resource-id: collection-ticket-comments
  - description: ""
    name: Tags
    x-apideck-model:
      $ref: "#/components/schemas/CollectionTag"
    x-apideck-resource-id: collection-tags
paths:
  /issue-tracking/collections:
    get:
      description: List Collections
      operationId: collectionsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/collectionsSort"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetCollectionsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Collections
      tags:
        - Collections
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionsAll({})
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: collections
  "/issue-tracking/collections/{collection_id}":
    get:
      description: Get Collection
      operationId: collectionsOne
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetCollectionResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Collection
      tags:
        - Collections
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionsOne({
                collectionId: 'collection_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/issue-tracking/collections/{collection_id}/tags":
    get:
      description: List Tags
      operationId: collectionTagsAll
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetCollectionTagsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Tags
      tags:
        - Tags
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionTagsAll({
                collectionId: 'collection_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: collectionTag
  "/issue-tracking/collections/{collection_id}/tickets":
    get:
      description: List Tickets
      operationId: collectionTicketsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/ticketsSort"
        - $ref: "#/components/parameters/issuesFilter"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetTicketsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Tickets
      tags:
        - Tickets
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionTicketsAll({
                collectionId: 'collection_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: collectionTickets
    post:
      description: Create Ticket
      operationId: collectionTicketsAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/collectionId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ticket"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateTicketResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create Ticket
      tags:
        - Tickets
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              collectionId: 'collection_id_example',
              collectionTicket: {
                parent_id: '12345',
                type: 'Technical',
                subject: 'Technical Support Request',
                description: 'I am facing issues with my internet connection',
                status: 'open',
                priority: 'high',
                assignees: [
                  {
                    id: '12345'
                  }
                ],
                due_date: '2020-09-30T07:43:32.000Z',
                tags: [
                  {
                    id: '12345'
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/issue-tracking/collections/{collection_id}/tickets/{ticket_id}":
    delete:
      description: Delete Ticket
      operationId: collectionTicketsDelete
      parameters:
        - $ref: "#/components/parameters/ticketId"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/collectionId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteTicketResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete Ticket
      tags:
        - Tickets
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              ticketId: 'ticket_id_example',
              collectionId: 'collection_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketsDelete(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Ticket
      operationId: collectionTicketsOne
      parameters:
        - $ref: "#/components/parameters/ticketId"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetTicketResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Ticket
      tags:
        - Tickets
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              ticketId: 'ticket_id_example',
              collectionId: 'collection_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketsOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: collectionTicket
    patch:
      description: Update Ticket
      operationId: collectionTicketsUpdate
      parameters:
        - $ref: "#/components/parameters/ticketId"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/collectionId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ticket"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateTicketResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update Ticket
      tags:
        - Tickets
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              ticketId: 'ticket_id_example',
              collectionId: 'collection_id_example',
              collectionTicket: {
                parent_id: '12345',
                type: 'Technical',
                subject: 'Technical Support Request',
                description: 'I am facing issues with my internet connection',
                status: 'open',
                priority: 'high',
                assignees: [
                  {
                    id: '12345'
                  }
                ],
                due_date: '2020-09-30T07:43:32.000Z',
                tags: [
                  {
                    id: '12345'
                  }
                ]
              }
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments":
    get:
      description: List Comments
      operationId: collectionTicketCommentsAll
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/ticketId"
        - $ref: "#/components/parameters/commentsSort"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetCommentsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Comments
      tags:
        - Comments
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsAll(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: collectionTicketComments
    post:
      description: Create Comment
      operationId: collectionTicketCommentsAdd
      parameters:
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/ticketId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionTicketComment"
        required: true
      responses:
        "201":
          $ref: "#/components/responses/CreateCommentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Create Comment
      tags:
        - Comments
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example',
              collectionTicketComment: {
                body: 'What internet provider do you use?'
              }
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsAdd(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/issue-tracking/collections/{collection_id}/tickets/{ticket_id}/comments/{id}":
    delete:
      description: Delete Comment
      operationId: collectionTicketCommentsDelete
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/ticketId"
      responses:
        "200":
          $ref: "#/components/responses/DeleteCommentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Delete Comment
      tags:
        - Comments
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsDelete(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
    get:
      description: Get Comment
      operationId: collectionTicketCommentsOne
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/ticketId"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetCommentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get Comment
      tags:
        - Comments
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: collectionTicketComment
    patch:
      description: Update Comment
      operationId: collectionTicketCommentsUpdate
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/ticketId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionTicketComment"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/UpdateCommentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Update Comment
      tags:
        - Comments
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              id: 'id_example',
              collectionId: 'collection_id_example',
              ticketId: 'ticket_id_example',
              collectionTicketComment: {
                body: 'What internet provider do you use?'
              }
            }

            try {
              const { data } = await apideck.issueTracking.collectionTicketCommentsUpdate(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
  "/issue-tracking/collections/{collection_id}/users":
    get:
      description: List Users
      operationId: collectionUsersAll
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/cursor"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetCollectionUsersResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: List Users
      tags:
        - Users
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            try {
              const { data } = await apideck.issueTracking.collectionUsersAll({
                collectionId: 'collection_id_example'
              })
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
      x-graphql-field-name: collectionUsers
  "/issue-tracking/collections/{collection_id}/users/{id}":
    get:
      description: Get user
      operationId: collectionUsersOne
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/consumerId"
        - $ref: "#/components/parameters/applicationId"
        - $ref: "#/components/parameters/serviceId"
        - $ref: "#/components/parameters/raw"
        - $ref: "#/components/parameters/fields"
      responses:
        "200":
          $ref: "#/components/responses/GetCollectionUserResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "402":
          $ref: "#/components/responses/PaymentRequiredResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "422":
          $ref: "#/components/responses/UnprocessableResponse"
        default:
          $ref: "#/components/responses/UnexpectedErrorResponse"
      security:
        - apiKey: []
      summary: Get user
      tags:
        - Users
      x-apideck-api: issueTracking
      x-codeSamples:
        - label: Node
          lang: TypeScript
          source: |
            import { Apideck } from '@apideck/node'

            const apideck = new Apideck({
              apiKey: 'REPLACE_WITH_API_KEY',
              appId: 'REPLACE_WITH_APP_ID',
              consumerId: 'REPLACE_WITH_CONSUMER_ID'
            })

            const params = {
              collectionId: 'collection_id_example',
              id: 'id_example'
            }

            try {
              const { data } = await apideck.issueTracking.collectionUsersOne(params)
              console.log('API called successfully', data)
            } catch (error) {
              console.error(error)
            }
components:
  parameters:
    applicationId:
      description: The ID of your Unify application
      example: dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX
      in: header
      name: x-apideck-app-id
      required: true
      schema:
        type: string
    collectionId:
      description: The collection ID
      in: path
      name: collection_id
      required: true
      schema:
        example: apideck-io
        type: string
    collectionsSort:
      description: Apply sorting
      explode: true
      in: query
      name: sort
      schema:
        $ref: "#/components/schemas/CollectionsSort"
      style: deepObject
    commentsSort:
      description: Apply sorting
      explode: true
      in: query
      name: sort
      schema:
        $ref: "#/components/schemas/CommentsSort"
      style: deepObject
    consumerId:
      description: ID of the consumer which you want to get or push data from
      in: header
      name: x-apideck-consumer-id
      required: true
      schema:
        type: string
    cursor:
      description: Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response.
      in: query
      name: cursor
      schema:
        nullable: true
        type: string
    fields:
      description: "The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded."
      example: id,updated_at
      in: query
      name: fields
      schema:
        nullable: true
        type: string
    id:
      description: ID of the record you are acting upon.
      in: path
      name: id
      required: true
      schema:
        type: string
    issuesFilter:
      description: Apply filters
      explode: true
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/IssuesFilter"
      style: deepObject
    limit:
      description: Number of results to return. Minimum 1, Maximum 200, Default 20
      in: query
      name: limit
      schema:
        default: 20
        maximum: 200
        minimum: 1
        type: integer
    raw:
      description: Include raw response. Mostly used for debugging purposes
      in: query
      name: raw
      schema:
        default: false
        type: boolean
    serviceId:
      description: Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API.
      in: header
      name: x-apideck-service-id
      schema:
        type: string
    ticketId:
      description: ID of the ticket you are acting upon.
      in: path
      name: ticket_id
      required: true
      schema:
        type: string
    ticketsSort:
      description: Apply sorting
      explode: true
      in: query
      name: sort
      schema:
        $ref: "#/components/schemas/TicketsSort"
      style: deepObject
  responses:
    BadRequestResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestResponse"
      description: Bad Request
    CreateCommentResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateCommentResponse"
      description: Create a Comment
    CreateTicketResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateTicketResponse"
      description: Create a Ticket
    DeleteCommentResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteCommentResponse"
      description: Delete a Comment
    DeleteTicketResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteTicketResponse"
      description: Delete a Ticket
    GetCollectionResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCollectionResponse"
      description: Get a Collection
    GetCollectionTagsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCollectionTagsResponse"
      description: List Tags
    GetCollectionUserResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCollectionUserResponse"
      description: User
    GetCollectionUsersResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCollectionUsersResponse"
      description: Users
    GetCollectionsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCollectionsResponse"
      description: List Collections
    GetCommentResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCommentResponse"
      description: Get a Comment
    GetCommentsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetCommentsResponse"
      description: List Comments
    GetTicketResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetTicketResponse"
      description: Get a Ticket
    GetTicketsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GetTicketsResponse"
      description: List Tickets
    NotFoundResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundResponse"
      description: The specified resource was not found
    NotImplementedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotImplementedResponse"
      description: Not Implemented
    PaymentRequiredResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PaymentRequiredResponse"
      description: Payment Required
    UnauthorizedResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedResponse"
      description: Unauthorized
    UnexpectedErrorResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnexpectedErrorResponse"
      description: Unexpected error
    UnprocessableResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnprocessableResponse"
      description: Unprocessable
    UpdateCommentResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateCommentResponse"
      description: Update a Comment
    UpdateTicketResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateTicketResponse"
      description: Update a Ticket
  schemas:
    Address:
      additionalProperties: false
      properties:
        city:
          description: Name of city.
          example: San Francisco
          nullable: true
          type: string
        contact_name:
          example: Elon Musk
          nullable: true
          type: string
        country:
          description: country code according to ISO 3166-1 alpha-2.
          example: US
          nullable: true
          type: string
        county:
          description: Address field that holds a sublocality, such as a county
          example: Santa Clara
          nullable: true
          type: string
        email:
          example: elon@musk.com
          nullable: true
          type: string
        fax:
          example: 122-111-1111
          nullable: true
          type: string
        id:
          example: "123"
          nullable: true
          type: string
        latitude:
          example: "40.759211"
          nullable: true
          type: string
        line1:
          description: "Line 1 of the address e.g. number, street, suite, apt #, etc."
          example: Main street
          nullable: true
          type: string
        line2:
          description: Line 2 of the address
          example: "apt #"
          nullable: true
          type: string
        line3:
          description: Line 3 of the address
          example: "Suite #"
          nullable: true
          type: string
        line4:
          description: Line 4 of the address
          example: delivery instructions
          nullable: true
          type: string
        longitude:
          example: "-73.984638"
          nullable: true
          type: string
        name:
          example: HQ US
          nullable: true
          type: string
        phone_number:
          example: 111-111-1111
          nullable: true
          type: string
        postal_code:
          description: Zip code or equivalent.
          example: "94104"
          nullable: true
          type: string
        row_version:
          $ref: "#/components/schemas/RowVersion"
        salutation:
          example: Mr
          nullable: true
          type: string
        state:
          description: Name of state
          example: CA
          nullable: true
          type: string
        street_number:
          description: Street number
          example: "25"
          nullable: true
          type: string
        string:
          example: 25 Spring Street, Blackburn, VIC 3130
          nullable: true
          title: The address string. Some APIs don't provide structured address data.
          type: string
        type:
          enum:
            - primary
            - secondary
            - home
            - office
            - shipping
            - billing
            - other
          example: primary
          type: string
          x-apideck-enum-id: addresses.type
          x-graphql-type-name: AddressType
        website:
          example: https://elonmusk.com
          nullable: true
          type: string
      type: object
      x-apideck-schema-id: Address
      x-apideck-weights:
        city: high
        contact_name: edge-case
        country: high
        county: edge-case
        email: edge-case
        fax: edge-case
        id: edge-case
        latitude: low
        line1: high
        line2: low
        line3: edge-case
        line4: edge-case
        longitude: low
        name: edge-case
        phone_number: edge-case
        postal_code: high
        row_version: edge-case
        salutation: edge-case
        state: high
        street_number: low
        string: low
        type: critical
        website: edge-case
    Assignee:
      additionalProperties: false
      properties:
        id:
          description: A unique identifier for an object.
          example: "12345"
          title: ID
          type: string
        username:
          example: Cocoa
          readOnly: true
          title: Name
          type: string
      required:
        - id
      type: object
      x-apideck-schema-id: Assignee
      x-apideck-weights:
        id: critical
        username: medium
    BadRequestResponse:
      properties:
        detail:
          anyOf:
            - example: Missing property foobar
              type: string
            - example:
                missing:
                  - foobar: required
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestvalidationerror
          type: string
        status_code:
          description: HTTP status code
          example: 400
          type: number
        type_name:
          description: The type of error returned
          example: RequestValidationError
          type: string
      type: object
      x-apideck-schema-id: BadRequest
    Collection:
      additionalProperties: false
      properties:
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        description:
          description: Description of the collection
          example: IT Issues
          title: Description
          type: string
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: Name of the collection
          example: Main IT Issues
          title: name
          type: string
        parent_id:
          description: The collections's parent ID
          example: "12345"
          type: string
        type:
          description: The collections's type
          example: Technical
          title: Type
          type: string
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
      required:
        - id
      type: object
      x-apideck-schema-id: Collection
      x-apideck-weights:
        created_at: high
        id: critical
        name: high
        updated_at: high
    CollectionTag:
      additionalProperties: false
      properties:
        id:
          description: A unique identifier for an object.
          example: "12345"
          title: ID
          type: string
        name:
          example: User Experience
          readOnly: true
          title: Name
          type: string
      required:
        - id
      type: object
      x-apideck-schema-id: Tag
      x-apideck-weights:
        id: critical
        name: medium
    CollectionTicketComment:
      additionalProperties: false
      properties:
        body:
          description: Body of the comment
          example: What internet provider do you use?
          title: Body
          type: string
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        id:
          $ref: "#/components/schemas/Id"
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
      type: object
      x-apideck-schema-id: Comment
      x-apideck-weights:
        body: critical
        created_at: critical
        created_by: critical
        id: critical
        updated_at: medium
    CollectionUser:
      additionalProperties: false
      properties:
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        email:
          example: elon@musk.com
          nullable: true
          type: string
        first_name:
          example: Elon
          nullable: true
          type: string
        id:
          $ref: "#/components/schemas/Id"
        last_name:
          example: Musk
          nullable: true
          type: string
        name:
          example: Elon Musk
          title: Name
          type: string
        photo_url:
          $ref: "#/components/schemas/PhotoUrl"
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
      type: object
      x-apideck-schema-id: CollectionUser
      x-apideck-weights:
        created_at: medium
        email: medium
        first_name: high
        id: high
        last_name: high
        name: critical
        updated_at: medium
    CollectionsSort:
      additionalProperties: false
      example:
        by: name
        direction: desc
      properties:
        by:
          description: The field on which to sort the Collections
          enum:
            - name
            - created_at
            - updated_at
          example: name
          type: string
          x-apideck-enum-id: Collections.sort_by
          x-graphql-type-name: CollectionsSortBy
        direction:
          $ref: "#/components/schemas/SortDirection"
      type: object
      x-apideck-schema-id: CollectionsSort
      x-graphql-type-name: CollectionsSort
    CommentsSort:
      additionalProperties: false
      example:
        by: created_at
        direction: desc
      properties:
        by:
          description: The field on which to sort the Comments
          enum:
            - created_at
            - updated_at
          example: created_at
          type: string
          x-apideck-enum-id: Comments.sort_by
          x-graphql-type-name: CommentsSortBy
        direction:
          $ref: "#/components/schemas/SortDirection"
      type: object
      x-apideck-schema-id: CommentsSort
      x-graphql-type-name: CommentsSort
    CompanyId:
      description: The unique identifier of the company.
      example: "23456"
      nullable: true
      title: Company ID
      type: string
    CompanyName:
      description: The name of the company.
      example: SpaceX
      nullable: true
      title: Company name
      type: string
    CreateCommentResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: CreateCommentResponse
    CreateTicketResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: CreateTicketResponse
    CreatedAt:
      description: The date and time when the object was created.
      example: 2020-09-30T07:43:32.000Z
      format: date-time
      readOnly: true
      title: Created at (timestamp)
      type: string
    CreatedBy:
      description: The user who created the object.
      example: "12345"
      nullable: true
      readOnly: true
      title: Created by
      type: string
    Currency:
      description: Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
      enum:
        - UNKNOWN_CURRENCY
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYR
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - SSP
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRC
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XOF
        - XPD
        - XPF
        - XPT
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMK
        - ZMW
        - BTC
        - ETH
      example: USD
      nullable: true
      title: Currency
      type: string
      x-apideck-enum-coverage-ignore: true
      x-apideck-enum-id: currencies
      x-enum-elements:
        - description: Unknown currency
          name: UNKNOWN_CURRENCY
        - description: United Arab Emirates dirham
          name: AED
        - description: Afghan afghani
          name: AFN
        - description: Albanian lek
          name: ALL
        - description: Armenian dram
          name: AMD
        - description: Netherlands Antillean guilder
          name: ANG
        - description: Angolan kwanza
          name: AOA
        - description: Argentine peso
          name: ARS
        - description: Australian dollar
          name: AUD
        - description: Aruban florin
          name: AWG
        - description: Azerbaijani manat
          name: AZN
        - description: Bosnia and Herzegovina convertible mark
          name: BAM
        - description: Barbados dollar
          name: BBD
        - description: Bangladeshi taka
          name: BDT
        - description: Bulgarian lev
          name: BGN
        - description: Bahraini dinar
          name: BHD
        - description: Burundian franc
          name: BIF
        - description: Bermudian dollar
          name: BMD
        - description: Brunei dollar
          name: BND
        - description: Boliviano
          name: BOB
        - description: Bolivian Mvdol
          name: BOV
        - description: Brazilian real
          name: BRL
        - description: Bahamian dollar
          name: BSD
        - description: Bhutanese ngultrum
          name: BTN
        - description: Botswana pula
          name: BWP
        - description: Belarusian ruble
          name: BYR
        - description: Belize dollar
          name: BZD
        - description: Canadian dollar
          name: CAD
        - description: Congolese franc
          name: CDF
        - description: WIR Euro
          name: CHE
        - description: Swiss franc
          name: CHF
        - description: WIR Franc
          name: CHW
        - description: Unidad de Fomento
          name: CLF
        - description: Chilean peso
          name: CLP
        - description: Chinese yuan
          name: CNY
        - description: Colombian peso
          name: COP
        - description: Unidad de Valor Real
          name: COU
        - description: Costa Rican colon
          name: CRC
        - description: Cuban convertible peso
          name: CUC
        - description: Cuban peso
          name: CUP
        - description: Cape Verdean escudo
          name: CVE
        - description: Czech koruna
          name: CZK
        - description: Djiboutian franc
          name: DJF
        - description: Danish krone
          name: DKK
        - description: Dominican peso
          name: DOP
        - description: Algerian dinar
          name: DZD
        - description: Egyptian pound
          name: EGP
        - description: Eritrean nakfa
          name: ERN
        - description: Ethiopian birr
          name: ETB
        - description: Euro
          name: EUR
        - description: Fiji dollar
          name: FJD
        - description: Falkland Islands pound
          name: FKP
        - description: Pound sterling
          name: GBP
        - description: Georgian lari
          name: GEL
        - description: Ghanaian cedi
          name: GHS
        - description: Gibraltar pound
          name: GIP
        - description: Gambian dalasi
          name: GMD
        - description: Guinean franc
          name: GNF
        - description: Guatemalan quetzal
          name: GTQ
        - description: Guyanese dollar
          name: GYD
        - description: Hong Kong dollar
          name: HKD
        - description: Honduran lempira
          name: HNL
        - description: Croatian kuna
          name: HRK
        - description: Haitian gourde
          name: HTG
        - description: Hungarian forint
          name: HUF
        - description: Indonesian rupiah
          name: IDR
        - description: Israeli new shekel
          name: ILS
        - description: Indian rupee
          name: INR
        - description: Iraqi dinar
          name: IQD
        - description: Iranian rial
          name: IRR
        - description: Icelandic króna
          name: ISK
        - description: Jamaican dollar
          name: JMD
        - description: Jordanian dinar
          name: JOD
        - description: Japanese yen
          name: JPY
        - description: Kenyan shilling
          name: KES
        - description: Kyrgyzstani som
          name: KGS
        - description: Cambodian riel
          name: KHR
        - description: Comoro franc
          name: KMF
        - description: North Korean won
          name: KPW
        - description: South Korean won
          name: KRW
        - description: Kuwaiti dinar
          name: KWD
        - description: Cayman Islands dollar
          name: KYD
        - description: Kazakhstani tenge
          name: KZT
        - description: Lao kip
          name: LAK
        - description: Lebanese pound
          name: LBP
        - description: Sri Lankan rupee
          name: LKR
        - description: Liberian dollar
          name: LRD
        - description: Lesotho loti
          name: LSL
        - description: Lithuanian litas
          name: LTL
        - description: Latvian lats
          name: LVL
        - description: Libyan dinar
          name: LYD
        - description: Moroccan dirham
          name: MAD
        - description: Moldovan leu
          name: MDL
        - description: Malagasy ariary
          name: MGA
        - description: Macedonian denar
          name: MKD
        - description: Myanmar kyat
          name: MMK
        - description: Mongolian tögrög
          name: MNT
        - description: Macanese pataca
          name: MOP
        - description: Mauritanian ouguiya
          name: MRO
        - description: Mauritian rupee
          name: MUR
        - description: Maldivian rufiyaa
          name: MVR
        - description: Malawian kwacha
          name: MWK
        - description: Mexican peso
          name: MXN
        - description: Mexican Unidad de Inversion
          name: MXV
        - description: Malaysian ringgit
          name: MYR
        - description: Mozambican metical
          name: MZN
        - description: Namibian dollar
          name: NAD
        - description: Nigerian naira
          name: NGN
        - description: Nicaraguan córdoba
          name: NIO
        - description: Norwegian krone
          name: NOK
        - description: Nepalese rupee
          name: NPR
        - description: New Zealand dollar
          name: NZD
        - description: Omani rial
          name: OMR
        - description: Panamanian balboa
          name: PAB
        - description: Peruvian sol
          name: PEN
        - description: Papua New Guinean kina
          name: PGK
        - description: Philippine peso
          name: PHP
        - description: Pakistani rupee
          name: PKR
        - description: Polish złoty
          name: PLN
        - description: Paraguayan guaraní
          name: PYG
        - description: Qatari riyal
          name: QAR
        - description: Romanian leu
          name: RON
        - description: Serbian dinar
          name: RSD
        - description: Russian ruble
          name: RUB
        - description: Rwandan franc
          name: RWF
        - description: Saudi riyal
          name: SAR
        - description: Solomon Islands dollar
          name: SBD
        - description: Seychelles rupee
          name: SCR
        - description: Sudanese pound
          name: SDG
        - description: Swedish krona
          name: SEK
        - description: Singapore dollar
          name: SGD
        - description: Saint Helena pound
          name: SHP
        - description: Sierra Leonean leone
          name: SLL
        - description: Somali shilling
          name: SOS
        - description: Surinamese dollar
          name: SRD
        - description: South Sudanese pound
          name: SSP
        - description: São Tomé and Príncipe dobra
          name: STD
        - description: Salvadoran colón
          name: SVC
        - description: Syrian pound
          name: SYP
        - description: Swazi lilangeni
          name: SZL
        - description: Thai baht
          name: THB
        - description: Tajikstani somoni
          name: TJS
        - description: Turkmenistan manat
          name: TMT
        - description: Tunisian dinar
          name: TND
        - description: Tongan pa'anga
          name: TOP
        - description: Turkish lira
          name: TRY
        - description: Trinidad and Tobago dollar
          name: TTD
        - description: New Taiwan dollar
          name: TWD
        - description: Tanzanian shilling
          name: TZS
        - description: Ukrainian hryvnia
          name: UAH
        - description: Ugandan shilling
          name: UGX
        - description: United States dollar
          name: USD
        - description: United States dollar (next day)
          name: USN
        - description: United States dollar (same day)
          name: USS
        - description: Uruguay Peso en Unidedades Indexadas
          name: UYI
        - description: Uruguyan peso
          name: UYU
        - description: Uzbekistan som
          name: UZS
        - description: Venezuelan bolívar soberano
          name: VEF
        - description: Vietnamese đồng
          name: VND
        - description: Vanuatu vatu
          name: VUV
        - description: Samoan tala
          name: WST
        - description: CFA franc BEAC
          name: XAF
        - description: Silver
          name: XAG
        - description: Gold
          name: XAU
        - description: European Composite Unit
          name: XBA
        - description: European Monetary Unit
          name: XBB
        - description: European Unit of Account 9
          name: XBC
        - description: European Unit of Account 17
          name: XBD
        - description: East Caribbean dollar
          name: XCD
        - description: Special drawing rights (International Monetary Fund)
          name: XDR
        - description: CFA franc BCEAO
          name: XOF
        - description: Palladium
          name: XPD
        - description: CFP franc
          name: XPF
        - description: Platinum
          name: XPT
        - description: Code reserved for testing
          name: XTS
        - description: No currency
          name: XXX
        - description: Yemeni rial
          name: YER
        - description: South African rand
          name: ZAR
        - description: Zambian kwacha
          name: ZMK
        - description: Zambian kwacha
          name: ZMW
        - description: Bitcoin
          name: BTC
        - description: Ether
          name: ETH
    CustomField:
      additionalProperties: false
      properties:
        description:
          description: More information about the custom field
          example: Employee Level
          title: Description
          type: string
        id:
          example: "2389328923893298"
          title: ID
          type: string
        name:
          description: Name of the custom field.
          example: employee_level
          title: Name
          type: string
        value:
          anyOf:
            - example: Uses Salesforce and Marketo
              nullable: true
              type: string
            - example: 10
              nullable: true
              type: number
            - example: true
              nullable: true
              type: boolean
            - items:
                type: string
              type: array
      required:
        - id
      type: object
      x-apideck-schema-id: CustomField
      x-apideck-weights:
        description: edge-case
        id: critical
        name: medium
        value: critical
    DeleteCommentResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: DeleteCommentResponse
    DeleteTicketResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: add
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: DeleteTicketResponse
    Department:
      additionalProperties: false
      properties:
        code:
          example: "2"
          nullable: true
          title: Code
          type: string
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        description:
          example: R&D
          nullable: true
          title: Description
          type: string
        id:
          $ref: "#/components/schemas/Id"
        name:
          description: Department name
          example: R&D
          nullable: true
          title: Name
          type: string
        parent_id:
          description: Parent ID
          example: "22345"
          readOnly: true
          type: string
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
        updated_by:
          $ref: "#/components/schemas/UpdatedBy"
      type: object
      x-apideck-schema-id: Department
      x-apideck-weights:
        code: medium
        created_at: medium
        created_by: edge-case
        description: low
        id: critical
        name: critical
        updated_at: medium
        updated_by: edge-case
    Description:
      description: A description of the object.
      example: A description
      nullable: true
      title: Description
      type: string
    Division:
      description: The division the person is currently in. Usually a collection of departments or teams or regions.
      example: Europe
      nullable: true
      title: Division
      type: string
    Email:
      additionalProperties: false
      properties:
        email:
          example: elon@musk.com
          format: email
          minLength: 1
          type: string
        id:
          example: "123"
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - billing
            - other
          example: primary
          type: string
          x-apideck-enum-id: emails.type
          x-graphql-type-name: EmailType
      required:
        - email
      type: object
      x-apideck-schema-id: Email
      x-apideck-weights:
        email: critical
        id: edge-case
        type: critical
    FirstName:
      description: The first name of the person.
      example: Elon
      nullable: true
      title: First name
      type: string
    Gender:
      description: The gender represents the gender identity of a person.
      enum:
        - male
        - female
        - unisex
        - other
        - not_specified
      example: male
      nullable: true
      title: Gender
      type: string
      x-apideck-enum-id: genders
    GetCollectionResponse:
      properties:
        data:
          $ref: "#/components/schemas/Collection"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetCollectionResponse
      x-graphql-type-name: Collection
    GetCollectionTagsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/CollectionTag"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetTagsResponse
      x-graphql-type-name: TagsList
    GetCollectionUserResponse:
      properties:
        data:
          $ref: "#/components/schemas/CollectionUser"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetCollectionUserResponse
      x-graphql-type-name: CollectionUser
    GetCollectionUsersResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/CollectionUser"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetCollectionUsersResponse
      x-graphql-type-name: CollectionUserList
    GetCollectionsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Collection"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetCollectionsResponse
      x-graphql-type-name: CollectionList
    GetCommentResponse:
      properties:
        data:
          $ref: "#/components/schemas/CollectionTicketComment"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetCommentResponse
      x-graphql-type-name: Ticket
    GetCommentsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/CollectionTicketComment"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetCommentsResponse
      x-graphql-type-name: CommentList
    GetTicketResponse:
      properties:
        data:
          $ref: "#/components/schemas/Ticket"
        operation:
          description: Operation performed
          example: one
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: sage-hr
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetTicketResponse
      x-graphql-type-name: Ticket
    GetTicketsResponse:
      properties:
        data:
          items:
            $ref: "#/components/schemas/Ticket"
          type: array
        links:
          $ref: "#/components/schemas/Links"
        meta:
          $ref: "#/components/schemas/Meta"
        operation:
          description: Operation performed
          example: all
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: jira
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: GetTicketsResponse
      x-graphql-type-name: TicketList
    Id:
      description: A unique identifier for an object.
      example: "12345"
      readOnly: true
      title: ID
      type: string
    IssueTrackingEventType:
      enum:
        - "*"
        - issue-tracking.ticket.created
        - issue-tracking.ticket.updated
        - issue-tracking.ticket.deleted
      type: string
      x-apideck-enum-id: issue-tracking.events
    IssueTrackingWebhookEvent:
      allOf:
        - properties:
            entity_id:
              description: The service provider's ID of the entity that triggered this event
              example: 123456ASDF
              type: string
            entity_type:
              description: The type entity that triggered this event
              example: Company
              type: string
            entity_url:
              description: The url to retrieve entity detail.
              example: https://unify.apideck.com/crm/contacts/123456
              type: string
            event_id:
              description: Unique reference to this request event
              example: 9755c355-56c3-4a2f-a2da-86ff4411fccb
              type: string
            execution_attempt:
              description: The current count this request event has been attempted
              example: 2
              type: number
            occurred_at:
              description: ISO Datetime for when the original event occurred
              example: 2021-10-01T03:14:55.419Z
              type: string
            service_id:
              description: Service provider identifier
              example: close
              type: string
          type: object
          x-apideck-schema-id: WebhookEvent
        - properties:
            event_type:
              $ref: "#/components/schemas/IssueTrackingEventType"
          type: object
      x-sdk-exclude: true
    IssuesFilter:
      additionalProperties: false
      example:
        status:
          - open
      properties:
        assignee_id:
          description: Only return tickets assigned to a specific user
          example: 2332bd9c2eaaa5dcfa14721c
          title: Assignee ID
          type: string
        since:
          description: Only return tickets since a specific date
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          title: Since date (timestamp)
          type: string
        status:
          default: []
          description: Filter by ticket status, can be `open`, `closed` or `all`. Will passthrough if none of the above match
          example:
            - closed
          items:
            type: string
          title: ticket status
          type: array
          uniqueItems: true
      type: object
      x-apideck-schema-id: IssuesFilter
      x-graphql-type-name: IssuesFilter
    Language:
      description: language code according to ISO 639-1. For the United States - EN
      example: EN
      nullable: true
      type: string
    LastName:
      description: The last name of the person.
      example: Musk
      nullable: true
      title: Last name
      type: string
    Links:
      description: Links to navigate to previous or next pages through the API
      properties:
        current:
          description: Link to navigate to the current page through the API
          example: https://unify.apideck.com/crm/companies
          type: string
        next:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM
          nullable: true
          type: string
        previous:
          description: Link to navigate to the previous page through the API
          example: https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D
          nullable: true
          type: string
      type: object
      x-apideck-schema-id: Links
    Meta:
      description: Response metadata
      properties:
        cursors:
          description: Cursors to navigate to previous or next pages through the API
          properties:
            current:
              description: Cursor to navigate to the current page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjI=
              nullable: true
              type: string
            next:
              description: Cursor to navigate to the next page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjM=
              nullable: true
              type: string
            previous:
              description: Cursor to navigate to the previous page of results through the API
              example: em9oby1jcm06OnBhZ2U6OjE=
              nullable: true
              type: string
          type: object
        items_on_page:
          description: Number of items returned in the data property of the response
          example: 50
          type: integer
      type: object
      x-apideck-schema-id: Meta
    MiddleName:
      description: Middle name of the person.
      example: D.
      nullable: true
      title: Middle name
      type: string
    NotFoundResponse:
      properties:
        detail:
          anyOf:
            - example: "Could not find widget with id: '123'"
              type: string
            - example:
                not_found:
                  entity: widget
                  id: "123"
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Found
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unknown Widget
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#entitynotfounderror
          type: string
        status_code:
          description: HTTP status code
          example: 404
          type: number
        type_name:
          description: The type of error returned
          example: EntityNotFoundError
          type: string
      type: object
      x-apideck-schema-id: NotFound
    NotImplementedResponse:
      properties:
        detail:
          anyOf:
            - example: Failed to retrieve Widget tokenUrl from 'components.securitySchemes.OAuth2.flows'
              type: string
            - type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Not Implemented
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unmapped Attribute
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#mappingerror
          type: string
        status_code:
          description: HTTP status code
          example: 501
          type: number
        type_name:
          description: The type of error returned
          example: MappingError
          type: string
      type: object
      x-apideck-schema-id: NotImplemented
    PassThroughQuery:
      additionalProperties: true
      properties:
        example_downstream_property:
          description: All passthrough query parameters are passed along to the connector as is (?pass_through[search]=leads becomes ?search=leads)
          type: string
      type: object
    PaymentRequiredResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: You have reached your limit of 2000
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Payment Required
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Request Limit Reached
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#requestlimiterror
          type: string
        status_code:
          description: HTTP status code
          example: 402
          type: number
        type_name:
          description: The type of error returned
          example: RequestLimitError
          type: string
      type: object
      x-apideck-schema-id: PaymentRequired
    PaymentUnit:
      description: Unit of measurement for employee compensation.
      enum:
        - hour
        - week
        - month
        - year
        - paycheck
      example: year
      title: Payment Unit
      type: string
      x-apideck-enum-id: payment_unit
    PhoneNumber:
      additionalProperties: false
      properties:
        area_code:
          example: "323"
          nullable: true
          title: Area code
          type: string
        country_code:
          example: "1"
          nullable: true
          title: Country code
          type: string
        extension:
          example: "105"
          nullable: true
          title: Phone extension
          type: string
        id:
          example: "12345"
          nullable: true
          type: string
        number:
          example: 111-111-1111
          minLength: 1
          title: Phone number
          type: string
        type:
          enum:
            - primary
            - secondary
            - home
            - work
            - office
            - mobile
            - assistant
            - fax
            - direct-dial-in
            - personal
            - other
          example: primary
          type: string
          x-apideck-enum-id: phone_numbers.type
          x-graphql-type-name: PhoneType
      required:
        - number
      type: object
      x-apideck-schema-id: PhoneNumber
      x-apideck-weights:
        area_code: edge-case
        country_code: edge-case
        extension: edge-case
        id: edge-case
        number: critical
        type: critical
    PhotoUrl:
      description: The URL of the photo of a person.
      example: https://unavatar.io/elon-musk
      nullable: true
      title: Photo URL
      type: string
    RowVersion:
      description: A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
      example: 1-12345
      nullable: true
      title: Row version
      type: string
    SortDirection:
      default: asc
      description: The direction in which to sort the results
      enum:
        - asc
        - desc
      type: string
      x-apideck-enum-id: sort_direction
      x-apideck-schema-id: SortDirection
      x-graphql-type-name: SortDirection
    Ticket:
      additionalProperties: false
      properties:
        assignees:
          items:
            $ref: "#/components/schemas/Assignee"
          type: array
        collection_id:
          description: The ticket's collection ID
          example: "12345"
          readOnly: true
          type: string
        completed_at:
          description: When the ticket was completed
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          readOnly: true
          title: Completed at (timestamp)
          type: string
        created_at:
          $ref: "#/components/schemas/CreatedAt"
        created_by:
          $ref: "#/components/schemas/CreatedBy"
        description:
          description: The ticket's description. HTML version of description is mapped if supported by the third-party platform
          example: I am facing issues with my internet connection
          title: Description
          type: string
        due_date:
          description: Due date of the ticket
          example: 2020-09-30T07:43:32.000Z
          format: date-time
          nullable: true
          title: Due date (timestamp)
          type: string
        id:
          $ref: "#/components/schemas/Id"
        parent_id:
          description: The ticket's parent ID
          example: "12345"
          type: string
        priority:
          description: Priority of the ticket
          enum:
            - low
            - normal
            - high
            - urgent
          example: high
          title: Priority
          type: string
          x-apideck-enum-id: tickets.priority
          x-graphql-type-name: Priority
        status:
          description: "The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through."
          example: open
          nullable: true
          type: string
        subject:
          description: Subject of the ticket
          example: Technical Support Request
          title: Subject
          type: string
        tags:
          items:
            $ref: "#/components/schemas/CollectionTag"
          type: array
        type:
          description: The ticket's type
          example: Technical
          title: Type
          type: string
        updated_at:
          $ref: "#/components/schemas/UpdatedAt"
      required:
        - id
      type: object
      x-apideck-schema-id: Ticket
      x-apideck-weights:
        assignees: high
        collection_id: high
        completed_at: medium
        created_at: critical
        description: high
        due_date: medium
        id: critical
        status: critical
        subject: high
        tags: high
        type: medium
        updated_at: critical
    TicketsSort:
      additionalProperties: false
      example:
        by: created_at
        direction: desc
      properties:
        by:
          description: The field on which to sort the Tickets
          enum:
            - created_at
            - updated_at
          example: created_at
          type: string
          x-apideck-enum-id: Tickets.sort_by
          x-graphql-type-name: TicketsSortBy
        direction:
          $ref: "#/components/schemas/SortDirection"
      type: object
      x-apideck-schema-id: TicketsSort
      x-graphql-type-name: TicketsSort
    Title:
      description: The job title of the person.
      example: CEO
      nullable: true
      title: Job title
      type: string
    TooManyRequestsResponse:
      properties:
        detail:
          properties:
            context:
              type: string
            error:
              additionalProperties: true
              type: object
          type: object
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)
          example: Too Many Requests
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Connector Rate Limit Error
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#connectorratelimiterror
          type: string
        status_code:
          description: HTTP status code
          example: 429
          type: number
        type_name:
          description: The type of error returned
          example: ConnectorRateLimitError
          type: string
      type: object
      x-apideck-schema-id: TooManyRequests
    UnauthorizedResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Failed to generate valid JWT Session. Verify applicationId is correct
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unauthorized
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Unauthorized Request
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
          type: string
        status_code:
          description: HTTP status code
          example: 401
          type: number
        type_name:
          description: The type of error returned
          example: UnauthorizedError
          type: string
      type: object
      x-apideck-schema-id: Unauthorized
    UnexpectedErrorResponse:
      properties:
        detail:
          anyOf:
            - example: "Missing Header: x-apideck-consumer-id"
              type: string
            - example:
                missing:
                  - x-apideck-consumer-id: required
              type: object
          description: Contains parameter or domain specific information related to the error and why it occurred.
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Bad Request
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid Params
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#unauthorizederror
          type: string
        status_code:
          description: HTTP status code
          example: 400
          type: number
        type_name:
          description: The type of error returned
          example: RequestHeadersValidationError
          type: string
      type: object
      x-apideck-schema-id: Error
    UnifiedId:
      properties:
        id:
          description: The unique identifier of the resource
          example: "12345"
          readOnly: true
          title: Id
          type: string
      required:
        - id
      title: UnifiedId
      type: object
      x-apideck-schema-id: Id
    UnprocessableResponse:
      properties:
        detail:
          description: Contains parameter or domain specific information related to the error and why it occurred.
          example: Unprocessable request, please verify your request headers and body.
          type: string
        error:
          description: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
          example: Unprocessable Entity
          type: string
        message:
          description: A human-readable message providing more details about the error.
          example: Invalid State
          type: string
        ref:
          description: Link to documentation of error type
          example: https://developers.apideck.com/errors#invalidstateerror
          type: string
        status_code:
          description: HTTP status code
          example: 422
          type: number
        type_name:
          description: The type of error returned
          example: InvalidStateError
          type: string
      type: object
      x-apideck-schema-id: Unprocessable
    UpdateCommentResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: update
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: github
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: UpdateCommentResponse
    UpdateTicketResponse:
      properties:
        data:
          $ref: "#/components/schemas/UnifiedId"
        operation:
          description: Operation performed
          example: update
          type: string
        resource:
          description: Unified API resource name
          example: Tickets
          type: string
        service:
          description: Apideck ID of service provider
          example: github
          type: string
        status:
          description: HTTP Response Status
          example: OK
          type: string
        status_code:
          description: HTTP Response Status Code
          example: 200
          type: integer
      required:
        - status_code
        - status
        - service
        - resource
        - operation
        - data
      type: object
      x-apideck-schema-id: UpdateTicketResponse
    UpdatedAt:
      description: The date and time when the object was last updated.
      example: 2020-09-30T07:43:32.000Z
      format: date-time
      nullable: true
      readOnly: true
      title: Updated at (timestamp)
      type: string
    UpdatedBy:
      description: The user who last updated the object.
      example: "12345"
      nullable: true
      readOnly: true
      title: Updated by
      type: string
    Website:
      additionalProperties: false
      properties:
        id:
          example: "12345"
          nullable: true
          type: string
        type:
          enum:
            - primary
            - secondary
            - work
            - personal
            - other
          example: primary
          type: string
          x-apideck-enum-id: websites.type
          x-graphql-type-name: WebsiteType
        url:
          example: http://example.com
          minLength: 1
          type: string
      required:
        - url
      type: object
      x-apideck-schema-id: Website
      x-apideck-weights:
        id: edge-case
        type: critical
        url: critical
  securitySchemes:
    apiKey:
      description: |
        To use API you have to sign up and get your own API key. Unify API accounts have sandbox mode and live mode API keys. 
        To change modes just use the appropriate key to get a live or test object. You can find your API keys on the unify settings of your Apideck app.
        Your Apideck application_id can also be found on the same page.

        Authenticate your API requests by including your test or live secret API key in the request header. 

        - Bearer authorization header: `Authorization: Bearer <your-apideck-api-key>`
        - Application id header: `x-apideck-app-id: <your-apideck-app-id>`

        You should use the public keys on the SDKs and the secret keys to authenticate API requests.

        **Do not share or include your secret API keys on client side code.** Your API keys carry significant privileges. Please ensure to keep them 100% secure and be sure to not share your secret API keys in areas that are publicly accessible like GitHub.

        Learn how to set the Authorization header inside Postman https://learning.postman.com/docs/postman/sending-api-requests/authorization/#api-key

        Go to Unify to grab your API KEY https://app.apideck.com/unify/api-keys
      in: header
      name: Authorization
      type: apiKey
x-webhooks:
  TicketCreated:
    post:
      description: Event broadcast when a ticket has been created.
      operationId: ticketCreated
      parameters:
        - description: The type of event that was triggered
          example: issue-tracking.ticket.created
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/IssueTrackingEventType"
        - description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          in: header
          name: x-apideck-idempotency-key
          required: true
          schema:
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            example:
              consumer_id: test_user_id
              entity_id: 123456ASDF
              entity_type: ticket
              entity_url: https://unify.apideck.com/issue-tracking/tickets/123456ASDF
              event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
              event_type: issue-tracking.ticket.created
              occurred_at: 2020-01-01T00:00:00.000Z
              unified_api: issue-tracking
            schema:
              $ref: "#/components/schemas/IssueTrackingWebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully.
      security: []
      summary: Ticket Created
      tags:
        - Webhook Events
      x-apideck-event-type: issue-tracking.ticket.created
  TicketDeleted:
    post:
      description: Event broadcast when a ticket has been deleted.
      operationId: ticketDeleted
      parameters:
        - description: The type of event that was triggered
          example: issue-tracking.ticket.deleted
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/IssueTrackingEventType"
        - description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          in: header
          name: x-apideck-idempotency-key
          required: true
          schema:
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            example:
              consumer_id: test_user_id
              entity_id: 123456ASDF
              entity_type: ticket
              entity_url: https://unify.apideck.com/issue-tracking/tickets/123456ASDF
              event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
              event_type: issue-tracking.ticket.deleted
              occurred_at: 2020-01-01T00:00:00.000Z
              unified_api: issue-tracking
            schema:
              $ref: "#/components/schemas/IssueTrackingWebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully.
      security: []
      summary: Ticket Deleted
      tags:
        - Webhook Events
      x-apideck-event-type: issue-tracking.ticket.deleted
  TicketUpdated:
    post:
      description: Event broadcast when a ticket has been updated.
      operationId: ticketUpdated
      parameters:
        - description: The type of event that was triggered
          example: issue-tracking.ticket.updated
          in: header
          name: x-apideck-event-type
          required: true
          schema:
            $ref: "#/components/schemas/IssueTrackingEventType"
        - description: An idempotency key is a unique value generated to recognize subsequent retries/duplicates of the same request.
          in: header
          name: x-apideck-idempotency-key
          required: true
          schema:
            example: d290f1ee-6c54-4b01-90e6-d701748f0851
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            example:
              consumer_id: test_user_id
              entity_id: 123456ASDF
              entity_type: ticket
              entity_url: https://unify.apideck.com/issue-tracking/tickets/123456ASDF
              event_id: d290f1ee-6c54-4b01-90e6-d701748f0851
              event_type: issue-tracking.ticket.updated
              occurred_at: 2020-01-01T00:00:00.000Z
              unified_api: issue-tracking
            schema:
              $ref: "#/components/schemas/IssueTrackingWebhookEvent"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully.
      security: []
      summary: Ticket Updated
      tags:
        - Webhook Events
      x-apideck-event-type: issue-tracking.ticket.updated
  x-sdk-exclude: true
