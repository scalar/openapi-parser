openapi: 3.0.0
info:
  version: 2020-06-15
  x-release: v4
  title: AWS SSO Identity Store
  description: <p>The Identity Store service used by AWS IAM Identity Center (successor to AWS Single Sign-On) provides a single place to retrieve all of your identities (users and groups). For more information, see the <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html">IAM Identity Center User Guide</a>.</p> <pre><code> &lt;note&gt; &lt;p&gt;Although AWS Single Sign-On was renamed, the &lt;code&gt;sso&lt;/code&gt; and &lt;code&gt;identitystore&lt;/code&gt; API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see &lt;a href=&quot;https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed&quot;&gt;IAM Identity Center rename&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This reference guide describes the identity store operations that you can call programatically and includes detailed information about data types and errors.&lt;/p&gt; </code></pre>
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: identitystore
  x-aws-signingName: identitystore
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/identitystore-2020-06-15.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/identitystore/
servers:
  - url: http://identitystore.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The IdentityStore multi-region endpoint
  - url: https://identitystore.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The IdentityStore multi-region endpoint
  - url: http://identitystore.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The IdentityStore endpoint for China (Beijing) and China (Ningxia)
  - url: https://identitystore.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The IdentityStore endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=AWSIdentityStore.CreateGroup:
    post:
      operationId: CreateGroup
      description: Creates a group within the specified identity store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGroupResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "485":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "486":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.CreateGroup
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.CreateGroupMembership:
    post:
      operationId: CreateGroupMembership
      description: "Creates a relationship between a member and a group. The following identifiers must be specified: <code>GroupId</code>, <code>IdentityStoreId</code>, and <code>MemberId</code>."
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGroupMembershipResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "485":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "486":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupMembershipRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.CreateGroupMembership
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.CreateUser:
    post:
      operationId: CreateUser
      description: Creates a user within the specified identity store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "485":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "486":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.CreateUser
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.DeleteGroup:
    post:
      operationId: DeleteGroup
      description: Delete a group within an identity store given <code>GroupId</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteGroupResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "485":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteGroupRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.DeleteGroup
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.DeleteGroupMembership:
    post:
      operationId: DeleteGroupMembership
      description: Delete a membership within a group given <code>MembershipId</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteGroupMembershipResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "485":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteGroupMembershipRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.DeleteGroupMembership
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.DeleteUser:
    post:
      operationId: DeleteUser
      description: Deletes a user within an identity store given <code>UserId</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "485":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.DeleteUser
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.DescribeGroup:
    post:
      operationId: DescribeGroup
      description: Retrieves the group metadata and attributes from <code>GroupId</code> in an identity store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeGroupResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeGroupRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.DescribeGroup
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.DescribeGroupMembership:
    post:
      operationId: DescribeGroupMembership
      description: Retrieves membership metadata and attributes from <code>MembershipId</code> in an identity store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeGroupMembershipResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeGroupMembershipRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.DescribeGroupMembership
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.DescribeUser:
    post:
      operationId: DescribeUser
      description: Retrieves the user metadata and attributes from the <code>UserId</code> in an identity store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DescribeUserRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.DescribeUser
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.GetGroupId:
    post:
      operationId: GetGroupId
      description: Retrieves <code>GroupId</code> in an identity store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGroupIdResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetGroupIdRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.GetGroupId
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.GetGroupMembershipId:
    post:
      operationId: GetGroupMembershipId
      description: Retrieves the <code>MembershipId</code> in an identity store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGroupMembershipIdResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetGroupMembershipIdRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.GetGroupMembershipId
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.GetUserId:
    post:
      operationId: GetUserId
      description: Retrieves the <code>UserId</code> in an identity store.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserIdResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUserIdRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.GetUserId
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.IsMemberInGroups:
    post:
      operationId: IsMemberInGroups
      description: Checks the user's membership in all requested groups and returns if the member exists in all queried groups.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsMemberInGroupsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IsMemberInGroupsRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.IsMemberInGroups
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.ListGroupMemberships:
    post:
      operationId: ListGroupMemberships
      description: For the specified group in the specified identity store, returns the list of all <code>GroupMembership</code> objects and returns results in paginated form.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGroupMembershipsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListGroupMembershipsRequest"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.ListGroupMemberships
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.ListGroupMembershipsForMember:
    post:
      operationId: ListGroupMembershipsForMember
      description: For the specified member in the specified identity store, returns the list of all <code>GroupMembership</code> objects and returns results in paginated form.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGroupMembershipsForMemberResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListGroupMembershipsForMemberRequest"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.ListGroupMembershipsForMember
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.ListGroups:
    post:
      operationId: ListGroups
      description: Lists all groups in the identity store. Returns a paginated list of complete <code>Group</code> objects. Filtering for a <code>Group</code> by the <code>DisplayName</code> attribute is deprecated. Instead, use the <code>GetGroupId</code> API action.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGroupsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListGroupsRequest"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.ListGroups
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.ListUsers:
    post:
      operationId: ListUsers
      description: Lists all users in the identity store. Returns a paginated list of complete <code>User</code> objects. Filtering for a <code>User</code> by the <code>UserName</code> attribute is deprecated. Instead, use the <code>GetUserId</code> API action.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUsersResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListUsersRequest"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.ListUsers
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.UpdateGroup:
    post:
      operationId: UpdateGroup
      description: For the specified group in the specified identity store, updates the group metadata and attributes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateGroupResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "485":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "486":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.UpdateGroup
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /#X-Amz-Target=AWSIdentityStore.UpdateUser:
    post:
      operationId: UpdateUser
      description: For the specified user in the specified identity store, updates the user metadata and attributes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "485":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "486":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - AWSIdentityStore.UpdateUser
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateGroupResponse:
      type: object
      required:
        - GroupId
        - IdentityStoreId
      properties:
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier of the newly created group in the identity store.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
    CreateGroupRequest:
      type: object
      required:
        - IdentityStoreId
      title: CreateGroupRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        DisplayName:
          allOf:
            - $ref: "#/components/schemas/GroupDisplayName"
            - description: A string containing the name of the group. This value is commonly displayed when the group is referenced. "Administrator" and "AWSAdministrators" are reserved names and can't be used for users or groups.
        Description:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the description of the group.
    ResourceNotFoundException: {}
    ThrottlingException: {}
    AccessDeniedException: {}
    ConflictException: {}
    InternalServerException: {}
    ValidationException: {}
    ServiceQuotaExceededException: {}
    CreateGroupMembershipResponse:
      type: object
      required:
        - MembershipId
        - IdentityStoreId
      properties:
        MembershipId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a newly created <code>GroupMembership</code> in an identity store.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
    CreateGroupMembershipRequest:
      type: object
      required:
        - IdentityStoreId
        - GroupId
        - MemberId
      title: CreateGroupMembershipRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        MemberId:
          allOf:
            - $ref: "#/components/schemas/MemberId"
            - description: An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.
    CreateUserResponse:
      type: object
      required:
        - UserId
        - IdentityStoreId
      properties:
        UserId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier of the newly created user in the identity store.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
    CreateUserRequest:
      type: object
      required:
        - IdentityStoreId
      title: CreateUserRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        UserName:
          allOf:
            - $ref: "#/components/schemas/UserName"
            - description: A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. "Administrator" and "AWSAdministrators" are reserved names and can't be used for users or groups.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: An object containing the name of the user.
        DisplayName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: 'A string containing the name of the user. This value is typically formatted for display when the user is referenced. For example, "John Doe." '
        NickName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing an alternate name for the user.
        ProfileUrl:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing a URL that might be associated with the user.
        Emails:
          allOf:
            - $ref: "#/components/schemas/Emails"
            - description: A list of <code>Email</code> objects containing email addresses associated with the user.
        Addresses:
          allOf:
            - $ref: "#/components/schemas/Addresses"
            - description: A list of <code>Address</code> objects containing addresses associated with the user.
        PhoneNumbers:
          allOf:
            - $ref: "#/components/schemas/PhoneNumbers"
            - description: A list of <code>PhoneNumber</code> objects containing phone numbers associated with the user.
        UserType:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string indicating the type of user. Possible values are left unspecified. The value can vary based on your specific use case.
        Title:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the title of the user. Possible values are left unspecified. The value can vary based on your specific use case.
        PreferredLanguage:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the preferred language of the user. For example, "American English" or "en-us."
        Locale:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the geographical region or location of the user.
        Timezone:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the time zone of the user.
    DeleteGroupResponse:
      type: object
      properties: {}
    DeleteGroupRequest:
      type: object
      required:
        - IdentityStoreId
        - GroupId
      title: DeleteGroupRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
    DeleteGroupMembershipResponse:
      type: object
      properties: {}
    DeleteGroupMembershipRequest:
      type: object
      required:
        - IdentityStoreId
        - MembershipId
      title: DeleteGroupMembershipRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        MembershipId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a <code>GroupMembership</code> in an identity store.
    DeleteUserResponse:
      type: object
      properties: {}
    DeleteUserRequest:
      type: object
      required:
        - IdentityStoreId
        - UserId
      title: DeleteUserRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        UserId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a user in the identity store.
    DescribeGroupResponse:
      type: object
      required:
        - GroupId
        - IdentityStoreId
      properties:
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        DisplayName:
          allOf:
            - $ref: "#/components/schemas/GroupDisplayName"
            - description: The group’s display name value. The length limit is 1,024 characters. This value can consist of letters, accented characters, symbols, numbers, punctuation, tab, new line, carriage return, space, and nonbreaking space in this attribute. This value is specified at the time that the group is created and stored as an attribute of the group object in the identity store.
        ExternalIds:
          allOf:
            - $ref: "#/components/schemas/ExternalIds"
            - description: A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.
        Description:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing a description of the group.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
    DescribeGroupRequest:
      type: object
      required:
        - IdentityStoreId
        - GroupId
      title: DescribeGroupRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store, such as <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and <code>1234567890</code> is a randomly generated string that contains numbers and lower case letters. This value is generated at the time that a new identity store is created.
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
    DescribeGroupMembershipResponse:
      type: object
      required:
        - IdentityStoreId
        - MembershipId
        - GroupId
        - MemberId
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        MembershipId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a <code>GroupMembership</code> in an identity store.
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        MemberId:
          $ref: "#/components/schemas/MemberId"
    DescribeGroupMembershipRequest:
      type: object
      required:
        - IdentityStoreId
        - MembershipId
      title: DescribeGroupMembershipRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        MembershipId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a <code>GroupMembership</code> in an identity store.
    DescribeUserResponse:
      type: object
      required:
        - UserId
        - IdentityStoreId
      properties:
        UserName:
          allOf:
            - $ref: "#/components/schemas/UserName"
            - description: A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.
        UserId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a user in the identity store.
        ExternalIds:
          allOf:
            - $ref: "#/components/schemas/ExternalIds"
            - description: A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: The name of the user.
        DisplayName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The display name of the user.
        NickName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: An alternative descriptive name for the user.
        ProfileUrl:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A URL link for the user's profile.
        Emails:
          allOf:
            - $ref: "#/components/schemas/Emails"
            - description: The email address of the user.
        Addresses:
          allOf:
            - $ref: "#/components/schemas/Addresses"
            - description: The physical address of the user.
        PhoneNumbers:
          allOf:
            - $ref: "#/components/schemas/PhoneNumbers"
            - description: A list of <code>PhoneNumber</code> objects associated with a user.
        UserType:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string indicating the type of user.
        Title:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the title of the user.
        PreferredLanguage:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The preferred language of the user.
        Locale:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the geographical region or location of the user.
        Timezone:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The time zone for a user.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
    DescribeUserRequest:
      type: object
      required:
        - IdentityStoreId
        - UserId
      title: DescribeUserRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store, such as <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and <code>1234567890</code> is a randomly generated string that contains numbers and lower case letters. This value is generated at the time that a new identity store is created.
        UserId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a user in the identity store.
    GetGroupIdResponse:
      type: object
      required:
        - GroupId
        - IdentityStoreId
      properties:
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
    GetGroupIdRequest:
      type: object
      required:
        - IdentityStoreId
        - AlternateIdentifier
      title: GetGroupIdRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        AlternateIdentifier:
          allOf:
            - $ref: "#/components/schemas/AlternateIdentifier"
            - description: A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid path is <code>displayName</code>.
    GetGroupMembershipIdResponse:
      type: object
      required:
        - MembershipId
        - IdentityStoreId
      properties:
        MembershipId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a <code>GroupMembership</code> in an identity store.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
    GetGroupMembershipIdRequest:
      type: object
      required:
        - IdentityStoreId
        - GroupId
        - MemberId
      title: GetGroupMembershipIdRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        MemberId:
          allOf:
            - $ref: "#/components/schemas/MemberId"
            - description: An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.
    GetUserIdResponse:
      type: object
      required:
        - UserId
        - IdentityStoreId
      properties:
        UserId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a user in the identity store.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
    GetUserIdRequest:
      type: object
      required:
        - IdentityStoreId
        - AlternateIdentifier
      title: GetUserIdRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        AlternateIdentifier:
          allOf:
            - $ref: "#/components/schemas/AlternateIdentifier"
            - description: A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid paths are <code>userName</code> and <code>emails.value</code>.
    IsMemberInGroupsResponse:
      type: object
      required:
        - Results
      properties:
        Results:
          allOf:
            - $ref: "#/components/schemas/GroupMembershipExistenceResults"
            - description: A list containing the results of membership existence checks.
    IsMemberInGroupsRequest:
      type: object
      required:
        - IdentityStoreId
        - MemberId
        - GroupIds
      title: IsMemberInGroupsRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        MemberId:
          allOf:
            - $ref: "#/components/schemas/MemberId"
            - description: An object containing the identifier of a group member.
        GroupIds:
          allOf:
            - $ref: "#/components/schemas/GroupIds"
            - description: A list of identifiers for groups in the identity store.
    ListGroupMembershipsResponse:
      type: object
      required:
        - GroupMemberships
      properties:
        GroupMemberships:
          allOf:
            - $ref: "#/components/schemas/GroupMemberships"
            - description: A list of <code>GroupMembership</code> objects in the group.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The pagination token used for the <code>ListUsers</code>, <code>ListGroups</code>, and <code>ListGroupMemberships</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    ListGroupMembershipsRequest:
      type: object
      required:
        - IdentityStoreId
        - GroupId
      title: ListGroupMembershipsRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxResults"
            - description: The maximum number of results to be returned per request. This parameter is used in all <code>List</code> requests to specify how many results to return in one page.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The pagination token used for the <code>ListUsers</code>, <code>ListGroups</code> and <code>ListGroupMemberships</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    ListGroupMembershipsForMemberResponse:
      type: object
      required:
        - GroupMemberships
      properties:
        GroupMemberships:
          allOf:
            - $ref: "#/components/schemas/GroupMemberships"
            - description: A list of <code>GroupMembership</code> objects in the group for a specified member.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: "The pagination token used for the <code>ListUsers</code>, <code>ListGroups</code>, and <code>ListGroupMemberships</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page. "
    ListGroupMembershipsForMemberRequest:
      type: object
      required:
        - IdentityStoreId
        - MemberId
      title: ListGroupMembershipsForMemberRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        MemberId:
          allOf:
            - $ref: "#/components/schemas/MemberId"
            - description: An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxResults"
            - description: The maximum number of results to be returned per request. This parameter is used in the <code>ListUsers</code> and <code>ListGroups</code> requests to specify how many results to return in one page. The length limit is 50 characters.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The pagination token used for the <code>ListUsers</code>, <code>ListGroups</code>, and <code>ListGroupMemberships</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    ListGroupsResponse:
      type: object
      required:
        - Groups
      properties:
        Groups:
          allOf:
            - $ref: "#/components/schemas/Groups"
            - description: A list of <code>Group</code> objects in the identity store.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it1 is used in the API request to search for the next page.
    ListGroupsRequest:
      type: object
      required:
        - IdentityStoreId
      title: ListGroupsRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store, such as <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and <code>1234567890</code> is a randomly generated string that contains numbers and lower case letters. This value is generated at the time that a new identity store is created.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxResults"
            - description: The maximum number of results to be returned per request. This parameter is used in the <code>ListUsers</code> and <code>ListGroups</code> requests to specify how many results to return in one page. The length limit is 50 characters.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
        Filters:
          allOf:
            - $ref: "#/components/schemas/Filters"
            - deprecated: true
              description: A list of <code>Filter</code> objects, which is used in the <code>ListUsers</code> and <code>ListGroups</code> requests.Using filters with ListGroups API is deprecated, please use GetGroupId API instead.
    ListUsersResponse:
      type: object
      required:
        - Users
      properties:
        Users:
          allOf:
            - $ref: "#/components/schemas/Users"
            - description: A list of <code>User</code> objects in the identity store.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
    ListUsersRequest:
      type: object
      required:
        - IdentityStoreId
      title: ListUsersRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store, such as <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and <code>1234567890</code> is a randomly generated string that contains numbers and lower case letters. This value is generated at the time that a new identity store is created.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/MaxResults"
            - description: The maximum number of results to be returned per request. This parameter is used in the <code>ListUsers</code> and <code>ListGroups</code> requests to specify how many results to return in one page. The length limit is 50 characters.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
        Filters:
          allOf:
            - $ref: "#/components/schemas/Filters"
            - deprecated: true
              description: A list of <code>Filter</code> objects, which is used in the <code>ListUsers</code> and <code>ListGroups</code> requests. Using filters with ListUsers API is deprecated, please use GetGroupId API instead.
    UpdateGroupResponse:
      type: object
      properties: {}
    UpdateGroupRequest:
      type: object
      required:
        - IdentityStoreId
        - GroupId
        - Operations
      title: UpdateGroupRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        Operations:
          allOf:
            - $ref: "#/components/schemas/AttributeOperations"
            - description: A list of <code>AttributeOperation</code> objects to apply to the requested group. These operations might add, replace, or remove an attribute.
    UpdateUserResponse:
      type: object
      properties: {}
    UpdateUserRequest:
      type: object
      required:
        - IdentityStoreId
        - UserId
        - Operations
      title: UpdateUserRequest
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        UserId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a user in the identity store.
        Operations:
          allOf:
            - $ref: "#/components/schemas/AttributeOperations"
            - description: A list of <code>AttributeOperation</code> objects to apply to the requested user. These operations might add, replace, or remove an attribute.
    SensitiveStringType:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\t\\n\\r  　]+"
      minLength: 1
      maxLength: 1024
      format: password
    SensitiveBooleanType:
      type: boolean
    Address:
      type: object
      properties:
        StreetAddress:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The street of the address.
        Locality:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string of the address locality.
        Region:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The region of the address.
        PostalCode:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The postal code of the address.
        Country:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The country of the address.
        Formatted:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing a formatted version of the address for display.
        Type:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string representing the type of address. For example, "Home."
        Primary:
          allOf:
            - $ref: "#/components/schemas/SensitiveBooleanType"
            - description: A Boolean value representing whether this is the primary address for the associated resource.
      description: The address associated with the specified user.
    Addresses:
      type: array
      items:
        $ref: "#/components/schemas/Address"
      minItems: 1
      maxItems: 1
    ExternalId:
      type: object
      required:
        - Issuer
        - Id
      properties:
        Issuer:
          allOf:
            - $ref: "#/components/schemas/ExternalIdIssuer"
            - description: The issuer for an external identifier.
        Id:
          allOf:
            - $ref: "#/components/schemas/ExternalIdIdentifier"
            - description: The identifier issued to this resource by an external identity provider.
      description: The identifier issued to this resource by an external identity provider.
    UniqueAttribute:
      type: object
      required:
        - AttributePath
        - AttributeValue
      properties:
        AttributePath:
          allOf:
            - $ref: "#/components/schemas/AttributePath"
            - description: A string representation of the path to a given attribute or sub-attribute. Supports JMESPath.
        AttributeValue:
          allOf:
            - $ref: "#/components/schemas/AttributeValue"
            - description: The value of the attribute. This is a <code>Document</code> type. This type is not supported by Java V1, Go V1, and older versions of the AWS CLI.
      description: An entity attribute that's unique to a specific entity.
    AlternateIdentifier:
      type: object
      properties:
        ExternalId:
          allOf:
            - $ref: "#/components/schemas/ExternalId"
            - description: The identifier issued to this resource by an external identity provider.
        UniqueAttribute:
          allOf:
            - $ref: "#/components/schemas/UniqueAttribute"
            - description: An entity attribute that's unique to a specific entity.
      description: A unique identifier for a user or group that is not the primary identifier. This value can be an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute.
    AttributePath:
      type: string
      pattern: \p{L}+(?:\.\p{L}+){0,2}
      minLength: 1
      maxLength: 255
    AttributeValue:
      type: object
      properties: {}
      description: The value of the attribute. This is a <code>Document</code> type. This type is not supported by Java V1, Go V1, and older versions of the AWS CLI.
    AttributeOperation:
      type: object
      required:
        - AttributePath
      properties:
        AttributePath:
          allOf:
            - $ref: "#/components/schemas/AttributePath"
            - description: A string representation of the path to a given attribute or sub-attribute. Supports JMESPath.
        AttributeValue:
          allOf:
            - $ref: "#/components/schemas/AttributeValue"
            - description: The value of the attribute. This is a <code>Document</code> type. This type is not supported by Java V1, Go V1, and older versions of the AWS CLI.
      description: An operation that applies to the requested group. This operation might add, replace, or remove an attribute.
    AttributeOperations:
      type: array
      items:
        $ref: "#/components/schemas/AttributeOperation"
      minItems: 1
      maxItems: 100
    IdentityStoreId:
      type: string
      pattern: d-[0-9a-f]{10}$|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
      minLength: 1
      maxLength: 36
    ResourceId:
      type: string
      pattern: ([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}
      minLength: 1
      maxLength: 47
    MemberId:
      type: object
      properties:
        UserId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: An object containing the identifiers of resources that can be members.
      description: An object containing the identifier of a group member.
    GroupDisplayName:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}\\t\\n\\r  ]+"
      minLength: 1
      maxLength: 1024
      format: password
    UserName:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 128
      format: password
    Name:
      type: object
      properties:
        Formatted:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing a formatted version of the name for display.
        FamilyName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The family name of the user.
        GivenName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The given name of the user.
        MiddleName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The middle name of the user.
        HonorificPrefix:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The honorific prefix of the user. For example, "Dr."
        HonorificSuffix:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: The honorific suffix of the user. For example, "M.D."
      description: The full name of the user.
    Emails:
      type: array
      items:
        $ref: "#/components/schemas/Email"
      minItems: 1
      maxItems: 1
    PhoneNumbers:
      type: array
      items:
        $ref: "#/components/schemas/PhoneNumber"
      minItems: 1
      maxItems: 1
    ExternalIds:
      type: array
      items:
        $ref: "#/components/schemas/ExternalId"
      minItems: 1
      maxItems: 10
    Email:
      type: object
      properties:
        Value:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing an email address. For example, "johndoe@amazon.com."
        Type:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string representing the type of address. For example, "Work."
        Primary:
          allOf:
            - $ref: "#/components/schemas/SensitiveBooleanType"
            - description: A Boolean value representing whether this is the primary email address for the associated resource.
      description: The email address associated with the user.
    ExternalIdIssuer:
      type: string
      pattern: \(\?!\(\?i\)\(arn\|aws\):\)[\p\{L\}\p\{M\}\p\{S\}\p\{N\}\p\{P\}]\+
      minLength: 1
      maxLength: 100
      format: password
    ExternalIdIdentifier:
      type: string
      pattern: "[\\p{L}\\p{M}\\p{S}\\p{N}\\p{P}]+"
      minLength: 1
      maxLength: 256
      format: password
    Filter:
      type: object
      required:
        - AttributePath
        - AttributeValue
      properties:
        AttributePath:
          allOf:
            - $ref: "#/components/schemas/AttributePath"
            - description: The attribute path that is used to specify which attribute name to search. Length limit is 255 characters. For example, <code>UserName</code> is a valid attribute path for the <code>ListUsers</code> API, and <code>DisplayName</code> is a valid attribute path for the <code>ListGroups</code> API.
        AttributeValue:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: "Represents the data for an attribute. Each attribute value is described as a name-value pair. "
      description: A query filter used by <code>ListUsers</code> and <code>ListGroups</code>. This filter object provides the attribute name and attribute value to search users or groups.
    Filters:
      type: array
      items:
        $ref: "#/components/schemas/Filter"
      minItems: 0
      maxItems: 1
    Group:
      type: object
      required:
        - GroupId
        - IdentityStoreId
      properties:
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        DisplayName:
          allOf:
            - $ref: "#/components/schemas/GroupDisplayName"
            - description: The display name value for the group. The length limit is 1,024 characters. This value can consist of letters, accented characters, symbols, numbers, punctuation, tab, new line, carriage return, space, and nonbreaking space in this attribute. This value is specified at the time the group is created and stored as an attribute of the group object in the identity store.
        ExternalIds:
          allOf:
            - $ref: "#/components/schemas/ExternalIds"
            - description: A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.
        Description:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing a description of the specified group.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
      description: A group object that contains the metadata and attributes for a specified group.
    GroupIds:
      type: array
      items:
        $ref: "#/components/schemas/ResourceId"
      minItems: 1
      maxItems: 100
    GroupMembership:
      type: object
      required:
        - IdentityStoreId
      properties:
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
        MembershipId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a <code>GroupMembership</code> object in an identity store.
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        MemberId:
          allOf:
            - $ref: "#/components/schemas/MemberId"
            - description: An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.
      description: Contains the identifiers for a group, a group member, and a <code>GroupMembership</code> object in the identity store.
    GroupMembershipExistenceResult:
      type: object
      properties:
        GroupId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a group in the identity store.
        MemberId:
          allOf:
            - $ref: "#/components/schemas/MemberId"
            - description: An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.
        MembershipExists:
          allOf:
            - $ref: "#/components/schemas/SensitiveBooleanType"
            - description: Indicates whether a membership relation exists or not.
      description: Indicates whether a resource is a member of a group in the identity store.
    GroupMembershipExistenceResults:
      type: array
      items:
        $ref: "#/components/schemas/GroupMembershipExistenceResult"
    GroupMemberships:
      type: array
      items:
        $ref: "#/components/schemas/GroupMembership"
    Groups:
      type: array
      items:
        $ref: "#/components/schemas/Group"
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
      pattern: "[-a-zA-Z0-9+=/:]*"
      minLength: 1
      maxLength: 65535
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    PhoneNumber:
      type: object
      properties:
        Value:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing a phone number. For example, "8675309" or "+1 (800) 123-4567".
        Type:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string representing the type of a phone number. For example, "Mobile."
        Primary:
          allOf:
            - $ref: "#/components/schemas/SensitiveBooleanType"
            - description: A Boolean value representing whether this is the primary phone number for the associated resource.
      description: The phone number associated with the user.
    User:
      type: object
      required:
        - UserId
        - IdentityStoreId
      properties:
        UserName:
          allOf:
            - $ref: "#/components/schemas/UserName"
            - description: A unique string used to identify the user. The length limit is 128 characters. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store.
        UserId:
          allOf:
            - $ref: "#/components/schemas/ResourceId"
            - description: The identifier for a user in the identity store.
        ExternalIds:
          allOf:
            - $ref: "#/components/schemas/ExternalIds"
            - description: A list of <code>ExternalId</code> objects that contains the identifiers issued to this resource by an external identity provider.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: An object containing the name of the user.
        DisplayName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the name of the user that is formatted for display when the user is referenced. For example, "John Doe."
        NickName:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing an alternate name for the user.
        ProfileUrl:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing a URL that might be associated with the user.
        Emails:
          allOf:
            - $ref: "#/components/schemas/Emails"
            - description: A list of <code>Email</code> objects containing email addresses associated with the user.
        Addresses:
          allOf:
            - $ref: "#/components/schemas/Addresses"
            - description: A list of <code>Address</code> objects containing addresses associated with the user.
        PhoneNumbers:
          allOf:
            - $ref: "#/components/schemas/PhoneNumbers"
            - description: A list of <code>PhoneNumber</code> objects containing phone numbers associated with the user.
        UserType:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string indicating the type of user. Possible values are left unspecified. The value can vary based on your specific use case.
        Title:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the title of the user. Possible values are left unspecified. The value can vary based on your specific use case.
        PreferredLanguage:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the preferred language of the user. For example, "American English" or "en-us."
        Locale:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the geographical region or location of the user.
        Timezone:
          allOf:
            - $ref: "#/components/schemas/SensitiveStringType"
            - description: A string containing the time zone of the user.
        IdentityStoreId:
          allOf:
            - $ref: "#/components/schemas/IdentityStoreId"
            - description: The globally unique identifier for the identity store.
      description: A user object that contains the metadata and attributes for a specified user.
security:
  - hmac: []
