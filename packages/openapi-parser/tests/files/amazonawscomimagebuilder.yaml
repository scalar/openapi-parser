openapi: 3.0.0
info:
  version: 2019-12-02
  x-release: v4
  title: EC2 Image Builder
  description: EC2 Image Builder is a fully managed Amazon Web Services service that makes it easier to automate the creation, management, and deployment of customized, secure, and up-to-date "golden" server images that are pre-installed and pre-configured with software and settings to meet specific IT standards.
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: imagebuilder
  x-aws-signingName: imagebuilder
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/imagebuilder-2019-12-02.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/imagebuilder/
servers:
  - url: http://imagebuilder.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The imagebuilder multi-region endpoint
  - url: https://imagebuilder.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The imagebuilder multi-region endpoint
  - url: http://imagebuilder.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The imagebuilder endpoint for China (Beijing) and China (Ningxia)
  - url: https://imagebuilder.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The imagebuilder endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /CancelImageCreation:
    put:
      operationId: CancelImageCreation
      description: CancelImageCreation cancels the creation of Image. This operation can only be used on images in a non-terminal state.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelImageCreationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imageBuildVersionArn
                - clientToken
              properties:
                imageBuildVersionArn:
                  description: The Amazon Resource Name (ARN) of the image that you want to cancel creation for.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
                clientToken:
                  description: Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateComponent:
    put:
      operationId: CreateComponent
      description: <p>Creates a new component that can be used to build, validate, test, and assess your image. The component is based on a YAML document that you specify using exactly one of the following methods:</p> <ul> <li> <p>Inline, using the <code>data</code> property in the request body.</p> </li> <li> <p>A URL that points to a YAML document file stored in Amazon S3, using the <code>uri</code> property in the request body.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateComponentResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: InvalidVersionNumberException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidVersionNumberException"
        "488":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "489":
          description: InvalidParameterCombinationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterCombinationException"
        "490":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - semanticVersion
                - platform
                - clientToken
              properties:
                name:
                  description: The name of the component.
                  type: string
                  pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
                semanticVersion:
                  description: "<p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"
                  type: string
                  pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
                description:
                  description: Describes the contents of the component.
                  type: string
                  minLength: 1
                  maxLength: 1024
                changeDescription:
                  description: The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.
                  type: string
                  minLength: 1
                  maxLength: 1024
                platform:
                  description: The operating system platform of the component.
                  type: string
                  enum:
                    - Windows
                    - Linux
                supportedOsVersions:
                  description: The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the base image OS version during image recipe creation.
                  type: array
                  items:
                    $ref: "#/components/schemas/OsVersion"
                  minItems: 1
                  maxItems: 25
                data:
                  description: Component <code>data</code> contains inline YAML document content for the component. Alternatively, you can specify the <code>uri</code> of a YAML document file stored in Amazon S3. However, you cannot specify both properties.
                  type: string
                  pattern: "[^\\x00]+"
                  minLength: 1
                  maxLength: 16000
                uri:
                  description: <p>The <code>uri</code> of a YAML component document file. This must be an S3 URL (<code>s3://bucket/key</code>), and the requester must have permission to access the S3 bucket it points to. If you use Amazon S3, you can specify component content up to your service quota.</p> <p>Alternatively, you can specify the YAML document inline, using the component <code>data</code> property. You cannot specify both properties.</p>
                  type: string
                kmsKeyId:
                  description: The ID of the KMS key that is used to encrypt this component.
                  type: string
                  minLength: 1
                  maxLength: 1024
                tags:
                  description: The tags that apply to the component.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                clientToken:
                  description: The idempotency token of the component.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateContainerRecipe:
    put:
      operationId: CreateContainerRecipe
      description: Creates a new container recipe. Container recipes define how images are configured, tested, and assessed.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateContainerRecipeResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: InvalidVersionNumberException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidVersionNumberException"
        "488":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "489":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "490":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - containerType
                - name
                - semanticVersion
                - components
                - parentImage
                - targetRepository
                - clientToken
              properties:
                containerType:
                  description: The type of container to create.
                  type: string
                  enum:
                    - DOCKER
                name:
                  description: The name of the container recipe.
                  type: string
                  pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
                description:
                  description: The description of the container recipe.
                  type: string
                  minLength: 1
                  maxLength: 1024
                semanticVersion:
                  description: "<p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"
                  type: string
                  pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
                components:
                  description: Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
                  type: array
                  items:
                    $ref: "#/components/schemas/ComponentConfiguration"
                  minItems: 1
                instanceConfiguration:
                  description: Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
                  type: object
                  properties:
                    image:
                      allOf:
                        - $ref: "#/components/schemas/NonEmptyString"
                        - description: The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
                    blockDeviceMappings:
                      allOf:
                        - $ref: "#/components/schemas/InstanceBlockDeviceMappings"
                        - description: Defines the block devices to attach for building an instance from this Image Builder AMI.
                dockerfileTemplateData:
                  description: The Dockerfile template used to build your image as an inline data blob.
                  type: string
                  pattern: "[^\\x00]+"
                  minLength: 1
                  maxLength: 16000
                dockerfileTemplateUri:
                  description: The Amazon S3 URI for the Dockerfile that will be used to build your container image.
                  type: string
                platformOverride:
                  description: Specifies the operating system platform when you use a custom base image.
                  type: string
                  enum:
                    - Windows
                    - Linux
                imageOsVersionOverride:
                  description: Specifies the operating system version for the base image.
                  type: string
                  minLength: 1
                  maxLength: 1024
                parentImage:
                  description: The base image for the container recipe.
                  type: string
                  minLength: 1
                  maxLength: 1024
                tags:
                  description: Tags that are attached to the container recipe.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                workingDirectory:
                  description: The working directory for use during build and test workflows.
                  type: string
                  minLength: 1
                  maxLength: 1024
                targetRepository:
                  description: The container repository where the output container image is stored.
                  type: object
                  properties:
                    service:
                      allOf:
                        - $ref: "#/components/schemas/ContainerRepositoryService"
                        - description: Specifies the service in which this image was registered.
                    repositoryName:
                      allOf:
                        - $ref: "#/components/schemas/NonEmptyString"
                        - description: The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
                kmsKeyId:
                  description: Identifies which KMS key is used to encrypt the container image.
                  type: string
                  minLength: 1
                  maxLength: 1024
                clientToken:
                  description: The client token used to make this request idempotent.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateDistributionConfiguration:
    put:
      operationId: CreateDistributionConfiguration
      description: Creates a new distribution configuration. Distribution configurations define and configure the outputs of your pipeline.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDistributionConfigurationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "488":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "489":
          description: InvalidParameterCombinationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterCombinationException"
        "490":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - distributions
                - clientToken
              properties:
                name:
                  description: The name of the distribution configuration.
                  type: string
                  pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
                description:
                  description: The description of the distribution configuration.
                  type: string
                  minLength: 1
                  maxLength: 1024
                distributions:
                  description: The distributions of the distribution configuration.
                  type: array
                  items:
                    $ref: "#/components/schemas/Distribution"
                tags:
                  description: The tags of the distribution configuration.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                clientToken:
                  description: The idempotency token of the distribution configuration.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateImage:
    put:
      operationId: CreateImage
      description: Creates a new image. This request will create a new image along with all of the configured output resources defined in the distribution configuration. You must specify exactly one recipe for your image, using either a ContainerRecipeArn or an ImageRecipeArn.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateImageResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "488":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - infrastructureConfigurationArn
                - clientToken
              properties:
                imageRecipeArn:
                  description: The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                containerRecipeArn:
                  description: The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                distributionConfigurationArn:
                  description: The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
                infrastructureConfigurationArn:
                  description: The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
                imageTestsConfiguration:
                  description: Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
                  type: object
                  properties:
                    imageTestsEnabled:
                      allOf:
                        - $ref: "#/components/schemas/NullableBoolean"
                        - description: Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
                    timeoutMinutes:
                      allOf:
                        - $ref: "#/components/schemas/ImageTestsTimeoutMinutes"
                        - description: <p>The maximum time in minutes that tests are permitted to run.</p> <note> <p>The timeoutMinutes attribute is not currently active. This value is ignored.</p> </note>
                enhancedImageMetadataEnabled:
                  description: Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
                  type: boolean
                tags:
                  description: The tags of the image.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                clientToken:
                  description: The idempotency token used to make this request idempotent.
                  type: string
                  minLength: 1
                  maxLength: 36
                imageScanningConfiguration:
                  description: Contains settings for Image Builder image resource and container image scans.
                  type: object
                  properties:
                    imageScanningEnabled:
                      allOf:
                        - $ref: "#/components/schemas/NullableBoolean"
                        - description: A setting that indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
                    ecrConfiguration:
                      allOf:
                        - $ref: "#/components/schemas/EcrConfiguration"
                        - description: Contains Amazon ECR settings for vulnerability scans.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateImagePipeline:
    put:
      operationId: CreateImagePipeline
      description: Creates a new image pipeline. Image pipelines enable you to automate the creation and distribution of images.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateImagePipelineResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "488":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "489":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - infrastructureConfigurationArn
                - clientToken
              properties:
                name:
                  description: The name of the image pipeline.
                  type: string
                  pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
                description:
                  description: The description of the image pipeline.
                  type: string
                  minLength: 1
                  maxLength: 1024
                imageRecipeArn:
                  description: The Amazon Resource Name (ARN) of the image recipe that will be used to configure images created by this image pipeline.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                containerRecipeArn:
                  description: The Amazon Resource Name (ARN) of the container recipe that is used to configure images created by this container pipeline.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                infrastructureConfigurationArn:
                  description: The Amazon Resource Name (ARN) of the infrastructure configuration that will be used to build images created by this image pipeline.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
                distributionConfigurationArn:
                  description: The Amazon Resource Name (ARN) of the distribution configuration that will be used to configure and distribute images created by this image pipeline.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
                imageTestsConfiguration:
                  description: Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
                  type: object
                  properties:
                    imageTestsEnabled:
                      allOf:
                        - $ref: "#/components/schemas/NullableBoolean"
                        - description: Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
                    timeoutMinutes:
                      allOf:
                        - $ref: "#/components/schemas/ImageTestsTimeoutMinutes"
                        - description: <p>The maximum time in minutes that tests are permitted to run.</p> <note> <p>The timeoutMinutes attribute is not currently active. This value is ignored.</p> </note>
                enhancedImageMetadataEnabled:
                  description: Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
                  type: boolean
                schedule:
                  description: A schedule configures how often and when a pipeline will automatically create a new image.
                  type: object
                  properties:
                    scheduleExpression:
                      allOf:
                        - $ref: "#/components/schemas/NonEmptyString"
                        - description: <p>The cron expression determines how often EC2 Image Builder evaluates your <code>pipelineExecutionStartCondition</code>.</p> <p>For information on how to format a cron expression in Image Builder, see <a href="https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-builder-cron.html">Use cron expressions in EC2 Image Builder</a>.</p>
                    timezone:
                      allOf:
                        - $ref: "#/components/schemas/Timezone"
                        - description: The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the <a href="https://www.joda.org/joda-time/timezones.html">IANA timezone format</a>. If not specified this defaults to UTC.
                    pipelineExecutionStartCondition:
                      allOf:
                        - $ref: "#/components/schemas/PipelineExecutionStartCondition"
                        - description: The condition configures when the pipeline should trigger a new image build. When the <code>pipelineExecutionStartCondition</code> is set to <code>EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE</code>, and you use semantic version filters on the base image or components in your image recipe, EC2 Image Builder will build a new image only when there are new versions of the image or components in your recipe that match the semantic version filter. When it is set to <code>EXPRESSION_MATCH_ONLY</code>, it will build a new image every time the CRON expression matches the current time. For semantic version syntax, see <a href="https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_CreateComponent.html">CreateComponent</a> in the <i> EC2 Image Builder API Reference</i>.
                status:
                  description: The status of the image pipeline.
                  type: string
                  enum:
                    - DISABLED
                    - ENABLED
                tags:
                  description: The tags of the image pipeline.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                clientToken:
                  description: The idempotency token used to make this request idempotent.
                  type: string
                  minLength: 1
                  maxLength: 36
                imageScanningConfiguration:
                  description: Contains settings for Image Builder image resource and container image scans.
                  type: object
                  properties:
                    imageScanningEnabled:
                      allOf:
                        - $ref: "#/components/schemas/NullableBoolean"
                        - description: A setting that indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
                    ecrConfiguration:
                      allOf:
                        - $ref: "#/components/schemas/EcrConfiguration"
                        - description: Contains Amazon ECR settings for vulnerability scans.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateImageRecipe:
    put:
      operationId: CreateImageRecipe
      description: Creates a new image recipe. Image recipes define how images are configured, tested, and assessed.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateImageRecipeResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: InvalidVersionNumberException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidVersionNumberException"
        "488":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "489":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "490":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - semanticVersion
                - components
                - parentImage
                - clientToken
              properties:
                name:
                  description: The name of the image recipe.
                  type: string
                  pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
                description:
                  description: The description of the image recipe.
                  type: string
                  minLength: 1
                  maxLength: 1024
                semanticVersion:
                  description: "<p>The semantic version of the image recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"
                  type: string
                  pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
                components:
                  description: The components included in the image recipe.
                  type: array
                  items:
                    $ref: "#/components/schemas/ComponentConfiguration"
                  minItems: 1
                parentImage:
                  description: "The base image of the image recipe. The value of the string can be the ARN of the base image or an AMI ID. The format for the ARN follows this example: <code>arn:aws:imagebuilder:us-west-2:aws:image/windows-server-2016-english-full-base-x86/x.x.x</code>. You can provide the specific version that you want to use, or you can use a wildcard in all of the fields. If you enter an AMI ID for the string value, you must have access to the AMI, and the AMI must be in the same Region in which you are using Image Builder."
                  type: string
                  minLength: 1
                  maxLength: 1024
                blockDeviceMappings:
                  description: The block device mappings of the image recipe.
                  type: array
                  items:
                    $ref: "#/components/schemas/InstanceBlockDeviceMapping"
                tags:
                  description: The tags of the image recipe.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                workingDirectory:
                  description: The working directory used during build and test workflows.
                  type: string
                  minLength: 1
                  maxLength: 1024
                additionalInstanceConfiguration:
                  description: <p>In addition to your infrastructure configuration, these settings provide an extra layer of control over your build instances. You can also specify commands to run on launch for all of your build instances.</p> <p>Image Builder does not automatically install the Systems Manager agent on Windows instances. If your base image includes the Systems Manager agent, then the AMI that you create will also include the agent. For Linux instances, if the base image does not already include the Systems Manager agent, Image Builder installs it. For Linux instances where Image Builder installs the Systems Manager agent, you can choose whether to keep it for the AMI that you create.</p>
                  type: object
                  properties:
                    systemsManagerAgent:
                      allOf:
                        - $ref: "#/components/schemas/SystemsManagerAgent"
                        - description: Contains settings for the Systems Manager agent on your build instance.
                    userDataOverride:
                      allOf:
                        - $ref: "#/components/schemas/UserDataOverride"
                        - description: <p>Use this property to provide commands or a command script to run when you launch your build instance.</p> <p>The userDataOverride property replaces any commands that Image Builder might have added to ensure that Systems Manager is installed on your Linux build instance. If you override the user data, make sure that you add commands to install Systems Manager, if it is not pre-installed on your base image.</p> <note> <p>The user data is always base 64 encoded. For example, the following commands are encoded as <code>IyEvYmluL2Jhc2gKbWtkaXIgLXAgL3Zhci9iYi8KdG91Y2ggL3Zhci$</code>:</p> <p> <i>#!/bin/bash</i> </p> <p>mkdir -p /var/bb/</p> <p>touch /var</p> </note>
                clientToken:
                  description: The idempotency token used to make this request idempotent.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateInfrastructureConfiguration:
    put:
      operationId: CreateInfrastructureConfiguration
      description: Creates a new infrastructure configuration. An infrastructure configuration defines the environment in which your image will be built and tested.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateInfrastructureConfigurationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "488":
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAlreadyExistsException"
        "489":
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceQuotaExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - instanceProfileName
                - clientToken
              properties:
                name:
                  description: The name of the infrastructure configuration.
                  type: string
                  pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
                description:
                  description: The description of the infrastructure configuration.
                  type: string
                  minLength: 1
                  maxLength: 1024
                instanceTypes:
                  description: The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability.
                  type: array
                  items:
                    $ref: "#/components/schemas/InstanceType"
                instanceProfileName:
                  description: The instance profile to associate with the instance used to customize your Amazon EC2 AMI.
                  type: string
                  pattern: ^[\w+=,.@-]+$
                  minLength: 1
                  maxLength: 256
                securityGroupIds:
                  description: The security group IDs to associate with the instance used to customize your Amazon EC2 AMI.
                  type: array
                  items:
                    $ref: "#/components/schemas/NonEmptyString"
                subnetId:
                  description: The subnet ID in which to place the instance used to customize your Amazon EC2 AMI.
                  type: string
                  minLength: 1
                  maxLength: 1024
                logging:
                  description: Logging configuration defines where Image Builder uploads your logs.
                  type: object
                  properties:
                    s3Logs:
                      allOf:
                        - $ref: "#/components/schemas/S3Logs"
                        - description: The Amazon S3 logging configuration.
                keyPair:
                  description: The key pair of the infrastructure configuration. You can use this to log on to and debug the instance used to create your image.
                  type: string
                  minLength: 1
                  maxLength: 1024
                terminateInstanceOnFailure:
                  description: The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails.
                  type: boolean
                snsTopicArn:
                  description: <p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>
                  type: string
                  pattern: ^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$
                resourceTags:
                  description: The tags attached to the resource created by Image Builder.
                  type: object
                  minProperties: 1
                  maxProperties: 30
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                instanceMetadataOptions:
                  description: The instance metadata options that apply to the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.
                  type: object
                  properties:
                    httpTokens:
                      allOf:
                        - $ref: "#/components/schemas/HttpTokens"
                        - description: <p>Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows:</p> <ul> <li> <p> <b>required</b> – When you retrieve the IAM role credentials, version 2.0 credentials are returned in all cases.</p> </li> <li> <p> <b>optional</b> – You can include a signed token header in your request to retrieve instance metadata, or you can leave it out. If you include it, version 2.0 credentials are returned for the IAM role. Otherwise, version 1.0 credentials are returned.</p> </li> </ul> <p>The default setting is <b>optional</b>.</p>
                    httpPutResponseHopLimit:
                      allOf:
                        - $ref: "#/components/schemas/HttpPutResponseHopLimit"
                        - description: Limit the number of hops that an instance metadata request can traverse to reach its destination. The default is one hop. However, if HTTP tokens are required, container image builds need a minimum of two hops.
                tags:
                  description: The tags of the infrastructure configuration.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                clientToken:
                  description: The idempotency token used to make this request idempotent.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteComponent#componentBuildVersionArn:
    delete:
      operationId: DeleteComponent
      description: Deletes a component build version.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteComponentResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "486":
          description: ResourceDependencyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDependencyException"
      parameters:
        - name: componentBuildVersionArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the component build version to delete.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteContainerRecipe#containerRecipeArn:
    delete:
      operationId: DeleteContainerRecipe
      description: Deletes a container recipe.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteContainerRecipeResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "486":
          description: ResourceDependencyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDependencyException"
      parameters:
        - name: containerRecipeArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the container recipe to delete.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteDistributionConfiguration#distributionConfigurationArn:
    delete:
      operationId: DeleteDistributionConfiguration
      description: Deletes a distribution configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDistributionConfigurationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "486":
          description: ResourceDependencyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDependencyException"
      parameters:
        - name: distributionConfigurationArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the distribution configuration to delete.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteImage#imageBuildVersionArn:
    delete:
      operationId: DeleteImage
      description: <p>Deletes an Image Builder image resource. This does not delete any EC2 AMIs or ECR container images that are created during the image build process. You must clean those up separately, using the appropriate Amazon EC2 or Amazon ECR console actions, or API or CLI commands.</p> <ul> <li> <p>To deregister an EC2 Linux AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/deregister-ami.html">Deregister your Linux AMI</a> in the <i> <i>Amazon EC2 User Guide</i> </i>.</p> </li> <li> <p>To deregister an EC2 Windows AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/deregister-ami.html">Deregister your Windows AMI</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i>.</p> </li> <li> <p>To delete a container image from Amazon ECR, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/delete_image.html">Deleting an image</a> in the <i>Amazon ECR User Guide</i>.</p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteImageResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "486":
          description: ResourceDependencyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDependencyException"
      parameters:
        - name: imageBuildVersionArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the Image Builder image resource to delete.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteImagePipeline#imagePipelineArn:
    delete:
      operationId: DeleteImagePipeline
      description: Deletes an image pipeline.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteImagePipelineResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "486":
          description: ResourceDependencyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDependencyException"
      parameters:
        - name: imagePipelineArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the image pipeline to delete.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteImageRecipe#imageRecipeArn:
    delete:
      operationId: DeleteImageRecipe
      description: Deletes an image recipe.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteImageRecipeResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "486":
          description: ResourceDependencyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDependencyException"
      parameters:
        - name: imageRecipeArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the image recipe to delete.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteInfrastructureConfiguration#infrastructureConfigurationArn:
    delete:
      operationId: DeleteInfrastructureConfiguration
      description: Deletes an infrastructure configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteInfrastructureConfigurationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "486":
          description: ResourceDependencyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDependencyException"
      parameters:
        - name: infrastructureConfigurationArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the infrastructure configuration to delete.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetComponent#componentBuildVersionArn:
    get:
      operationId: GetComponent
      description: Gets a component object.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetComponentResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: componentBuildVersionArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the component that you want to get. Regex requires the suffix <code>/\d+$</code>.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetComponentPolicy#componentArn:
    get:
      operationId: GetComponentPolicy
      description: Gets a component policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetComponentPolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: componentArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the component whose policy you want to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetContainerRecipe#containerRecipeArn:
    get:
      operationId: GetContainerRecipe
      description: Retrieves a container recipe.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetContainerRecipeResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: containerRecipeArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the container recipe to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetContainerRecipePolicy#containerRecipeArn:
    get:
      operationId: GetContainerRecipePolicy
      description: Retrieves the policy for a container recipe.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetContainerRecipePolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: containerRecipeArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the container recipe for the policy being requested.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetDistributionConfiguration#distributionConfigurationArn:
    get:
      operationId: GetDistributionConfiguration
      description: Gets a distribution configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDistributionConfigurationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: distributionConfigurationArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the distribution configuration that you want to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetImage#imageBuildVersionArn:
    get:
      operationId: GetImage
      description: Gets an image.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImageResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: imageBuildVersionArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the image that you want to get.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetImagePipeline#imagePipelineArn:
    get:
      operationId: GetImagePipeline
      description: Gets an image pipeline.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImagePipelineResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: imagePipelineArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the image pipeline that you want to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetImagePolicy#imageArn:
    get:
      operationId: GetImagePolicy
      description: Gets an image policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImagePolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: imageArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the image whose policy you want to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetImageRecipe#imageRecipeArn:
    get:
      operationId: GetImageRecipe
      description: Gets an image recipe.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImageRecipeResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: imageRecipeArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the image recipe that you want to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetImageRecipePolicy#imageRecipeArn:
    get:
      operationId: GetImageRecipePolicy
      description: Gets an image recipe policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImageRecipePolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "482":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "483":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: imageRecipeArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the image recipe whose policy you want to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetInfrastructureConfiguration#infrastructureConfigurationArn:
    get:
      operationId: GetInfrastructureConfiguration
      description: Gets an infrastructure configuration.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetInfrastructureConfigurationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: infrastructureConfigurationArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the infrastructure configuration that you want to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetWorkflowExecution#workflowExecutionId:
    get:
      operationId: GetWorkflowExecution
      description: Get the runtime information that was logged for a specific runtime instance of the workflow.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkflowExecutionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: workflowExecutionId
          in: query
          required: true
          description: Use the unique identifier for a runtime instance of the workflow to get runtime details.
          schema:
            type: string
            pattern: ^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetWorkflowStepExecution#stepExecutionId:
    get:
      operationId: GetWorkflowStepExecution
      description: Get the runtime information that was logged for a specific runtime instance of the workflow step.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkflowStepExecutionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "485":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: stepExecutionId
          in: query
          required: true
          description: Use the unique identifier for a specific runtime instance of the workflow step to get runtime details for that step.
          schema:
            type: string
            pattern: ^step-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ImportComponent:
    put:
      operationId: ImportComponent
      description: Imports a component and transforms its data into a component document.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportComponentResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: InvalidVersionNumberException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidVersionNumberException"
        "488":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "489":
          description: InvalidParameterCombinationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterCombinationException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - semanticVersion
                - type
                - format
                - platform
                - clientToken
              properties:
                name:
                  description: The name of the component.
                  type: string
                  pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
                semanticVersion:
                  description: "<p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
                  type: string
                  pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
                description:
                  description: The description of the component. Describes the contents of the component.
                  type: string
                  minLength: 1
                  maxLength: 1024
                changeDescription:
                  description: The change description of the component. This description indicates the change that has been made in this version, or what makes this version different from other versions of this component.
                  type: string
                  minLength: 1
                  maxLength: 1024
                type:
                  description: The type of the component denotes whether the component is used to build the image, or only to test it.
                  type: string
                  enum:
                    - BUILD
                    - TEST
                format:
                  description: The format of the resource that you want to import as a component.
                  type: string
                  enum:
                    - SHELL
                platform:
                  description: The platform of the component.
                  type: string
                  enum:
                    - Windows
                    - Linux
                data:
                  description: The data of the component. Used to specify the data inline. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.
                  type: string
                  minLength: 1
                  maxLength: 1024
                uri:
                  description: The uri of the component. Must be an Amazon S3 URL and the requester must have permission to access the Amazon S3 bucket. If you use Amazon S3, you can specify component content up to your service quota. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.
                  type: string
                kmsKeyId:
                  description: The ID of the KMS key that should be used to encrypt this component.
                  type: string
                  minLength: 1
                  maxLength: 1024
                tags:
                  description: The tags of the component.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                clientToken:
                  description: The idempotency token of the component.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ImportVmImage:
    put:
      operationId: ImportVmImage
      description: <p>When you export your virtual machine (VM) from its virtualization environment, that process creates a set of one or more disk container files that act as snapshots of your VM’s environment, settings, and data. The Amazon EC2 API <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportImage.html">ImportImage</a> action uses those files to import your VM and create an AMI. To import using the CLI command, see <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/import-image.html">import-image</a> </p> <p>You can reference the task ID from the VM import to pull in the AMI that the import created as the base image for your Image Builder recipe.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportVmImageResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - semanticVersion
                - platform
                - vmImportTaskId
                - clientToken
              properties:
                name:
                  description: The name of the base image that is created by the import process.
                  type: string
                  minLength: 1
                  maxLength: 1024
                semanticVersion:
                  description: "<p>The semantic version to attach to the base image that was created during the import process. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"
                  type: string
                  pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
                description:
                  description: The description for the base image that is created by the import process.
                  type: string
                  minLength: 1
                  maxLength: 1024
                platform:
                  description: The operating system platform for the imported VM.
                  type: string
                  enum:
                    - Windows
                    - Linux
                osVersion:
                  description: The operating system version for the imported VM.
                  type: string
                  minLength: 1
                vmImportTaskId:
                  description: The <code>importTaskId</code> (API) or <code>ImportTaskId</code> (CLI) from the Amazon EC2 VM import process. Image Builder retrieves information from the import process to pull in the AMI that is created from the VM source as the base image for your recipe.
                  type: string
                  minLength: 1
                  maxLength: 1024
                tags:
                  description: Tags that are attached to the import resources.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                clientToken:
                  description: Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListComponentBuildVersions:
    post:
      operationId: ListComponentBuildVersions
      description: "<p>Returns the list of component build versions for the specified semantic version.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListComponentBuildVersionsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - componentVersionArn
              properties:
                componentVersionArn:
                  description: The component version Amazon Resource Name (ARN) whose versions you want to list.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListComponents:
    post:
      operationId: ListComponents
      description: "<p>Returns the list of components that can be filtered by name, or by using the listed <code>filters</code> to streamline results. Newly created components can take up to two minutes to appear in the ListComponents API Results.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListComponentsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  description: Filters results based on the type of owner for the component. By default, this request returns a list of components that your account owns. To see results for other types of owners, you can specify components that Amazon manages, third party components, or components that other accounts have shared with you.
                  type: string
                  enum:
                    - Self
                    - Shared
                    - Amazon
                    - ThirdParty
                filters:
                  description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>description</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>supportedOsVersion</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                byName:
                  description: Returns the list of components for the specified name.
                  type: boolean
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListContainerRecipes:
    post:
      operationId: ListContainerRecipes
      description: Returns a list of container recipes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListContainerRecipesResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  description: Returns container recipes belonging to the specified owner, that have been shared with you. You can omit this field to return container recipes belonging to your account.
                  type: string
                  enum:
                    - Self
                    - Shared
                    - Amazon
                    - ThirdParty
                filters:
                  description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>containerType</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 1024
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListDistributionConfigurations:
    post:
      operationId: ListDistributionConfigurations
      description: Returns a list of distribution configurations.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDistributionConfigurationsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  description: You can filter on <code>name</code> to streamline results.
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListImageBuildVersions:
    post:
      operationId: ListImageBuildVersions
      description: Returns a list of image build versions.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImageBuildVersionsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imageVersionArn
              properties:
                imageVersionArn:
                  description: The Amazon Resource Name (ARN) of the image whose build versions you want to retrieve.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                filters:
                  description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>osVersion</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListImagePackages:
    post:
      operationId: ListImagePackages
      description: List the Packages that are associated with an Image Build Version, as determined by Amazon Web Services Systems Manager Inventory at build time.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImagePackagesResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "487":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imageBuildVersionArn
              properties:
                imageBuildVersionArn:
                  description: Filter results for the ListImagePackages request by the Image Build Version ARN
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListImagePipelineImages:
    post:
      operationId: ListImagePipelineImages
      description: Returns a list of images created by the specified pipeline.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImagePipelineImagesResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "487":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imagePipelineArn
              properties:
                imagePipelineArn:
                  description: The Amazon Resource Name (ARN) of the image pipeline whose images you want to view.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
                filters:
                  description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListImagePipelines:
    post:
      operationId: ListImagePipelines
      description: Returns a list of image pipelines.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImagePipelinesResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>description</code> </p> </li> <li> <p> <code>distributionConfigurationArn</code> </p> </li> <li> <p> <code>imageRecipeArn</code> </p> </li> <li> <p> <code>infrastructureConfigurationArn</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>status</code> </p> </li> </ul>
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListImageRecipes:
    post:
      operationId: ListImageRecipes
      description: Returns a list of image recipes.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImageRecipesResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  description: The owner defines which image recipes you want to list. By default, this request will only show image recipes owned by your account. You can use this field to specify if you want to view image recipes owned by yourself, by Amazon, or those image recipes that have been shared with you by other customers.
                  type: string
                  enum:
                    - Self
                    - Shared
                    - Amazon
                    - ThirdParty
                filters:
                  description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListImageScanFindingAggregations:
    post:
      operationId: ListImageScanFindingAggregations
      description: <p>Returns a list of image scan aggregations for your account. You can filter by the type of key that Image Builder uses to group results. For example, if you want to get a list of findings by severity level for one of your pipelines, you might specify your pipeline with the <code>imagePipelineArn</code> filter. If you don't specify a filter, Image Builder returns an aggregation for your account.</p> <p>To streamline results, you can use the following filters in your request:</p> <ul> <li> <p> <code>accountId</code> </p> </li> <li> <p> <code>imageBuildVersionArn</code> </p> </li> <li> <p> <code>imagePipelineArn</code> </p> </li> <li> <p> <code>vulnerabilityId</code> </p> </li> </ul>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImageScanFindingAggregationsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  description: A filter name and value pair that is used to return a more specific list of results from a list operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.
                  type: object
                  properties:
                    name:
                      allOf:
                        - $ref: "#/components/schemas/FilterName"
                        - description: The name of the filter. Filter names are case-sensitive.
                    values:
                      allOf:
                        - $ref: "#/components/schemas/FilterValues"
                        - description: The filter values. Filter values are case-sensitive.
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListImageScanFindings:
    post:
      operationId: ListImageScanFindings
      description: Returns a list of image scan findings for your account.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImageScanFindingsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  description: <p>An array of name value pairs that you can use to filter your results. You can use the following filters to streamline results:</p> <ul> <li> <p> <code>imageBuildVersionArn</code> </p> </li> <li> <p> <code>imagePipelineArn</code> </p> </li> <li> <p> <code>vulnerabilityId</code> </p> </li> <li> <p> <code>severity</code> </p> </li> </ul> <p>If you don't request a filter, then all findings in your account are listed.</p>
                  type: array
                  items:
                    $ref: "#/components/schemas/ImageScanFindingsFilter"
                  minItems: 1
                  maxItems: 1
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListImages:
    post:
      operationId: ListImages
      description: Returns the list of images that you have access to. Newly created images can take up to two minutes to appear in the ListImages API Results.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListImagesResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  description: The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers.
                  type: string
                  enum:
                    - Self
                    - Shared
                    - Amazon
                    - ThirdParty
                filters:
                  description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>osVersion</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                byName:
                  description: Requests a list of images with a specific recipe name.
                  type: boolean
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
                includeDeprecated:
                  description: Includes deprecated images in the response list.
                  type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListInfrastructureConfigurations:
    post:
      operationId: ListInfrastructureConfigurations
      description: Returns a list of infrastructure configurations.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListInfrastructureConfigurationsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  description: You can filter on <code>name</code> to streamline results.
                  type: array
                  items:
                    $ref: "#/components/schemas/Filter"
                  minItems: 1
                  maxItems: 10
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/tags/{resourceArn}":
    get:
      operationId: ListTagsForResource
      description: Returns the list of tags for the specified resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline|workflow\/(?:build|test|distribution))/[a-z0-9-_]+(?:/(?:(?:x|[0-9]+)\.(?:x|[0-9]+)\.(?:x|[0-9]+))(?:/[0-9]+)?)?$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: TagResource
      description: Adds a tag to a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource that you want to tag.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline|workflow\/(?:build|test|distribution))/[a-z0-9-_]+(?:/(?:(?:x|[0-9]+)\.(?:x|[0-9]+)\.(?:x|[0-9]+))(?:/[0-9]+)?)?$
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: The tags to apply to the resource.
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
  /ListWorkflowExecutions:
    post:
      operationId: ListWorkflowExecutions
      description: Returns a list of workflow runtime instance metadata objects for a specific image build version.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkflowExecutionsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imageBuildVersionArn
              properties:
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
                imageBuildVersionArn:
                  description: List all workflow runtime instances for the specified image build version resource ARN.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListWorkflowStepExecutions:
    post:
      operationId: ListWorkflowStepExecutions
      description: Shows runtime data for each step in a runtime instance of the workflow that you specify in the request.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWorkflowStepExecutionsResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidPaginationTokenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidPaginationTokenException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - workflowExecutionId
              properties:
                maxResults:
                  description: The maximum items to return in a request.
                  type: integer
                  minimum: 1
                  maximum: 25
                nextToken:
                  description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
                  type: string
                  minLength: 1
                  maxLength: 65535
                workflowExecutionId:
                  description: The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.
                  type: string
                  pattern: ^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /PutComponentPolicy:
    put:
      operationId: PutComponentPolicy
      description: Applies a policy to a component. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API <code>PutComponentPolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to all principals with whom the resource is shared.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutComponentPolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "487":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - componentArn
                - policy
              properties:
                componentArn:
                  description: The Amazon Resource Name (ARN) of the component that this policy should be applied to.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
                policy:
                  description: The policy to apply.
                  type: string
                  minLength: 1
                  maxLength: 30000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /PutContainerRecipePolicy:
    put:
      operationId: PutContainerRecipePolicy
      description: Applies a policy to a container image. We recommend that you call the RAM API CreateResourceShare (https://docs.aws.amazon.com//ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API <code>PutContainerImagePolicy</code>, you must also call the RAM API PromoteResourceShareCreatedFromPolicy (https://docs.aws.amazon.com//ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutContainerRecipePolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "487":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - containerRecipeArn
                - policy
              properties:
                containerRecipeArn:
                  description: The Amazon Resource Name (ARN) of the container recipe that this policy should be applied to.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                policy:
                  description: The policy to apply to the container recipe.
                  type: string
                  minLength: 1
                  maxLength: 30000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /PutImagePolicy:
    put:
      operationId: PutImagePolicy
      description: Applies a policy to an image. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API <code>PutImagePolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to all principals with whom the resource is shared.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutImagePolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "487":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imageArn
                - policy
              properties:
                imageArn:
                  description: The Amazon Resource Name (ARN) of the image that this policy should be applied to.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
                policy:
                  description: The policy to apply.
                  type: string
                  minLength: 1
                  maxLength: 30000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /PutImageRecipePolicy:
    put:
      operationId: PutImageRecipePolicy
      description: Applies a policy to an image recipe. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API <code>PutImageRecipePolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to all principals with whom the resource is shared.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutImageRecipePolicyResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: InvalidParameterValueException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterValueException"
        "485":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "486":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "487":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imageRecipeArn
                - policy
              properties:
                imageRecipeArn:
                  description: The Amazon Resource Name (ARN) of the image recipe that this policy should be applied to.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                policy:
                  description: The policy to apply.
                  type: string
                  minLength: 1
                  maxLength: 30000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /StartImagePipelineExecution:
    put:
      operationId: StartImagePipelineExecution
      description: Manually triggers a pipeline to create an image.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartImagePipelineExecutionResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "485":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "486":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "487":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "488":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imagePipelineArn
                - clientToken
              properties:
                imagePipelineArn:
                  description: The Amazon Resource Name (ARN) of the image pipeline that you want to manually invoke.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
                clientToken:
                  description: The idempotency token used to make this request idempotent.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/tags/{resourceArn}#tagKeys":
    delete:
      operationId: UntagResource
      description: Removes a tag from a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource that you want to untag.
          schema:
            type: string
            pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline|workflow\/(?:build|test|distribution))/[a-z0-9-_]+(?:/(?:(?:x|[0-9]+)\.(?:x|[0-9]+)\.(?:x|[0-9]+))(?:/[0-9]+)?)?$
        - name: tagKeys
          in: query
          required: true
          description: The tag keys to remove from the resource.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TagKey"
            minItems: 1
            maxItems: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /UpdateDistributionConfiguration:
    put:
      operationId: UpdateDistributionConfiguration
      description: Updates a new distribution configuration. Distribution configurations define and configure the outputs of your pipeline.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDistributionConfigurationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
        "488":
          description: InvalidParameterCombinationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidParameterCombinationException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - distributionConfigurationArn
                - distributions
                - clientToken
              properties:
                distributionConfigurationArn:
                  description: The Amazon Resource Name (ARN) of the distribution configuration that you want to update.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
                description:
                  description: The description of the distribution configuration.
                  type: string
                  minLength: 1
                  maxLength: 1024
                distributions:
                  description: The distributions of the distribution configuration.
                  type: array
                  items:
                    $ref: "#/components/schemas/Distribution"
                clientToken:
                  description: The idempotency token of the distribution configuration.
                  type: string
                  minLength: 1
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /UpdateImagePipeline:
    put:
      operationId: UpdateImagePipeline
      description: <p>Updates an image pipeline. Image pipelines enable you to automate the creation and distribution of images.</p> <note> <p>UpdateImagePipeline does not support selective updates for the pipeline. You must specify all of the required properties in the update request, not just the properties that have changed.</p> </note>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateImagePipelineResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - imagePipelineArn
                - infrastructureConfigurationArn
                - clientToken
              properties:
                imagePipelineArn:
                  description: The Amazon Resource Name (ARN) of the image pipeline that you want to update.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
                description:
                  description: The description of the image pipeline.
                  type: string
                  minLength: 1
                  maxLength: 1024
                imageRecipeArn:
                  description: The Amazon Resource Name (ARN) of the image recipe that will be used to configure images updated by this image pipeline.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                containerRecipeArn:
                  description: The Amazon Resource Name (ARN) of the container pipeline to update.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
                infrastructureConfigurationArn:
                  description: The Amazon Resource Name (ARN) of the infrastructure configuration that Image Builder uses to build images that this image pipeline has updated.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
                distributionConfigurationArn:
                  description: The Amazon Resource Name (ARN) of the distribution configuration that Image Builder uses to configure and distribute images that this image pipeline has updated.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
                imageTestsConfiguration:
                  description: Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
                  type: object
                  properties:
                    imageTestsEnabled:
                      allOf:
                        - $ref: "#/components/schemas/NullableBoolean"
                        - description: Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
                    timeoutMinutes:
                      allOf:
                        - $ref: "#/components/schemas/ImageTestsTimeoutMinutes"
                        - description: <p>The maximum time in minutes that tests are permitted to run.</p> <note> <p>The timeoutMinutes attribute is not currently active. This value is ignored.</p> </note>
                enhancedImageMetadataEnabled:
                  description: Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
                  type: boolean
                schedule:
                  description: A schedule configures how often and when a pipeline will automatically create a new image.
                  type: object
                  properties:
                    scheduleExpression:
                      allOf:
                        - $ref: "#/components/schemas/NonEmptyString"
                        - description: <p>The cron expression determines how often EC2 Image Builder evaluates your <code>pipelineExecutionStartCondition</code>.</p> <p>For information on how to format a cron expression in Image Builder, see <a href="https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-builder-cron.html">Use cron expressions in EC2 Image Builder</a>.</p>
                    timezone:
                      allOf:
                        - $ref: "#/components/schemas/Timezone"
                        - description: The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the <a href="https://www.joda.org/joda-time/timezones.html">IANA timezone format</a>. If not specified this defaults to UTC.
                    pipelineExecutionStartCondition:
                      allOf:
                        - $ref: "#/components/schemas/PipelineExecutionStartCondition"
                        - description: The condition configures when the pipeline should trigger a new image build. When the <code>pipelineExecutionStartCondition</code> is set to <code>EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE</code>, and you use semantic version filters on the base image or components in your image recipe, EC2 Image Builder will build a new image only when there are new versions of the image or components in your recipe that match the semantic version filter. When it is set to <code>EXPRESSION_MATCH_ONLY</code>, it will build a new image every time the CRON expression matches the current time. For semantic version syntax, see <a href="https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_CreateComponent.html">CreateComponent</a> in the <i> EC2 Image Builder API Reference</i>.
                status:
                  description: The status of the image pipeline.
                  type: string
                  enum:
                    - DISABLED
                    - ENABLED
                clientToken:
                  description: The idempotency token used to make this request idempotent.
                  type: string
                  minLength: 1
                  maxLength: 36
                imageScanningConfiguration:
                  description: Contains settings for Image Builder image resource and container image scans.
                  type: object
                  properties:
                    imageScanningEnabled:
                      allOf:
                        - $ref: "#/components/schemas/NullableBoolean"
                        - description: A setting that indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
                    ecrConfiguration:
                      allOf:
                        - $ref: "#/components/schemas/EcrConfiguration"
                        - description: Contains Amazon ECR settings for vulnerability scans.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /UpdateInfrastructureConfiguration:
    put:
      operationId: UpdateInfrastructureConfiguration
      description: Updates a new infrastructure configuration. An infrastructure configuration defines the environment in which your image will be built and tested.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateInfrastructureConfigurationResponse"
        "480":
          description: ServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceException"
        "481":
          description: ClientException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientException"
        "482":
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceUnavailableException"
        "483":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "484":
          description: IdempotentParameterMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdempotentParameterMismatchException"
        "485":
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
        "486":
          description: CallRateLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallRateLimitExceededException"
        "487":
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceInUseException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - infrastructureConfigurationArn
                - instanceProfileName
                - clientToken
              properties:
                infrastructureConfigurationArn:
                  description: The Amazon Resource Name (ARN) of the infrastructure configuration that you want to update.
                  type: string
                  pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
                description:
                  description: The description of the infrastructure configuration.
                  type: string
                  minLength: 1
                  maxLength: 1024
                instanceTypes:
                  description: The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability.
                  type: array
                  items:
                    $ref: "#/components/schemas/InstanceType"
                instanceProfileName:
                  description: The instance profile to associate with the instance used to customize your Amazon EC2 AMI.
                  type: string
                  pattern: ^[\w+=,.@-]+$
                  minLength: 1
                  maxLength: 256
                securityGroupIds:
                  description: The security group IDs to associate with the instance used to customize your Amazon EC2 AMI.
                  type: array
                  items:
                    $ref: "#/components/schemas/NonEmptyString"
                subnetId:
                  description: The subnet ID to place the instance used to customize your Amazon EC2 AMI in.
                  type: string
                  minLength: 1
                  maxLength: 1024
                logging:
                  description: Logging configuration defines where Image Builder uploads your logs.
                  type: object
                  properties:
                    s3Logs:
                      allOf:
                        - $ref: "#/components/schemas/S3Logs"
                        - description: The Amazon S3 logging configuration.
                keyPair:
                  description: The key pair of the infrastructure configuration. You can use this to log on to and debug the instance used to create your image.
                  type: string
                  minLength: 1
                  maxLength: 1024
                terminateInstanceOnFailure:
                  description: The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails.
                  type: boolean
                snsTopicArn:
                  description: <p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>
                  type: string
                  pattern: ^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$
                clientToken:
                  description: The idempotency token used to make this request idempotent.
                  type: string
                  minLength: 1
                  maxLength: 36
                resourceTags:
                  description: The tags attached to the resource created by Image Builder.
                  type: object
                  minProperties: 1
                  maxProperties: 30
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
                instanceMetadataOptions:
                  description: The instance metadata options that apply to the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.
                  type: object
                  properties:
                    httpTokens:
                      allOf:
                        - $ref: "#/components/schemas/HttpTokens"
                        - description: <p>Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows:</p> <ul> <li> <p> <b>required</b> – When you retrieve the IAM role credentials, version 2.0 credentials are returned in all cases.</p> </li> <li> <p> <b>optional</b> – You can include a signed token header in your request to retrieve instance metadata, or you can leave it out. If you include it, version 2.0 credentials are returned for the IAM role. Otherwise, version 1.0 credentials are returned.</p> </li> </ul> <p>The default setting is <b>optional</b>.</p>
                    httpPutResponseHopLimit:
                      allOf:
                        - $ref: "#/components/schemas/HttpPutResponseHopLimit"
                        - description: Limit the number of hops that an instance metadata request can traverse to reach its destination. The default is one hop. However, if HTTP tokens are required, container image builds need a minimum of two hops.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CancelImageCreationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token that was used for this request.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The ARN of the image whose creation this request canceled.
    ServiceException: {}
    ClientException: {}
    ServiceUnavailableException: {}
    InvalidRequestException: {}
    IdempotentParameterMismatchException: {}
    ForbiddenException: {}
    CallRateLimitExceededException: {}
    ResourceInUseException: {}
    CreateComponentResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        componentBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ComponentBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the component that this request created.
    OsVersion:
      type: string
      minLength: 1
    TagValue:
      type: string
      maxLength: 256
    InvalidVersionNumberException: {}
    InvalidParameterCombinationException: {}
    ServiceQuotaExceededException: {}
    CreateContainerRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The client token used to make this request idempotent.
        containerRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipeArn"
            - description: Returns the Amazon Resource Name (ARN) of the container recipe that the request created.
    ComponentConfiguration:
      type: object
      required:
        - componentArn
      properties:
        componentArn:
          allOf:
            - $ref: "#/components/schemas/ComponentVersionArnOrBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the component.
        parameters:
          allOf:
            - $ref: "#/components/schemas/ComponentParameterList"
            - description: A group of parameter settings that Image Builder uses to configure the component for a specific recipe.
      description: Configuration details of the component.
    NonEmptyString:
      type: string
      minLength: 1
      maxLength: 1024
    InstanceBlockDeviceMappings:
      type: array
      items:
        $ref: "#/components/schemas/InstanceBlockDeviceMapping"
    ContainerRepositoryService:
      type: string
      enum:
        - ECR
    ResourceAlreadyExistsException: {}
    CreateDistributionConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        distributionConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/DistributionConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration that was created by this request.
    Distribution:
      type: object
      required:
        - region
      properties:
        region:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The target Region.
        amiDistributionConfiguration:
          allOf:
            - $ref: "#/components/schemas/AmiDistributionConfiguration"
            - description: The specific AMI settings; for example, launch permissions or AMI tags.
        containerDistributionConfiguration:
          allOf:
            - $ref: "#/components/schemas/ContainerDistributionConfiguration"
            - description: Container distribution settings for encryption, licensing, and sharing in a specific Region.
        licenseConfigurationArns:
          allOf:
            - $ref: "#/components/schemas/LicenseConfigurationArnList"
            - description: The License Manager Configuration to associate with the AMI in the specified Region.
        launchTemplateConfigurations:
          allOf:
            - $ref: "#/components/schemas/LaunchTemplateConfigurationList"
            - description: A group of launchTemplateConfiguration settings that apply to image distribution for specified accounts.
        s3ExportConfiguration:
          allOf:
            - $ref: "#/components/schemas/S3ExportConfiguration"
            - description: Configure export settings to deliver disk images created from your image build, using a file format that is compatible with your VMs in that Region.
        fastLaunchConfigurations:
          allOf:
            - $ref: "#/components/schemas/FastLaunchConfigurationList"
            - description: The Windows faster-launching configurations to use for AMI distribution.
      description: Defines the settings for a specific Region.
    CreateImageResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the image that this request created.
    NullableBoolean:
      type: boolean
    ImageTestsTimeoutMinutes:
      type: integer
      minimum: 60
      maximum: 1440
    EcrConfiguration:
      type: object
      properties:
        repositoryName:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don’t provide this information, Image Builder creates a repository in your account named <code>image-builder-image-scanning-repository</code> for vulnerability scans of your output container images.
        containerTags:
          allOf:
            - $ref: "#/components/schemas/StringList"
            - description: Tags for Image Builder to apply to the output container image that &amp;INS; scans. Tags can help you identify and manage your scanned images.
      description: Settings that Image Builder uses to configure the ECR repository and the output container images that Amazon Inspector scans.
    CreateImagePipelineResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        imagePipelineArn:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineArn"
            - description: The Amazon Resource Name (ARN) of the image pipeline that was created by this request.
    Timezone:
      type: string
      pattern: "[a-zA-Z0-9]{2,}(?:\\/[a-zA-z0-9-_+]+)*"
      minLength: 3
      maxLength: 100
    PipelineExecutionStartCondition:
      type: string
      enum:
        - EXPRESSION_MATCH_ONLY
        - EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE
    CreateImageRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        imageRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ImageRecipeArn"
            - description: The Amazon Resource Name (ARN) of the image recipe that was created by this request.
    InstanceBlockDeviceMapping:
      type: object
      properties:
        deviceName:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The device to which these mappings apply.
        ebs:
          allOf:
            - $ref: "#/components/schemas/EbsInstanceBlockDeviceSpecification"
            - description: Use to manage Amazon EBS-specific configuration for this mapping.
        virtualName:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Use to manage instance ephemeral devices.
        noDevice:
          allOf:
            - $ref: "#/components/schemas/EmptyString"
            - description: Use to remove a mapping from the base image.
      description: Defines block device mappings for the instance used to configure your image.
    SystemsManagerAgent:
      type: object
      properties:
        uninstallAfterBuild:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Controls whether the Systems Manager agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
      description: Contains settings for the Systems Manager agent on your build instance.
    UserDataOverride:
      type: string
      pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
      minLength: 1
      maxLength: 21847
    CreateInfrastructureConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        infrastructureConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration that was created by this request.
    InstanceType:
      type: string
    S3Logs:
      type: object
      properties:
        s3BucketName:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The S3 bucket in which to store the logs.
        s3KeyPrefix:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The Amazon S3 path to the bucket where the logs are stored.
      description: Amazon S3 logging configuration.
    HttpTokens:
      type: string
      pattern: optional|required
    HttpPutResponseHopLimit:
      type: integer
      minimum: 1
      maximum: 64
    DeleteComponentResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        componentBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ComponentBuildVersionArn"
            - description: The ARN of the component build version that this request deleted.
    ResourceDependencyException: {}
    DeleteContainerRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        containerRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipeArn"
            - description: The Amazon Resource Name (ARN) of the container recipe that was deleted.
    DeleteDistributionConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        distributionConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/DistributionConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration that was deleted.
    DeleteImageResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The ARN of the Image Builder image resource that this request deleted.
    DeleteImagePipelineResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imagePipelineArn:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineArn"
            - description: The Amazon Resource Name (ARN) of the image pipeline that was deleted.
    DeleteImageRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ImageRecipeArn"
            - description: The Amazon Resource Name (ARN) of the image recipe that was deleted.
    DeleteInfrastructureConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        infrastructureConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration that was deleted.
    GetComponentResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        component:
          allOf:
            - $ref: "#/components/schemas/Component"
            - description: The component object associated with the specified ARN.
    GetComponentPolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        policy:
          allOf:
            - $ref: "#/components/schemas/ResourcePolicyDocument"
            - description: The component policy.
    ResourceNotFoundException: {}
    GetContainerRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        containerRecipe:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipe"
            - description: The container recipe object that is returned.
    GetContainerRecipePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        policy:
          allOf:
            - $ref: "#/components/schemas/ResourcePolicyDocument"
            - description: The container recipe policy object that is returned.
    GetDistributionConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        distributionConfiguration:
          allOf:
            - $ref: "#/components/schemas/DistributionConfiguration"
            - description: The distribution configuration object.
    GetImageResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        image:
          allOf:
            - $ref: "#/components/schemas/Image"
            - description: The image object.
    GetImagePipelineResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imagePipeline:
          allOf:
            - $ref: "#/components/schemas/ImagePipeline"
            - description: The image pipeline object.
    GetImagePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        policy:
          allOf:
            - $ref: "#/components/schemas/ResourcePolicyDocument"
            - description: The image policy object.
    GetImageRecipeResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageRecipe:
          allOf:
            - $ref: "#/components/schemas/ImageRecipe"
            - description: The image recipe object.
    GetImageRecipePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        policy:
          allOf:
            - $ref: "#/components/schemas/ResourcePolicyDocument"
            - description: The image recipe policy object.
    GetInfrastructureConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        infrastructureConfiguration:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfiguration"
            - description: The infrastructure configuration object.
      description: GetInfrastructureConfiguration response object.
    GetWorkflowExecutionResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        workflowBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/WorkflowBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the build version for the Image Builder workflow resource that defines the specified runtime instance of the workflow.
        workflowExecutionId:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionId"
            - description: The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the image resource build version that the specified runtime instance of the workflow created.
        type:
          allOf:
            - $ref: "#/components/schemas/WorkflowType"
            - description: The type of workflow that Image Builder ran for the specified runtime instance of the workflow.
        status:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionStatus"
            - description: The current runtime status for the specified runtime instance of the workflow.
        message:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionMessage"
            - description: The output message from the specified runtime instance of the workflow, if applicable.
        totalStepCount:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepCount"
            - description: The total number of steps in the specified runtime instance of the workflow that ran. This number should equal the sum of the step counts for steps that succeeded, were skipped, and failed.
        totalStepsSucceeded:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepCount"
            - description: A runtime count for the number of steps that ran successfully in the specified runtime instance of the workflow.
        totalStepsFailed:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepCount"
            - description: A runtime count for the number of steps that failed in the specified runtime instance of the workflow.
        totalStepsSkipped:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepCount"
            - description: A runtime count for the number of steps that were skipped in the specified runtime instance of the workflow.
        startTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The timestamp when the specified runtime instance of the workflow started.
        endTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The timestamp when the specified runtime instance of the workflow finished.
    GetWorkflowStepExecutionResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        stepExecutionId:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepExecutionId"
            - description: The unique identifier for the runtime version of the workflow step that you specified in the request.
        workflowBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/WorkflowBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the build version for the Image Builder workflow resource that defines this workflow step.
        workflowExecutionId:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionId"
            - description: The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the image resource build version that the specified runtime instance of the workflow step creates.
        name:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepName"
            - description: The name of the specified runtime instance of the workflow step.
        description:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepDescription"
            - description: Describes the specified workflow step.
        action:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepAction"
            - description: The name of the action that the specified step performs.
        status:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepExecutionStatus"
            - description: The current status for the specified runtime version of the workflow step.
        rollbackStatus:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepExecutionRollbackStatus"
            - description: Reports on the rollback status of the specified runtime version of the workflow step, if applicable.
        message:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepMessage"
            - description: The output message from the specified runtime instance of the workflow step, if applicable.
        inputs:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepInputs"
            - description: Input parameters that Image Builder provided for the specified runtime instance of the workflow step.
        outputs:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepOutputs"
            - description: The file names that the specified runtime version of the workflow step created as output.
        startTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The timestamp when the specified runtime version of the workflow step started.
        endTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The timestamp when the specified runtime instance of the workflow step finished.
        onFailure:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The action to perform if the workflow step fails.
        timeoutSeconds:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepTimeoutSecondsInteger"
            - description: The maximum duration in seconds for this step to complete its action.
    ImportComponentResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        componentBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ComponentBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the imported component.
    ImportVmImageResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageArn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The Amazon Resource Name (ARN) of the AMI that was created during the VM import process. This AMI is used as the base image for the recipe that imported the VM.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token that was used for this request.
    ListComponentBuildVersionsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        componentSummaryList:
          allOf:
            - $ref: "#/components/schemas/ComponentSummaryList"
            - description: The list of component summaries for the specified semantic version.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    InvalidPaginationTokenException: {}
    ListComponentsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        componentVersionList:
          allOf:
            - $ref: "#/components/schemas/ComponentVersionList"
            - description: "<p>The list of component semantic versions.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> </note>"
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    Filter:
      type: object
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/FilterName"
            - description: The name of the filter. Filter names are case-sensitive.
        values:
          allOf:
            - $ref: "#/components/schemas/FilterValues"
            - description: The filter values. Filter values are case-sensitive.
      description: A filter name and value pair that is used to return a more specific list of results from a list operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs.
    ListContainerRecipesResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        containerRecipeSummaryList:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipeSummaryList"
            - description: The list of container recipes returned for the request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListDistributionConfigurationsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        distributionConfigurationSummaryList:
          allOf:
            - $ref: "#/components/schemas/DistributionConfigurationSummaryList"
            - description: The list of distributions.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListImageBuildVersionsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageSummaryList:
          allOf:
            - $ref: "#/components/schemas/ImageSummaryList"
            - description: The list of image build versions.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListImagePackagesResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imagePackageList:
          allOf:
            - $ref: "#/components/schemas/ImagePackageList"
            - description: The list of Image Packages returned in the response.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListImagePipelineImagesResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageSummaryList:
          allOf:
            - $ref: "#/components/schemas/ImageSummaryList"
            - description: The list of images built by this pipeline.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListImagePipelinesResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imagePipelineList:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineList"
            - description: The list of image pipelines.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListImageRecipesResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageRecipeSummaryList:
          allOf:
            - $ref: "#/components/schemas/ImageRecipeSummaryList"
            - description: The list of image pipelines.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListImageScanFindingAggregationsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        aggregationType:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: <p>The aggregation type specifies what type of key is used to group the image scan findings. Image Builder returns results based on the request filter. If you didn't specify a filter in the request, the type defaults to <code>accountId</code>.</p> <p class="title"> <b>Aggregation types</b> </p> <ul> <li> <p>accountId</p> </li> <li> <p>imageBuildVersionArn</p> </li> <li> <p>imagePipelineArn</p> </li> <li> <p>vulnerabilityId</p> </li> </ul> <p>Each aggregation includes counts by severity level for medium severity and higher level findings, plus a total for all of the findings for each key value.</p>
        responses:
          allOf:
            - $ref: "#/components/schemas/ImageScanFindingAggregationsList"
            - description: An array of image scan finding aggregations that match the filter criteria.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    FilterName:
      type: string
      pattern: ^[a-zA-Z]{1,1024}$
    FilterValues:
      type: array
      items:
        $ref: "#/components/schemas/FilterValue"
      minItems: 1
      maxItems: 10
    ListImageScanFindingsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        findings:
          allOf:
            - $ref: "#/components/schemas/ImageScanFindingsList"
            - description: The image scan findings for your account that meet your request filter criteria.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ImageScanFindingsFilter:
      type: object
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/FilterName"
            - description: The name of the image scan finding filter. Filter names are case-sensitive.
        values:
          allOf:
            - $ref: "#/components/schemas/ImageScanFindingsFilterValues"
            - description: The filter values. Filter values are case-sensitive.
      description: A name value pair that Image Builder applies to streamline results from the vulnerability scan findings list action.
    ListImagesResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageVersionList:
          allOf:
            - $ref: "#/components/schemas/ImageVersionList"
            - description: "<p>The list of image semantic versions.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListInfrastructureConfigurationsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        infrastructureConfigurationSummaryList:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfigurationSummaryList"
            - description: The list of infrastructure configurations.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags for the specified resource.
    InvalidParameterException: {}
    ListWorkflowExecutionsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        workflowExecutions:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionsList"
            - description: Contains an array of runtime details that represents each time a workflow ran for the requested image build version.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The resource ARN of the image build version for which you requested a list of workflow runtime details.
        message:
          allOf:
            - $ref: "#/components/schemas/ImageBuildMessage"
            - description: The output message from the list action, if applicable.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    ListWorkflowStepExecutionsResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        steps:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepExecutionsList"
            - description: Contains an array of runtime details that represents each step in this runtime instance of the workflow.
        workflowBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/WorkflowBuildVersionArn"
            - description: The build version ARN for the Image Builder workflow resource that defines the steps for this runtime instance of the workflow.
        workflowExecutionId:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionId"
            - description: The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The image build version resource ARN that's associated with the specified runtime instance of the workflow.
        message:
          allOf:
            - $ref: "#/components/schemas/ImageBuildMessage"
            - description: The output message from the list action, if applicable.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: The next token used for paginated responses. When this field isn't empty, there are additional elements that the service has'ot included in this request. Use this token with the next request to retrieve additional objects.
    PutComponentPolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        componentArn:
          allOf:
            - $ref: "#/components/schemas/ComponentBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the component that this policy was applied to.
    InvalidParameterValueException: {}
    PutContainerRecipePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        containerRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipeArn"
            - description: The Amazon Resource Name (ARN) of the container recipe that this policy was applied to.
    PutImagePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the image that this policy was applied to.
    PutImageRecipePolicyResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        imageRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ImageRecipeArn"
            - description: The Amazon Resource Name (ARN) of the image recipe that this policy was applied to.
    StartImagePipelineExecutionResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the image that was created by this request.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    UpdateDistributionConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        distributionConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/DistributionConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration that was updated by this request.
    UpdateImagePipelineResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        imagePipelineArn:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineArn"
            - description: The Amazon Resource Name (ARN) of the image pipeline that was updated by this request.
    UpdateInfrastructureConfigurationResponse:
      type: object
      properties:
        requestId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The request ID that uniquely identifies this request.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        infrastructureConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration that was updated by this request.
    SeverityCounts:
      type: object
      properties:
        all:
          allOf:
            - $ref: "#/components/schemas/SeverityCountNumber"
            - description: The total number of findings across all severity levels for the specified filter.
        critical:
          allOf:
            - $ref: "#/components/schemas/SeverityCountNumber"
            - description: The number of critical severity findings for the specified filter.
        high:
          allOf:
            - $ref: "#/components/schemas/SeverityCountNumber"
            - description: The number of high severity findings for the specified filter.
        medium:
          allOf:
            - $ref: "#/components/schemas/SeverityCountNumber"
            - description: The number of medium severity findings for the specified filter.
      description: Includes counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified filter.
    AccountAggregation:
      type: object
      properties:
        accountId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Identifies the account that owns the aggregated resource findings.
        severityCounts:
          allOf:
            - $ref: "#/components/schemas/SeverityCounts"
            - description: Counts by severity level for medium severity and higher level findings, plus a total for all of the findings.
      description: Contains counts of vulnerability findings from image scans that run when you create new Image Builder images, or build new versions of existing images. The vulnerability counts are grouped by severity level. The counts are aggregated across resources to create the final tally for the account that owns them.
    AccountId:
      type: string
      pattern: ^[0-9]{12}$
    AccountList:
      type: array
      items:
        $ref: "#/components/schemas/AccountId"
      minItems: 1
      maxItems: 1536
    AdditionalInstanceConfiguration:
      type: object
      properties:
        systemsManagerAgent:
          allOf:
            - $ref: "#/components/schemas/SystemsManagerAgent"
            - description: Contains settings for the Systems Manager agent on your build instance.
        userDataOverride:
          allOf:
            - $ref: "#/components/schemas/UserDataOverride"
            - description: <p>Use this property to provide commands or a command script to run when you launch your build instance.</p> <p>The userDataOverride property replaces any commands that Image Builder might have added to ensure that Systems Manager is installed on your Linux build instance. If you override the user data, make sure that you add commands to install Systems Manager, if it is not pre-installed on your base image.</p> <note> <p>The user data is always base 64 encoded. For example, the following commands are encoded as <code>IyEvYmluL2Jhc2gKbWtkaXIgLXAgL3Zhci9iYi8KdG91Y2ggL3Zhci$</code>:</p> <p> <i>#!/bin/bash</i> </p> <p>mkdir -p /var/bb/</p> <p>touch /var</p> </note>
      description: <p>In addition to your infrastructure configuration, these settings provide an extra layer of control over your build instances. You can also specify commands to run on launch for all of your build instances.</p> <p>Image Builder does not automatically install the Systems Manager agent on Windows instances. If your base image includes the Systems Manager agent, then the AMI that you create will also include the agent. For Linux instances, if the base image does not already include the Systems Manager agent, Image Builder installs it. For Linux instances where Image Builder installs the Systems Manager agent, you can choose whether to keep it for the AMI that you create.</p>
    ImageState:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/ImageStatus"
            - description: The status of the image.
        reason:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The reason for the status of the image.
      description: Image status and the reason for that status.
    Ami:
      type: object
      properties:
        region:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The Amazon Web Services Region of the Amazon EC2 AMI.
        image:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The AMI ID of the Amazon EC2 AMI.
        name:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The name of the Amazon EC2 AMI.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the Amazon EC2 AMI. Minimum and maximum length are in characters.
        state:
          $ref: "#/components/schemas/ImageState"
        accountId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The account ID of the owner of the AMI.
      description: Details of an Amazon EC2 AMI.
    AmiNameString:
      type: string
      pattern: ^[-_A-Za-z0-9{][-_A-Za-z0-9\s:{}\.]+[-_A-Za-z0-9}]$
      minLength: 1
      maxLength: 127
    TagMap:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    LaunchPermissionConfiguration:
      type: object
      properties:
        userIds:
          allOf:
            - $ref: "#/components/schemas/AccountList"
            - description: The Amazon Web Services account ID.
        userGroups:
          allOf:
            - $ref: "#/components/schemas/StringList"
            - description: The name of the group.
        organizationArns:
          allOf:
            - $ref: "#/components/schemas/OrganizationArnList"
            - description: The ARN for an Amazon Web Services Organization that you want to share your AMI with. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html">What is Organizations?</a>.
        organizationalUnitArns:
          allOf:
            - $ref: "#/components/schemas/OrganizationalUnitArnList"
            - description: The ARN for an Organizations organizational unit (OU) that you want to share your AMI with. For more information about key concepts for Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html">Organizations terminology and concepts</a>.
      description: Describes the configuration for a launch permission. The launch permission modification request is sent to the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyImageAttribute.html">Amazon EC2 ModifyImageAttribute</a> API on behalf of the user for each Region they have selected to distribute the AMI. To make an AMI public, set the launch permission authorized accounts to <code>all</code>. See the examples for making an AMI public at <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyImageAttribute.html">Amazon EC2 ModifyImageAttribute</a>.
    AmiDistributionConfiguration:
      type: object
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/AmiNameString"
            - description: The name of the output AMI.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the AMI distribution configuration. Minimum and maximum length are in characters.
        targetAccountIds:
          allOf:
            - $ref: "#/components/schemas/AccountList"
            - description: The ID of an account to which you want to distribute an image.
        amiTags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags to apply to AMIs distributed to this Region.
        kmsKeyId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The KMS key identifier used to encrypt the distributed image.
        launchPermission:
          allOf:
            - $ref: "#/components/schemas/LaunchPermissionConfiguration"
            - description: Launch permissions can be used to configure which Amazon Web Services accounts can use the AMI to launch instances.
      description: Define and configure the output AMIs of the pipeline.
    AmiList:
      type: array
      items:
        $ref: "#/components/schemas/Ami"
    Arn:
      type: string
    Boolean:
      type: boolean
    BuildType:
      type: string
      enum:
        - USER_INITIATED
        - SCHEDULED
        - IMPORT
    ImageBuildVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    ClientToken:
      type: string
      minLength: 1
      maxLength: 36
    CancelImageCreationRequest:
      type: object
      required:
        - imageBuildVersionArn
        - clientToken
      title: CancelImageCreationRequest
      properties:
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the image that you want to cancel creation for.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.
    ImageBuilderArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):(?:image-recipe|container-recipe|infrastructure-configuration|distribution-configuration|component|image|image-pipeline|workflow\/(?:build|test|distribution))/[a-z0-9-_]+(?:/(?:(?:x|[0-9]+)\.(?:x|[0-9]+)\.(?:x|[0-9]+))(?:/[0-9]+)?)?$
    ResourceName:
      type: string
      pattern: ^[-_A-Za-z-0-9][-_A-Za-z0-9 ]{1,126}[-_A-Za-z-0-9]$
    VersionNumber:
      type: string
      pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
    ComponentType:
      type: string
      enum:
        - BUILD
        - TEST
    Platform:
      type: string
      enum:
        - Windows
        - Linux
    OsVersionList:
      type: array
      items:
        $ref: "#/components/schemas/OsVersion"
      minItems: 1
      maxItems: 25
    ComponentState:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/ComponentStatus"
            - description: The current state of the component.
        reason:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Describes how or why the component changed state.
      description: A group of fields that describe the current status of components that are no longer active.
    ComponentParameterDetailList:
      type: array
      items:
        $ref: "#/components/schemas/ComponentParameterDetail"
    ComponentData:
      type: string
    DateTime:
      type: string
    Component:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the component.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the component.
        version:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: The version of the component.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the component.
        changeDescription:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The change description of the component.
        type:
          allOf:
            - $ref: "#/components/schemas/ComponentType"
            - description: The component type specifies whether Image Builder uses the component to build the image or only to test it.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The operating system platform of the component.
        supportedOsVersions:
          allOf:
            - $ref: "#/components/schemas/OsVersionList"
            - description: The operating system (OS) version supported by the component. If the OS information is available, Image Builder performs a prefix match against the base image OS version during image recipe creation.
        state:
          allOf:
            - $ref: "#/components/schemas/ComponentState"
            - description: Describes the current status of the component. This is used for components that are no longer active.
        parameters:
          allOf:
            - $ref: "#/components/schemas/ComponentParameterDetailList"
            - description: Contains parameter details for each of the parameters that the component document defined for the component.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the component.
        data:
          allOf:
            - $ref: "#/components/schemas/ComponentData"
            - description: Component data contains the YAML document content for the component.
        kmsKeyId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The KMS key identifier used to encrypt the component.
        encrypted:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: The encryption status of the component.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date that Image Builder created the component.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags that apply to the component.
        publisher:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Contains the name of the publisher if this is a third-party component. Otherwise, this property is empty.
        obfuscate:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Indicates whether component source is hidden from view in the console, and from component detail results for API, CLI, or SDK operations.
      description: A detailed view of a component.
    ComponentBuildVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
    ComponentVersionArnOrBuildVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$
    ComponentParameterList:
      type: array
      items:
        $ref: "#/components/schemas/ComponentParameter"
      minItems: 1
    ComponentConfigurationList:
      type: array
      items:
        $ref: "#/components/schemas/ComponentConfiguration"
      minItems: 1
    ComponentFormat:
      type: string
      enum:
        - SHELL
    ComponentParameterName:
      type: string
      pattern: "[^\\x00]+"
      minLength: 1
      maxLength: 256
    ComponentParameterValueList:
      type: array
      items:
        $ref: "#/components/schemas/ComponentParameterValue"
    ComponentParameter:
      type: object
      required:
        - name
        - value
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ComponentParameterName"
            - description: The name of the component parameter to set.
        value:
          allOf:
            - $ref: "#/components/schemas/ComponentParameterValueList"
            - description: Sets the value for the named component parameter.
      description: Contains a key/value pair that sets the named component parameter.
    ComponentParameterDescription:
      type: string
      pattern: "[^\\x00]+"
      minLength: 1
      maxLength: 1024
    ComponentParameterType:
      type: string
      pattern: ^String|Integer|Boolean|StringList$
      minLength: 1
      maxLength: 20
    ComponentParameterDetail:
      type: object
      required:
        - name
        - type
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ComponentParameterName"
            - description: The name of this input parameter.
        type:
          allOf:
            - $ref: "#/components/schemas/ComponentParameterType"
            - description: The type of input this parameter provides. The currently supported value is "string".
        defaultValue:
          allOf:
            - $ref: "#/components/schemas/ComponentParameterValueList"
            - description: The default value of this parameter if no input is provided.
        description:
          allOf:
            - $ref: "#/components/schemas/ComponentParameterDescription"
            - description: Describes this parameter.
      description: Defines a parameter that is used to provide configuration details for the component.
    ComponentParameterValue:
      type: string
      pattern: "[^\\x00]*"
      minLength: 0
    ComponentStatus:
      type: string
      enum:
        - DEPRECATED
    ComponentSummary:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the component.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the component.
        version:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: The version of the component.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The operating system platform of the component.
        supportedOsVersions:
          allOf:
            - $ref: "#/components/schemas/OsVersionList"
            - description: The operating system (OS) version that the component supports. If the OS information is available, Image Builder performs a prefix match against the base image OS version during image recipe creation.
        state:
          allOf:
            - $ref: "#/components/schemas/ComponentState"
            - description: Describes the current status of the component.
        type:
          allOf:
            - $ref: "#/components/schemas/ComponentType"
            - description: The component type specifies whether Image Builder uses the component to build the image or only to test it.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the component.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the component.
        changeDescription:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The change description for the current version of the component.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The original creation date of the component.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags that apply to the component.
        publisher:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Contains the name of the publisher if this is a third-party component. Otherwise, this property is empty.
        obfuscate:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Indicates whether component source is hidden from view in the console, and from component detail results for API, CLI, or SDK operations.
      description: A high-level summary of a component.
    ComponentSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/ComponentSummary"
    ComponentVersion:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: "<p>The Amazon Resource Name (ARN) of the component.</p> <note> <p>Semantic versioning is included in each object's Amazon Resource Name (ARN), at the level that applies to that object as follows:</p> <ol> <li> <p>Versionless ARNs and Name ARNs do not include specific values in any of the nodes. The nodes are either left off entirely, or they are specified as wildcards, for example: x.x.x.</p> </li> <li> <p>Version ARNs have only the first three nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</p> </li> <li> <p>Build version ARNs have all four nodes, and point to a specific build for a specific version of an object.</p> </li> </ol> </note>"
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the component.
        version:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>The semantic version of the component.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the component.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The platform of the component.
        supportedOsVersions:
          allOf:
            - $ref: "#/components/schemas/OsVersionList"
            - description: he operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the base image OS version during image recipe creation.
        type:
          allOf:
            - $ref: "#/components/schemas/ComponentType"
            - description: The type of the component denotes whether the component is used to build the image or only to test it.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the component.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date that the component was created.
      description: The defining characteristics of a specific version of an Amazon Web Services TOE component.
    ComponentVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):component/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    ComponentVersionList:
      type: array
      items:
        $ref: "#/components/schemas/ComponentVersion"
    StringList:
      type: array
      items:
        $ref: "#/components/schemas/NonEmptyString"
    Container:
      type: object
      properties:
        region:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Containers and container images are Region-specific. This is the Region context for the container.
        imageUris:
          allOf:
            - $ref: "#/components/schemas/StringList"
            - description: A list of URIs for containers created in the context Region.
      description: A container encapsulates the runtime environment for an application.
    TargetContainerRepository:
      type: object
      required:
        - service
        - repositoryName
      properties:
        service:
          allOf:
            - $ref: "#/components/schemas/ContainerRepositoryService"
            - description: Specifies the service in which this image was registered.
        repositoryName:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
      description: The container repository where the output container image is stored.
    ContainerDistributionConfiguration:
      type: object
      required:
        - targetRepository
      properties:
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the container distribution configuration.
        containerTags:
          allOf:
            - $ref: "#/components/schemas/StringList"
            - description: Tags that are attached to the container distribution configuration.
        targetRepository:
          allOf:
            - $ref: "#/components/schemas/TargetContainerRepository"
            - description: The destination repository for the container distribution configuration.
      description: Container distribution settings for encryption, licensing, and sharing in a specific Region.
    ContainerList:
      type: array
      items:
        $ref: "#/components/schemas/Container"
    ContainerType:
      type: string
      enum:
        - DOCKER
    InstanceConfiguration:
      type: object
      properties:
        image:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
        blockDeviceMappings:
          allOf:
            - $ref: "#/components/schemas/InstanceBlockDeviceMappings"
            - description: Defines the block devices to attach for building an instance from this Image Builder AMI.
      description: Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
    DockerFileTemplate:
      type: string
    ContainerRecipe:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: "<p>The Amazon Resource Name (ARN) of the container recipe.</p> <note> <p>Semantic versioning is included in each object's Amazon Resource Name (ARN), at the level that applies to that object as follows:</p> <ol> <li> <p>Versionless ARNs and Name ARNs do not include specific values in any of the nodes. The nodes are either left off entirely, or they are specified as wildcards, for example: x.x.x.</p> </li> <li> <p>Version ARNs have only the first three nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</p> </li> <li> <p>Build version ARNs have all four nodes, and point to a specific build for a specific version of an object.</p> </li> </ol> </note>"
        containerType:
          allOf:
            - $ref: "#/components/schemas/ContainerType"
            - description: Specifies the type of container, such as Docker.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the container recipe.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the container recipe.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The system platform for the container, such as Windows or Linux.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the container recipe.
        version:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>The semantic version of the container recipe.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
        components:
          allOf:
            - $ref: "#/components/schemas/ComponentConfigurationList"
            - description: Build and test components that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
        instanceConfiguration:
          allOf:
            - $ref: "#/components/schemas/InstanceConfiguration"
            - description: A group of options that can be used to configure an instance for building and testing container images.
        dockerfileTemplateData:
          allOf:
            - $ref: "#/components/schemas/DockerFileTemplate"
            - description: Dockerfiles are text documents that are used to build Docker containers, and ensure that they contain all of the elements required by the application running inside. The template data consists of contextual variables where Image Builder places build information or scripts, based on your container image recipe.
        kmsKeyId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Identifies which KMS key is used to encrypt the container image for distribution to the target Region.
        encrypted:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: A flag that indicates if the target container is encrypted.
        parentImage:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The base image for the container recipe.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date when this container recipe was created.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: Tags that are attached to the container recipe.
        workingDirectory:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The working directory for use during build and test workflows.
        targetRepository:
          allOf:
            - $ref: "#/components/schemas/TargetContainerRepository"
            - description: The destination repository for the container image.
      description: A container recipe.
    ContainerRecipeArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):container-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    ContainerRecipeSummary:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the container recipe.
        containerType:
          allOf:
            - $ref: "#/components/schemas/ContainerType"
            - description: Specifies the type of container, such as "Docker".
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the container recipe.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The system platform for the container, such as Windows or Linux.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the container recipe.
        parentImage:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The base image for the container recipe.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date when this container recipe was created.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: Tags that are attached to the container recipe.
      description: A summary of a container recipe
    ContainerRecipeSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/ContainerRecipeSummary"
    InlineComponentData:
      type: string
      pattern: "[^\\x00]+"
      minLength: 1
      maxLength: 16000
    Uri:
      type: string
    CreateComponentRequest:
      type: object
      required:
        - name
        - semanticVersion
        - platform
        - clientToken
      title: CreateComponentRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the component.
        semanticVersion:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Describes the contents of the component.
        changeDescription:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The operating system platform of the component.
        supportedOsVersions:
          allOf:
            - $ref: "#/components/schemas/OsVersionList"
            - description: The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the base image OS version during image recipe creation.
        data:
          allOf:
            - $ref: "#/components/schemas/InlineComponentData"
            - description: Component <code>data</code> contains inline YAML document content for the component. Alternatively, you can specify the <code>uri</code> of a YAML document file stored in Amazon S3. However, you cannot specify both properties.
        uri:
          allOf:
            - $ref: "#/components/schemas/Uri"
            - description: <p>The <code>uri</code> of a YAML component document file. This must be an S3 URL (<code>s3://bucket/key</code>), and the requester must have permission to access the S3 bucket it points to. If you use Amazon S3, you can specify component content up to your service quota.</p> <p>Alternatively, you can specify the YAML document inline, using the component <code>data</code> property. You cannot specify both properties.</p>
        kmsKeyId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The ID of the KMS key that is used to encrypt this component.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags that apply to the component.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token of the component.
    InlineDockerFileTemplate:
      type: string
      pattern: "[^\\x00]+"
      minLength: 1
      maxLength: 16000
    CreateContainerRecipeRequest:
      type: object
      required:
        - containerType
        - name
        - semanticVersion
        - components
        - parentImage
        - targetRepository
        - clientToken
      title: CreateContainerRecipeRequest
      properties:
        containerType:
          allOf:
            - $ref: "#/components/schemas/ContainerType"
            - description: The type of container to create.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the container recipe.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the container recipe.
        semanticVersion:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"
        components:
          allOf:
            - $ref: "#/components/schemas/ComponentConfigurationList"
            - description: Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
        instanceConfiguration:
          allOf:
            - $ref: "#/components/schemas/InstanceConfiguration"
            - description: A group of options that can be used to configure an instance for building and testing container images.
        dockerfileTemplateData:
          allOf:
            - $ref: "#/components/schemas/InlineDockerFileTemplate"
            - description: The Dockerfile template used to build your image as an inline data blob.
        dockerfileTemplateUri:
          allOf:
            - $ref: "#/components/schemas/Uri"
            - description: The Amazon S3 URI for the Dockerfile that will be used to build your container image.
        platformOverride:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: Specifies the operating system platform when you use a custom base image.
        imageOsVersionOverride:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Specifies the operating system version for the base image.
        parentImage:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The base image for the container recipe.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: Tags that are attached to the container recipe.
        workingDirectory:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The working directory for use during build and test workflows.
        targetRepository:
          allOf:
            - $ref: "#/components/schemas/TargetContainerRepository"
            - description: The destination repository for the container image.
        kmsKeyId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Identifies which KMS key is used to encrypt the container image.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The client token used to make this request idempotent.
    DistributionList:
      type: array
      items:
        $ref: "#/components/schemas/Distribution"
    CreateDistributionConfigurationRequest:
      type: object
      required:
        - name
        - distributions
        - clientToken
      title: CreateDistributionConfigurationRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the distribution configuration.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the distribution configuration.
        distributions:
          allOf:
            - $ref: "#/components/schemas/DistributionList"
            - description: The distributions of the distribution configuration.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the distribution configuration.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token of the distribution configuration.
    DistributionConfigurationArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):distribution-configuration/[a-z0-9-_]+$
    ImageRecipeArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-recipe/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    InfrastructureConfigurationArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):infrastructure-configuration/[a-z0-9-_]+$
    ImageTestsConfiguration:
      type: object
      properties:
        imageTestsEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
        timeoutMinutes:
          allOf:
            - $ref: "#/components/schemas/ImageTestsTimeoutMinutes"
            - description: <p>The maximum time in minutes that tests are permitted to run.</p> <note> <p>The timeoutMinutes attribute is not currently active. This value is ignored.</p> </note>
      description: Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
    Schedule:
      type: object
      properties:
        scheduleExpression:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: <p>The cron expression determines how often EC2 Image Builder evaluates your <code>pipelineExecutionStartCondition</code>.</p> <p>For information on how to format a cron expression in Image Builder, see <a href="https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-builder-cron.html">Use cron expressions in EC2 Image Builder</a>.</p>
        timezone:
          allOf:
            - $ref: "#/components/schemas/Timezone"
            - description: The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the <a href="https://www.joda.org/joda-time/timezones.html">IANA timezone format</a>. If not specified this defaults to UTC.
        pipelineExecutionStartCondition:
          allOf:
            - $ref: "#/components/schemas/PipelineExecutionStartCondition"
            - description: The condition configures when the pipeline should trigger a new image build. When the <code>pipelineExecutionStartCondition</code> is set to <code>EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE</code>, and you use semantic version filters on the base image or components in your image recipe, EC2 Image Builder will build a new image only when there are new versions of the image or components in your recipe that match the semantic version filter. When it is set to <code>EXPRESSION_MATCH_ONLY</code>, it will build a new image every time the CRON expression matches the current time. For semantic version syntax, see <a href="https://docs.aws.amazon.com/imagebuilder/latest/APIReference/API_CreateComponent.html">CreateComponent</a> in the <i> EC2 Image Builder API Reference</i>.
      description: A schedule configures how often and when a pipeline will automatically create a new image.
    PipelineStatus:
      type: string
      enum:
        - DISABLED
        - ENABLED
    ImageScanningConfiguration:
      type: object
      properties:
        imageScanningEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: A setting that indicates whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
        ecrConfiguration:
          allOf:
            - $ref: "#/components/schemas/EcrConfiguration"
            - description: Contains Amazon ECR settings for vulnerability scans.
      description: Contains settings for Image Builder image resource and container image scans.
    CreateImagePipelineRequest:
      type: object
      required:
        - name
        - infrastructureConfigurationArn
        - clientToken
      title: CreateImagePipelineRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the image pipeline.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the image pipeline.
        imageRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ImageRecipeArn"
            - description: The Amazon Resource Name (ARN) of the image recipe that will be used to configure images created by this image pipeline.
        containerRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipeArn"
            - description: The Amazon Resource Name (ARN) of the container recipe that is used to configure images created by this container pipeline.
        infrastructureConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration that will be used to build images created by this image pipeline.
        distributionConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/DistributionConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration that will be used to configure and distribute images created by this image pipeline.
        imageTestsConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageTestsConfiguration"
            - description: The image test configuration of the image pipeline.
        enhancedImageMetadataEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
        schedule:
          allOf:
            - $ref: "#/components/schemas/Schedule"
            - description: The schedule of the image pipeline.
        status:
          allOf:
            - $ref: "#/components/schemas/PipelineStatus"
            - description: The status of the image pipeline.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the image pipeline.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        imageScanningConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageScanningConfiguration"
            - description: Contains settings for vulnerability scans.
    ImagePipelineArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image-pipeline/[a-z0-9-_]+$
    CreateImageRecipeRequest:
      type: object
      required:
        - name
        - semanticVersion
        - components
        - parentImage
        - clientToken
      title: CreateImageRecipeRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the image recipe.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the image recipe.
        semanticVersion:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>The semantic version of the image recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"
        components:
          allOf:
            - $ref: "#/components/schemas/ComponentConfigurationList"
            - description: The components included in the image recipe.
        parentImage:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: "The base image of the image recipe. The value of the string can be the ARN of the base image or an AMI ID. The format for the ARN follows this example: <code>arn:aws:imagebuilder:us-west-2:aws:image/windows-server-2016-english-full-base-x86/x.x.x</code>. You can provide the specific version that you want to use, or you can use a wildcard in all of the fields. If you enter an AMI ID for the string value, you must have access to the AMI, and the AMI must be in the same Region in which you are using Image Builder."
        blockDeviceMappings:
          allOf:
            - $ref: "#/components/schemas/InstanceBlockDeviceMappings"
            - description: The block device mappings of the image recipe.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the image recipe.
        workingDirectory:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The working directory used during build and test workflows.
        additionalInstanceConfiguration:
          allOf:
            - $ref: "#/components/schemas/AdditionalInstanceConfiguration"
            - description: Specify additional settings and launch scripts for your build instances.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
    CreateImageRequest:
      type: object
      required:
        - infrastructureConfigurationArn
        - clientToken
      title: CreateImageRequest
      properties:
        imageRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ImageRecipeArn"
            - description: The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
        containerRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipeArn"
            - description: The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
        distributionConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/DistributionConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline.
        infrastructureConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested.
        imageTestsConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageTestsConfiguration"
            - description: The image tests configuration of the image.
        enhancedImageMetadataEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the image.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        imageScanningConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageScanningConfiguration"
            - description: Contains settings for vulnerability scans.
    InstanceTypeList:
      type: array
      items:
        $ref: "#/components/schemas/InstanceType"
    InstanceProfileNameType:
      type: string
      pattern: ^[\w+=,.@-]+$
      minLength: 1
      maxLength: 256
    SecurityGroupIds:
      type: array
      items:
        $ref: "#/components/schemas/NonEmptyString"
    Logging:
      type: object
      properties:
        s3Logs:
          allOf:
            - $ref: "#/components/schemas/S3Logs"
            - description: The Amazon S3 logging configuration.
      description: Logging configuration defines where Image Builder uploads your logs.
    SnsTopicArn:
      type: string
      pattern: ^arn:aws[^:]*:sns:[^:]+:[0-9]{12}:[a-zA-Z0-9-_]{1,256}$
    ResourceTagMap:
      type: object
      minProperties: 1
      maxProperties: 30
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    InstanceMetadataOptions:
      type: object
      properties:
        httpTokens:
          allOf:
            - $ref: "#/components/schemas/HttpTokens"
            - description: <p>Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows:</p> <ul> <li> <p> <b>required</b> – When you retrieve the IAM role credentials, version 2.0 credentials are returned in all cases.</p> </li> <li> <p> <b>optional</b> – You can include a signed token header in your request to retrieve instance metadata, or you can leave it out. If you include it, version 2.0 credentials are returned for the IAM role. Otherwise, version 1.0 credentials are returned.</p> </li> </ul> <p>The default setting is <b>optional</b>.</p>
        httpPutResponseHopLimit:
          allOf:
            - $ref: "#/components/schemas/HttpPutResponseHopLimit"
            - description: Limit the number of hops that an instance metadata request can traverse to reach its destination. The default is one hop. However, if HTTP tokens are required, container image builds need a minimum of two hops.
      description: The instance metadata options that apply to the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.
    CreateInfrastructureConfigurationRequest:
      type: object
      required:
        - name
        - instanceProfileName
        - clientToken
      title: CreateInfrastructureConfigurationRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the infrastructure configuration.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the infrastructure configuration.
        instanceTypes:
          allOf:
            - $ref: "#/components/schemas/InstanceTypeList"
            - description: The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability.
        instanceProfileName:
          allOf:
            - $ref: "#/components/schemas/InstanceProfileNameType"
            - description: The instance profile to associate with the instance used to customize your Amazon EC2 AMI.
        securityGroupIds:
          allOf:
            - $ref: "#/components/schemas/SecurityGroupIds"
            - description: The security group IDs to associate with the instance used to customize your Amazon EC2 AMI.
        subnetId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The subnet ID in which to place the instance used to customize your Amazon EC2 AMI.
        logging:
          allOf:
            - $ref: "#/components/schemas/Logging"
            - description: The logging configuration of the infrastructure configuration.
        keyPair:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The key pair of the infrastructure configuration. You can use this to log on to and debug the instance used to create your image.
        terminateInstanceOnFailure:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails.
        snsTopicArn:
          allOf:
            - $ref: "#/components/schemas/SnsTopicArn"
            - description: <p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>
        resourceTags:
          allOf:
            - $ref: "#/components/schemas/ResourceTagMap"
            - description: The tags attached to the resource created by Image Builder.
        instanceMetadataOptions:
          allOf:
            - $ref: "#/components/schemas/InstanceMetadataOptions"
            - description: The instance metadata options that you can set for the HTTP requests that pipeline builds use to launch EC2 build and test instances.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the infrastructure configuration.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
    NonNegativeDouble:
      type: number
      format: double
      minimum: 0
    CvssScore:
      type: object
      properties:
        baseScore:
          allOf:
            - $ref: "#/components/schemas/NonNegativeDouble"
            - description: The CVSS base score.
        scoringVector:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The vector string of the CVSS score.
        version:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The CVSS version that generated the score.
        source:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The source of the CVSS score.
      description: Amazon Inspector generates a risk score for each finding. This score helps you to prioritize findings, to focus on the most critical findings and the most vulnerable resources. The score uses the Common Vulnerability Scoring System (CVSS) format. This format is a modification of the base CVSS score that the National Vulnerability Database (NVD) provides. For more information about severity levels, see <a href="https://docs.aws.amazon.com/inspector/latest/user/findings-understanding-severity.html">Severity levels for Amazon Inspector findings</a> in the <i>Amazon Inspector User Guide</i>.
    CvssScoreAdjustment:
      type: object
      properties:
        metric:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The metric that Amazon Inspector used to adjust the CVSS score.
        reason:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The reason for the CVSS score adjustment.
      description: Details about an adjustment that Amazon Inspector made to the CVSS score for a finding.
    CvssScoreAdjustmentList:
      type: array
      items:
        $ref: "#/components/schemas/CvssScoreAdjustment"
    CvssScoreDetails:
      type: object
      properties:
        scoreSource:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The source for the CVSS score.
        cvssSource:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The source of the finding.
        version:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The CVSS version that generated the score.
        score:
          allOf:
            - $ref: "#/components/schemas/NonNegativeDouble"
            - description: The CVSS score.
        scoringVector:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: A vector that measures the severity of the vulnerability.
        adjustments:
          allOf:
            - $ref: "#/components/schemas/CvssScoreAdjustmentList"
            - description: An object that contains details about an adjustment that Amazon Inspector made to the CVSS score for the finding.
      description: Details about the source of the score, and the factors that determined the adjustments to create the final score.
    CvssScoreList:
      type: array
      items:
        $ref: "#/components/schemas/CvssScore"
    DateTimeTimestamp:
      type: string
      format: date-time
    DeleteComponentRequest:
      type: object
      title: DeleteComponentRequest
      properties: {}
    DeleteContainerRecipeRequest:
      type: object
      title: DeleteContainerRecipeRequest
      properties: {}
    DeleteDistributionConfigurationRequest:
      type: object
      title: DeleteDistributionConfigurationRequest
      properties: {}
    DeleteImagePipelineRequest:
      type: object
      title: DeleteImagePipelineRequest
      properties: {}
    DeleteImageRecipeRequest:
      type: object
      title: DeleteImageRecipeRequest
      properties: {}
    DeleteImageRequest:
      type: object
      title: DeleteImageRequest
      properties: {}
    DeleteInfrastructureConfigurationRequest:
      type: object
      title: DeleteInfrastructureConfigurationRequest
      properties: {}
    DiskImageFormat:
      type: string
      enum:
        - VMDK
        - RAW
        - VHD
    LicenseConfigurationArnList:
      type: array
      items:
        $ref: "#/components/schemas/LicenseConfigurationArn"
      minItems: 1
      maxItems: 50
    LaunchTemplateConfigurationList:
      type: array
      items:
        $ref: "#/components/schemas/LaunchTemplateConfiguration"
      minItems: 1
      maxItems: 100
    S3ExportConfiguration:
      type: object
      required:
        - roleName
        - diskImageFormat
        - s3Bucket
      properties:
        roleName:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The name of the role that grants VM Import/Export permission to export images to your S3 bucket.
        diskImageFormat:
          allOf:
            - $ref: "#/components/schemas/DiskImageFormat"
            - description: <p>Export the updated image to one of the following supported disk image formats:</p> <ul> <li> <p> <b>Virtual Hard Disk (VHD)</b> – Compatible with Citrix Xen and Microsoft Hyper-V virtualization products.</p> </li> <li> <p> <b>Stream-optimized ESX Virtual Machine Disk (VMDK)</b> – Compatible with VMware ESX and VMware vSphere versions 4, 5, and 6.</p> </li> <li> <p> <b>Raw</b> – Raw format.</p> </li> </ul>
        s3Bucket:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The S3 bucket in which to store the output disk images for your VM.
        s3Prefix:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The Amazon S3 path for the bucket where the output disk images for your VM are stored.
      description: Properties that configure export from your build instance to a compatible file format for your VM.
    FastLaunchConfigurationList:
      type: array
      items:
        $ref: "#/components/schemas/FastLaunchConfiguration"
      minItems: 1
      maxItems: 1000
    DistributionTimeoutMinutes:
      type: integer
      minimum: 30
      maximum: 720
    DistributionConfiguration:
      type: object
      required:
        - timeoutMinutes
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the distribution configuration.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the distribution configuration.
        distributions:
          allOf:
            - $ref: "#/components/schemas/DistributionList"
            - description: The distribution objects that apply Region-specific settings for the deployment of the image to targeted Regions.
        timeoutMinutes:
          allOf:
            - $ref: "#/components/schemas/DistributionTimeoutMinutes"
            - description: The maximum duration in minutes for this distribution configuration.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which this distribution configuration was created.
        dateUpdated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which this distribution configuration was last updated.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the distribution configuration.
      description: A distribution configuration.
    RegionList:
      type: array
      items:
        $ref: "#/components/schemas/NonEmptyString"
    DistributionConfigurationSummary:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the distribution configuration.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the distribution configuration.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which the distribution configuration was created.
        dateUpdated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which the distribution configuration was updated.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags associated with the distribution configuration.
        regions:
          allOf:
            - $ref: "#/components/schemas/RegionList"
            - description: A list of Regions where the container image is distributed to.
      description: A high-level overview of a distribution configuration.
    DistributionConfigurationSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/DistributionConfigurationSummary"
    EbsIopsInteger:
      type: integer
      minimum: 100
      maximum: 64000
    EbsVolumeSizeInteger:
      type: integer
      minimum: 1
      maximum: 16000
    EbsVolumeType:
      type: string
      enum:
        - standard
        - io1
        - io2
        - gp2
        - gp3
        - sc1
        - st1
    EbsVolumeThroughput:
      type: integer
      minimum: 125
      maximum: 1000
    EbsInstanceBlockDeviceSpecification:
      type: object
      properties:
        encrypted:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Use to configure device encryption.
        deleteOnTermination:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Use to configure delete on termination of the associated device.
        iops:
          allOf:
            - $ref: "#/components/schemas/EbsIopsInteger"
            - description: Use to configure device IOPS.
        kmsKeyId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Use to configure the KMS key to use when encrypting the device.
        snapshotId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The snapshot that defines the device contents.
        volumeSize:
          allOf:
            - $ref: "#/components/schemas/EbsVolumeSizeInteger"
            - description: Use to override the device's volume size.
        volumeType:
          allOf:
            - $ref: "#/components/schemas/EbsVolumeType"
            - description: Use to override the device's volume type.
        throughput:
          allOf:
            - $ref: "#/components/schemas/EbsVolumeThroughput"
            - description: " <b>For GP3 volumes only</b> – The throughput in MiB/s that the volume supports."
      description: Amazon EBS-specific block device mapping specifications.
    EmptyString:
      type: string
      minLength: 0
      maxLength: 0
    FastLaunchSnapshotConfiguration:
      type: object
      properties:
        targetResourceCount:
          allOf:
            - $ref: "#/components/schemas/TargetResourceCount"
            - description: The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
      description: Configuration settings for creating and managing pre-provisioned snapshots for a fast-launch enabled Windows AMI.
    MaxParallelLaunches:
      type: integer
      minimum: 1
      maximum: 10000
    FastLaunchLaunchTemplateSpecification:
      type: object
      properties:
        launchTemplateId:
          allOf:
            - $ref: "#/components/schemas/LaunchTemplateId"
            - description: The ID of the launch template to use for faster launching for a Windows AMI.
        launchTemplateName:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The name of the launch template to use for faster launching for a Windows AMI.
        launchTemplateVersion:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The version of the launch template to use for faster launching for a Windows AMI.
      description: <p>Identifies the launch template that the associated Windows AMI uses for launching an instance when faster launching is enabled.</p> <note> <p>You can specify either the <code>launchTemplateName</code> or the <code>launchTemplateId</code>, but not both.</p> </note>
    FastLaunchConfiguration:
      type: object
      required:
        - enabled
      properties:
        enabled:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: A Boolean that represents the current state of faster launching for the Windows AMI. Set to <code>true</code> to start using Windows faster launching, or <code>false</code> to stop using it.
        snapshotConfiguration:
          allOf:
            - $ref: "#/components/schemas/FastLaunchSnapshotConfiguration"
            - description: Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
        maxParallelLaunches:
          allOf:
            - $ref: "#/components/schemas/MaxParallelLaunches"
            - description: The maximum number of parallel instances that are launched for creating resources.
        launchTemplate:
          allOf:
            - $ref: "#/components/schemas/FastLaunchLaunchTemplateSpecification"
            - description: The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
        accountId:
          allOf:
            - $ref: "#/components/schemas/AccountId"
            - description: The owner account ID for the fast-launch enabled Windows AMI.
      description: Define and configure faster launching for output Windows AMIs.
    LaunchTemplateId:
      type: string
      pattern: ^lt-[a-z0-9-_]{17}$
    TargetResourceCount:
      type: integer
      minimum: 1
      maximum: 10000
    FilterList:
      type: array
      items:
        $ref: "#/components/schemas/Filter"
      minItems: 1
      maxItems: 10
    FilterValue:
      type: string
      pattern: ^[0-9a-zA-Z./_ :-]{1,1024}$
    GetComponentPolicyRequest:
      type: object
      title: GetComponentPolicyRequest
      properties: {}
    ResourcePolicyDocument:
      type: string
      minLength: 1
      maxLength: 30000
    GetComponentRequest:
      type: object
      title: GetComponentRequest
      properties: {}
    GetContainerRecipePolicyRequest:
      type: object
      title: GetContainerRecipePolicyRequest
      properties: {}
    GetContainerRecipeRequest:
      type: object
      title: GetContainerRecipeRequest
      properties: {}
    GetDistributionConfigurationRequest:
      type: object
      title: GetDistributionConfigurationRequest
      properties: {}
    GetImagePipelineRequest:
      type: object
      title: GetImagePipelineRequest
      properties: {}
    ImagePipeline:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the image pipeline.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the image pipeline.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the image pipeline.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The platform of the image pipeline.
        enhancedImageMetadataEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
        imageRecipeArn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The Amazon Resource Name (ARN) of the image recipe associated with this image pipeline.
        containerRecipeArn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The Amazon Resource Name (ARN) of the container recipe that is used for this pipeline.
        infrastructureConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration associated with this image pipeline.
        distributionConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration associated with this image pipeline.
        imageTestsConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageTestsConfiguration"
            - description: The image tests configuration of the image pipeline.
        schedule:
          allOf:
            - $ref: "#/components/schemas/Schedule"
            - description: The schedule of the image pipeline.
        status:
          allOf:
            - $ref: "#/components/schemas/PipelineStatus"
            - description: The status of the image pipeline.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which this image pipeline was created.
        dateUpdated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which this image pipeline was last updated.
        dateLastRun:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: This is no longer supported, and does not return a value.
        dateNextRun:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: This is no longer supported, and does not return a value.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of this image pipeline.
        imageScanningConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageScanningConfiguration"
            - description: Contains settings for vulnerability scans.
      description: Details of an image pipeline.
    GetImagePolicyRequest:
      type: object
      title: GetImagePolicyRequest
      properties: {}
    GetImageRecipePolicyRequest:
      type: object
      title: GetImageRecipePolicyRequest
      properties: {}
    GetImageRecipeRequest:
      type: object
      title: GetImageRecipeRequest
      properties: {}
    ImageRecipe:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the image recipe.
        type:
          allOf:
            - $ref: "#/components/schemas/ImageType"
            - description: Specifies which type of image is created by the recipe - an AMI or a container image.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the image recipe.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the image recipe.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The platform of the image recipe.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the image recipe.
        version:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: The version of the image recipe.
        components:
          allOf:
            - $ref: "#/components/schemas/ComponentConfigurationList"
            - description: The components that are included in the image recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
        parentImage:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The base image of the image recipe.
        blockDeviceMappings:
          allOf:
            - $ref: "#/components/schemas/InstanceBlockDeviceMappings"
            - description: The block device mappings to apply when creating images from this recipe.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which this image recipe was created.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the image recipe.
        workingDirectory:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The working directory to be used during build and test workflows.
        additionalInstanceConfiguration:
          allOf:
            - $ref: "#/components/schemas/AdditionalInstanceConfiguration"
            - description: Before you create a new AMI, Image Builder launches temporary Amazon EC2 instances to build and test your image configuration. Instance configuration adds a layer of control over those instances. You can define settings and add scripts to run when an instance is launched from your AMI.
      description: An image recipe.
    ImageVersionArnOrBuildVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/(?:(?:([0-9]+|x)\.([0-9]+|x)\.([0-9]+|x))|(?:[0-9]+\.[0-9]+\.[0-9]+/[0-9]+))$
    GetImageRequest:
      type: object
      title: GetImageRequest
      properties: {}
    Image:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: "<p>The Amazon Resource Name (ARN) of the image.</p> <note> <p>Semantic versioning is included in each object's Amazon Resource Name (ARN), at the level that applies to that object as follows:</p> <ol> <li> <p>Versionless ARNs and Name ARNs do not include specific values in any of the nodes. The nodes are either left off entirely, or they are specified as wildcards, for example: x.x.x.</p> </li> <li> <p>Version ARNs have only the first three nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</p> </li> <li> <p>Build version ARNs have all four nodes, and point to a specific build for a specific version of an object.</p> </li> </ol> </note>"
        type:
          allOf:
            - $ref: "#/components/schemas/ImageType"
            - description: Specifies whether this image produces an AMI or a container image.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the image.
        version:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>The semantic version of the image.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The image operating system platform, such as Linux or Windows.
        enhancedImageMetadataEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Indicates whether Image Builder collects additional information about the image, such as the operating system (OS) version and package list.
        osVersion:
          allOf:
            - $ref: "#/components/schemas/OsVersion"
            - description: The operating system version for instances that launch from this image. For example, Amazon Linux 2, Ubuntu 18, or Microsoft Windows Server 2019.
        state:
          allOf:
            - $ref: "#/components/schemas/ImageState"
            - description: The state of the image.
        imageRecipe:
          allOf:
            - $ref: "#/components/schemas/ImageRecipe"
            - description: For images that distribute an AMI, this is the image recipe that Image Builder used to create the image. For container images, this is empty.
        containerRecipe:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipe"
            - description: For container images, this is the container recipe that Image Builder used to create the image. For images that distribute an AMI, this is empty.
        sourcePipelineName:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the image pipeline that created this image.
        sourcePipelineArn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The Amazon Resource Name (ARN) of the image pipeline that created this image.
        infrastructureConfiguration:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfiguration"
            - description: The infrastructure that Image Builder used to create this image.
        distributionConfiguration:
          allOf:
            - $ref: "#/components/schemas/DistributionConfiguration"
            - description: The distribution configuration that Image Builder used to create this image.
        imageTestsConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageTestsConfiguration"
            - description: The image tests that ran when that Image Builder created this image.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which Image Builder created this image.
        outputResources:
          allOf:
            - $ref: "#/components/schemas/OutputResources"
            - description: The output resources that Image Builder produces for this image.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags that apply to this image.
        buildType:
          allOf:
            - $ref: "#/components/schemas/BuildType"
            - description: <p>Indicates the type of build that created this image. The build can be initiated in the following ways:</p> <ul> <li> <p> <b>USER_INITIATED</b> – A manual pipeline build request.</p> </li> <li> <p> <b>SCHEDULED</b> – A pipeline build initiated by a cron expression in the Image Builder pipeline, or from EventBridge.</p> </li> <li> <p> <b>IMPORT</b> – A VM import created the image to use as the base image for the recipe.</p> </li> </ul>
        imageSource:
          allOf:
            - $ref: "#/components/schemas/ImageSource"
            - description: The origin of the base image that Image Builder used to build this image.
        scanState:
          allOf:
            - $ref: "#/components/schemas/ImageScanState"
            - description: Contains information about the current state of scans for this image.
        imageScanningConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageScanningConfiguration"
            - description: Contains settings for vulnerability scans.
      description: An Image Builder image. You must specify exactly one recipe for the image – either a container recipe (<code>containerRecipe</code>), which creates a container image, or an image recipe (<code>imageRecipe</code>), which creates an AMI.
    GetInfrastructureConfigurationRequest:
      type: object
      title: GetInfrastructureConfigurationRequest
      properties: {}
      description: GetInfrastructureConfiguration request object.
    InfrastructureConfiguration:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the infrastructure configuration.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the infrastructure configuration.
        instanceTypes:
          allOf:
            - $ref: "#/components/schemas/InstanceTypeList"
            - description: The instance types of the infrastructure configuration.
        instanceProfileName:
          allOf:
            - $ref: "#/components/schemas/InstanceProfileNameType"
            - description: The instance profile of the infrastructure configuration.
        securityGroupIds:
          allOf:
            - $ref: "#/components/schemas/SecurityGroupIds"
            - description: The security group IDs of the infrastructure configuration.
        subnetId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The subnet ID of the infrastructure configuration.
        logging:
          allOf:
            - $ref: "#/components/schemas/Logging"
            - description: The logging configuration of the infrastructure configuration.
        keyPair:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The Amazon EC2 key pair of the infrastructure configuration.
        terminateInstanceOnFailure:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: The terminate instance on failure configuration of the infrastructure configuration.
        snsTopicArn:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: <p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which the infrastructure configuration was created.
        dateUpdated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which the infrastructure configuration was last updated.
        resourceTags:
          allOf:
            - $ref: "#/components/schemas/ResourceTagMap"
            - description: The tags attached to the resource created by Image Builder.
        instanceMetadataOptions:
          allOf:
            - $ref: "#/components/schemas/InstanceMetadataOptions"
            - description: The instance metadata option settings for the infrastructure configuration.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the infrastructure configuration.
      description: Details of the infrastructure configuration.
    WorkflowExecutionId:
      type: string
      pattern: ^wf-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    GetWorkflowExecutionRequest:
      type: object
      title: GetWorkflowExecutionRequest
      properties: {}
    WorkflowBuildVersionArn:
      type: string
      pattern: ^arn:aws(?:-[a-z]+)*:imagebuilder:[a-z]{2,}(?:-[a-z]+)+-[0-9]+:(?:[0-9]{12}|aws):workflow/(build|test|distribution)/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$
      maxLength: 1024
    WorkflowType:
      type: string
      enum:
        - BUILD
        - TEST
        - DISTRIBUTION
    WorkflowExecutionStatus:
      type: string
      enum:
        - PENDING
        - SKIPPED
        - RUNNING
        - COMPLETED
        - FAILED
        - ROLLBACK_IN_PROGRESS
        - ROLLBACK_COMPLETED
    WorkflowExecutionMessage:
      type: string
      minLength: 0
      maxLength: 500
    WorkflowStepCount:
      type: integer
    WorkflowStepExecutionId:
      type: string
      pattern: ^step-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    GetWorkflowStepExecutionRequest:
      type: object
      title: GetWorkflowStepExecutionRequest
      properties: {}
    WorkflowStepName:
      type: string
      pattern: ^[A-Za-z][A-Za-z0-9-_]{1,99}$
    WorkflowStepDescription:
      type: string
      minLength: 0
      maxLength: 500
    WorkflowStepAction:
      type: string
      pattern: ^[A-Za-z][A-Za-z0-9-_]{1,99}$
    WorkflowStepExecutionStatus:
      type: string
      enum:
        - PENDING
        - SKIPPED
        - RUNNING
        - COMPLETED
        - FAILED
    WorkflowStepExecutionRollbackStatus:
      type: string
      enum:
        - RUNNING
        - COMPLETED
        - SKIPPED
        - FAILED
    WorkflowStepMessage:
      type: string
      minLength: 0
      maxLength: 500
    WorkflowStepInputs:
      type: string
    WorkflowStepOutputs:
      type: string
    WorkflowStepTimeoutSecondsInteger:
      type: integer
      minimum: 0
      maximum: 43200
    ImageType:
      type: string
      enum:
        - AMI
        - DOCKER
    OutputResources:
      type: object
      properties:
        amis:
          allOf:
            - $ref: "#/components/schemas/AmiList"
            - description: The Amazon EC2 AMIs created by this image.
        containers:
          allOf:
            - $ref: "#/components/schemas/ContainerList"
            - description: Container images that the pipeline has generated and stored in the output repository.
      description: The resources produced by this image.
    ImageSource:
      type: string
      enum:
        - AMAZON_MANAGED
        - AWS_MARKETPLACE
        - IMPORTED
        - CUSTOM
    ImageScanState:
      type: object
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/ImageScanStatus"
            - description: The current state of vulnerability scans for the image.
        reason:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The reason for the scan status for the image.
      description: Shows the vulnerability scan status for a specific image, and the reason for that status.
    ImageAggregation:
      type: object
      properties:
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) that identifies the image for this aggregation.
        severityCounts:
          allOf:
            - $ref: "#/components/schemas/SeverityCounts"
            - description: Counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified image.
      description: Contains vulnerability counts for a specific image.
    ImageBuildMessage:
      type: string
      minLength: 0
      maxLength: 500
    ImagePackage:
      type: object
      properties:
        packageName:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The name of the package as reported to the operating system package manager.
        packageVersion:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The version of the package as reported to the operating system package manager.
      description: Represents a package installed on an Image Builder image.
    ImagePackageList:
      type: array
      items:
        $ref: "#/components/schemas/ImagePackage"
    ImagePipelineAggregation:
      type: object
      properties:
        imagePipelineArn:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineArn"
            - description: The Amazon Resource Name (ARN) that identifies the image pipeline for this aggregation.
        severityCounts:
          allOf:
            - $ref: "#/components/schemas/SeverityCounts"
            - description: Counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified image pipeline.
      description: Contains vulnerability counts for a specific image pipeline.
    ImagePipelineList:
      type: array
      items:
        $ref: "#/components/schemas/ImagePipeline"
    ImageRecipeSummary:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the image recipe.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the image recipe.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The platform of the image recipe.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the image recipe.
        parentImage:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The base image of the image recipe.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which this image recipe was created.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the image recipe.
      description: A summary of an image recipe.
    ImageRecipeSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/ImageRecipeSummary"
    Remediation:
      type: object
      properties:
        recommendation:
          allOf:
            - $ref: "#/components/schemas/RemediationRecommendation"
            - description: An object that contains information about the recommended course of action to remediate the finding.
      description: Information about how to remediate a finding.
    InspectorScoreDetails:
      type: object
      properties:
        adjustedCvss:
          allOf:
            - $ref: "#/components/schemas/CvssScoreDetails"
            - description: An object that contains details about an adjustment that Amazon Inspector made to the CVSS score for the finding.
      description: Information about the factors that influenced the score that Amazon Inspector assigned for a finding.
    PackageVulnerabilityDetails:
      type: object
      required:
        - vulnerabilityId
      properties:
        vulnerabilityId:
          allOf:
            - $ref: "#/components/schemas/VulnerabilityId"
            - description: A unique identifier for this vulnerability.
        vulnerablePackages:
          allOf:
            - $ref: "#/components/schemas/VulnerablePackageList"
            - description: The packages that this vulnerability impacts.
        source:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The source of the vulnerability information.
        cvss:
          allOf:
            - $ref: "#/components/schemas/CvssScoreList"
            - description: CVSS scores for one or more vulnerabilities that Amazon Inspector identified for a package.
        relatedVulnerabilities:
          allOf:
            - $ref: "#/components/schemas/VulnerabilityIdList"
            - description: Vulnerabilities that are often related to the findings for the package.
        sourceUrl:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: A link to the source of the vulnerability information.
        vendorSeverity:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The severity that the vendor assigned to this vulnerability type.
        vendorCreatedAt:
          allOf:
            - $ref: "#/components/schemas/DateTimeTimestamp"
            - description: The date and time when this vulnerability was first added to the vendor's database.
        vendorUpdatedAt:
          allOf:
            - $ref: "#/components/schemas/DateTimeTimestamp"
            - description: The date and time when the vendor last updated this vulnerability in their database.
        referenceUrls:
          allOf:
            - $ref: "#/components/schemas/NonEmptyStringList"
            - description: Links to web pages that contain details about the vulnerabilities that Amazon Inspector identified for the package.
      description: Information about package vulnerability findings.
    ImageScanFinding:
      type: object
      properties:
        awsAccountId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The Amazon Web Services account ID that's associated with the finding.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the image build version that's associated with the finding.
        imagePipelineArn:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineArn"
            - description: The Amazon Resource Name (ARN) of the image pipeline that's associated with the finding.
        type:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The type of the finding. Image Builder looks for findings of the type <code>PACKAGE_VULNERABILITY</code> that apply to output images, and excludes other types.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the finding.
        title:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The title of the finding.
        remediation:
          allOf:
            - $ref: "#/components/schemas/Remediation"
            - description: An object that contains the details about how to remediate the finding.
        severity:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The severity of the finding.
        firstObservedAt:
          allOf:
            - $ref: "#/components/schemas/DateTimeTimestamp"
            - description: The date and time when the finding was first observed.
        updatedAt:
          allOf:
            - $ref: "#/components/schemas/DateTimeTimestamp"
            - description: The timestamp when the finding was last updated.
        inspectorScore:
          allOf:
            - $ref: "#/components/schemas/NonNegativeDouble"
            - description: The score that Amazon Inspector assigned for the finding.
        inspectorScoreDetails:
          allOf:
            - $ref: "#/components/schemas/InspectorScoreDetails"
            - description: An object that contains details of the Amazon Inspector score.
        packageVulnerabilityDetails:
          allOf:
            - $ref: "#/components/schemas/PackageVulnerabilityDetails"
            - description: An object that contains the details of a package vulnerability finding.
        fixAvailable:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Details about whether a fix is available for any of the packages that are identified in the finding through a version update.
      description: Contains details about a vulnerability scan finding.
    VulnerabilityIdAggregation:
      type: object
      properties:
        vulnerabilityId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The vulnerability Id for this set of counts.
        severityCounts:
          allOf:
            - $ref: "#/components/schemas/SeverityCounts"
            - description: Counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified vulnerability.
      description: Includes counts of image and pipeline resource findings by vulnerability.
    ImageScanFindingAggregation:
      type: object
      properties:
        accountAggregation:
          allOf:
            - $ref: "#/components/schemas/AccountAggregation"
            - description: Returns an object that contains severity counts based on an account ID.
        imageAggregation:
          allOf:
            - $ref: "#/components/schemas/ImageAggregation"
            - description: Returns an object that contains severity counts based on the Amazon Resource Name (ARN) for a specific image.
        imagePipelineAggregation:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineAggregation"
            - description: Returns an object that contains severity counts based on an image pipeline ARN.
        vulnerabilityIdAggregation:
          allOf:
            - $ref: "#/components/schemas/VulnerabilityIdAggregation"
            - description: Returns an object that contains severity counts based on vulnerability ID.
      description: This returns exactly one type of aggregation, based on the filter that Image Builder applies in its API action.
    ImageScanFindingAggregationsList:
      type: array
      items:
        $ref: "#/components/schemas/ImageScanFindingAggregation"
    ImageScanFindingsFilterValues:
      type: array
      items:
        $ref: "#/components/schemas/FilterValue"
      minItems: 1
      maxItems: 1
    ImageScanFindingsFilterList:
      type: array
      items:
        $ref: "#/components/schemas/ImageScanFindingsFilter"
      minItems: 1
      maxItems: 1
    ImageScanFindingsList:
      type: array
      items:
        $ref: "#/components/schemas/ImageScanFinding"
      maxItems: 25
    ImageScanStatus:
      type: string
      enum:
        - PENDING
        - SCANNING
        - COLLECTING
        - COMPLETED
        - ABANDONED
        - FAILED
        - TIMED_OUT
    ImageStatus:
      type: string
      enum:
        - PENDING
        - CREATING
        - BUILDING
        - TESTING
        - DISTRIBUTING
        - INTEGRATING
        - AVAILABLE
        - CANCELLED
        - FAILED
        - DEPRECATED
        - DELETED
    ImageSummary:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the image.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the image.
        type:
          allOf:
            - $ref: "#/components/schemas/ImageType"
            - description: Specifies whether this image produces an AMI or a container image.
        version:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: The version of the image.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The image operating system platform, such as Linux or Windows.
        osVersion:
          allOf:
            - $ref: "#/components/schemas/OsVersion"
            - description: The operating system version of the instances that launch from this image. For example, Amazon Linux 2, Ubuntu 18, or Microsoft Windows Server 2019.
        state:
          allOf:
            - $ref: "#/components/schemas/ImageState"
            - description: The state of the image.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the image.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which Image Builder created this image.
        outputResources:
          allOf:
            - $ref: "#/components/schemas/OutputResources"
            - description: The output resources that Image Builder produced when it created this image.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags that apply to this image.
        buildType:
          allOf:
            - $ref: "#/components/schemas/BuildType"
            - description: <p>Indicates the type of build that created this image. The build can be initiated in the following ways:</p> <ul> <li> <p> <b>USER_INITIATED</b> – A manual pipeline build request.</p> </li> <li> <p> <b>SCHEDULED</b> – A pipeline build initiated by a cron expression in the Image Builder pipeline, or from EventBridge.</p> </li> <li> <p> <b>IMPORT</b> – A VM import created the image to use as the base image for the recipe.</p> </li> </ul>
        imageSource:
          allOf:
            - $ref: "#/components/schemas/ImageSource"
            - description: The origin of the base image that Image Builder used to build this image.
      description: An image summary.
    ImageSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/ImageSummary"
    ImageVersion:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: "<p>The Amazon Resource Name (ARN) of a specific version of an Image Builder image.</p> <note> <p>Semantic versioning is included in each object's Amazon Resource Name (ARN), at the level that applies to that object as follows:</p> <ol> <li> <p>Versionless ARNs and Name ARNs do not include specific values in any of the nodes. The nodes are either left off entirely, or they are specified as wildcards, for example: x.x.x.</p> </li> <li> <p>Version ARNs have only the first three nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</p> </li> <li> <p>Build version ARNs have all four nodes, and point to a specific build for a specific version of an object.</p> </li> </ol> </note>"
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of this specific version of an Image Builder image.
        type:
          allOf:
            - $ref: "#/components/schemas/ImageType"
            - description: Specifies whether this image produces an AMI or a container image.
        version:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>Details for a specific version of an Image Builder image. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The operating system platform of the image version, for example "Windows" or "Linux".
        osVersion:
          allOf:
            - $ref: "#/components/schemas/OsVersion"
            - description: The operating system version of the Amazon EC2 build instance. For example, Amazon Linux 2, Ubuntu 18, or Microsoft Windows Server 2019.
        owner:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The owner of the image version.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which this specific version of the Image Builder image was created.
        buildType:
          allOf:
            - $ref: "#/components/schemas/BuildType"
            - description: <p>Indicates the type of build that created this image. The build can be initiated in the following ways:</p> <ul> <li> <p> <b>USER_INITIATED</b> – A manual pipeline build request.</p> </li> <li> <p> <b>SCHEDULED</b> – A pipeline build initiated by a cron expression in the Image Builder pipeline, or from EventBridge.</p> </li> <li> <p> <b>IMPORT</b> – A VM import created the image to use as the base image for the recipe.</p> </li> </ul>
        imageSource:
          allOf:
            - $ref: "#/components/schemas/ImageSource"
            - description: The origin of the base image that Image Builder used to build this image.
      description: The defining characteristics of a specific version of an Image Builder image.
    ImageVersionArn:
      type: string
      pattern: ^arn:aws[^:]*:imagebuilder:[^:]+:(?:[0-9]{12}|aws):image/[a-z0-9-_]+/[0-9]+\.[0-9]+\.[0-9]+$
    ImageVersionList:
      type: array
      items:
        $ref: "#/components/schemas/ImageVersion"
    ImportComponentRequest:
      type: object
      required:
        - name
        - semanticVersion
        - type
        - format
        - platform
        - clientToken
      title: ImportComponentRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the component.
        semanticVersion:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>"
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the component. Describes the contents of the component.
        changeDescription:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The change description of the component. This description indicates the change that has been made in this version, or what makes this version different from other versions of this component.
        type:
          allOf:
            - $ref: "#/components/schemas/ComponentType"
            - description: The type of the component denotes whether the component is used to build the image, or only to test it.
        format:
          allOf:
            - $ref: "#/components/schemas/ComponentFormat"
            - description: The format of the resource that you want to import as a component.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The platform of the component.
        data:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The data of the component. Used to specify the data inline. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.
        uri:
          allOf:
            - $ref: "#/components/schemas/Uri"
            - description: The uri of the component. Must be an Amazon S3 URL and the requester must have permission to access the Amazon S3 bucket. If you use Amazon S3, you can specify component content up to your service quota. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.
        kmsKeyId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The ID of the KMS key that should be used to encrypt this component.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the component.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token of the component.
    ImportVmImageRequest:
      type: object
      required:
        - name
        - semanticVersion
        - platform
        - vmImportTaskId
        - clientToken
      title: ImportVmImageRequest
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The name of the base image that is created by the import process.
        semanticVersion:
          allOf:
            - $ref: "#/components/schemas/VersionNumber"
            - description: "<p>The semantic version to attach to the base image that was created during the import process. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>"
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description for the base image that is created by the import process.
        platform:
          allOf:
            - $ref: "#/components/schemas/Platform"
            - description: The operating system platform for the imported VM.
        osVersion:
          allOf:
            - $ref: "#/components/schemas/OsVersion"
            - description: The operating system version for the imported VM.
        vmImportTaskId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The <code>importTaskId</code> (API) or <code>ImportTaskId</code> (CLI) from the Amazon EC2 VM import process. Image Builder retrieves information from the import process to pull in the AMI that is created from the VM source as the base image for your recipe.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: Tags that are attached to the import resources.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon EC2 API Reference</i>.
    InfrastructureConfigurationSummary:
      type: object
      properties:
        arn:
          allOf:
            - $ref: "#/components/schemas/ImageBuilderArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration.
        name:
          allOf:
            - $ref: "#/components/schemas/ResourceName"
            - description: The name of the infrastructure configuration.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the infrastructure configuration.
        dateCreated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which the infrastructure configuration was created.
        dateUpdated:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The date on which the infrastructure configuration was last updated.
        resourceTags:
          allOf:
            - $ref: "#/components/schemas/ResourceTagMap"
            - description: The tags attached to the image created by Image Builder.
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags of the infrastructure configuration.
        instanceTypes:
          allOf:
            - $ref: "#/components/schemas/InstanceTypeList"
            - description: The instance types of the infrastructure configuration.
        instanceProfileName:
          allOf:
            - $ref: "#/components/schemas/InstanceProfileNameType"
            - description: The instance profile of the infrastructure configuration.
      description: The infrastructure used when building Amazon EC2 AMIs.
    InfrastructureConfigurationSummaryList:
      type: array
      items:
        $ref: "#/components/schemas/InfrastructureConfigurationSummary"
    OrganizationArnList:
      type: array
      items:
        $ref: "#/components/schemas/OrganizationArn"
      minItems: 1
      maxItems: 25
    OrganizationalUnitArnList:
      type: array
      items:
        $ref: "#/components/schemas/OrganizationalUnitArn"
      minItems: 1
      maxItems: 25
    LaunchTemplateConfiguration:
      type: object
      required:
        - launchTemplateId
      properties:
        launchTemplateId:
          allOf:
            - $ref: "#/components/schemas/LaunchTemplateId"
            - description: Identifies the Amazon EC2 launch template to use.
        accountId:
          allOf:
            - $ref: "#/components/schemas/AccountId"
            - description: The account ID that this configuration applies to.
        setDefaultVersion:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Set the specified Amazon EC2 launch template as the default launch template for the specified account.
      description: Identifies an Amazon EC2 launch template to use for a specific account.
    LicenseConfigurationArn:
      type: string
      pattern: ^arn:aws[^:]*:license-manager:[^:]+:[0-9]{12}:license-configuration:lic-[a-z0-9-_]{32}$
    RestrictedInteger:
      type: integer
      minimum: 1
      maximum: 25
    PaginationToken:
      type: string
      minLength: 1
      maxLength: 65535
    ListComponentBuildVersionsRequest:
      type: object
      required:
        - componentVersionArn
      title: ListComponentBuildVersionsRequest
      properties:
        componentVersionArn:
          allOf:
            - $ref: "#/components/schemas/ComponentVersionArn"
            - description: The component version Amazon Resource Name (ARN) whose versions you want to list.
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    Ownership:
      type: string
      enum:
        - Self
        - Shared
        - Amazon
        - ThirdParty
    ListComponentsRequest:
      type: object
      title: ListComponentsRequest
      properties:
        owner:
          allOf:
            - $ref: "#/components/schemas/Ownership"
            - description: Filters results based on the type of owner for the component. By default, this request returns a list of components that your account owns. To see results for other types of owners, you can specify components that Amazon manages, third party components, or components that other accounts have shared with you.
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>description</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>supportedOsVersion</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
        byName:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Returns the list of components for the specified name.
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListContainerRecipesRequest:
      type: object
      title: ListContainerRecipesRequest
      properties:
        owner:
          allOf:
            - $ref: "#/components/schemas/Ownership"
            - description: Returns container recipes belonging to the specified owner, that have been shared with you. You can omit this field to return container recipes belonging to your account.
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>containerType</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListDistributionConfigurationsRequest:
      type: object
      title: ListDistributionConfigurationsRequest
      properties:
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: You can filter on <code>name</code> to streamline results.
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListImageBuildVersionsRequest:
      type: object
      required:
        - imageVersionArn
      title: ListImageBuildVersionsRequest
      properties:
        imageVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageVersionArn"
            - description: The Amazon Resource Name (ARN) of the image whose build versions you want to retrieve.
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>osVersion</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListImagePackagesRequest:
      type: object
      required:
        - imageBuildVersionArn
      title: ListImagePackagesRequest
      properties:
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: Filter results for the ListImagePackages request by the Image Build Version ARN
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListImagePipelineImagesRequest:
      type: object
      required:
        - imagePipelineArn
      title: ListImagePipelineImagesRequest
      properties:
        imagePipelineArn:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineArn"
            - description: The Amazon Resource Name (ARN) of the image pipeline whose images you want to view.
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListImagePipelinesRequest:
      type: object
      title: ListImagePipelinesRequest
      properties:
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>description</code> </p> </li> <li> <p> <code>distributionConfigurationArn</code> </p> </li> <li> <p> <code>imageRecipeArn</code> </p> </li> <li> <p> <code>infrastructureConfigurationArn</code> </p> </li> <li> <p> <code>name</code> </p> </li> <li> <p> <code>status</code> </p> </li> </ul>
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListImageRecipesRequest:
      type: object
      title: ListImageRecipesRequest
      properties:
        owner:
          allOf:
            - $ref: "#/components/schemas/Ownership"
            - description: The owner defines which image recipes you want to list. By default, this request will only show image recipes owned by your account. You can use this field to specify if you want to view image recipes owned by yourself, by Amazon, or those image recipes that have been shared with you by other customers.
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>parentImage</code> </p> </li> <li> <p> <code>platform</code> </p> </li> </ul>
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListImageScanFindingAggregationsRequest:
      type: object
      title: ListImageScanFindingAggregationsRequest
      properties:
        filter:
          $ref: "#/components/schemas/Filter"
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListImageScanFindingsRequest:
      type: object
      title: ListImageScanFindingsRequest
      properties:
        filters:
          allOf:
            - $ref: "#/components/schemas/ImageScanFindingsFilterList"
            - description: <p>An array of name value pairs that you can use to filter your results. You can use the following filters to streamline results:</p> <ul> <li> <p> <code>imageBuildVersionArn</code> </p> </li> <li> <p> <code>imagePipelineArn</code> </p> </li> <li> <p> <code>vulnerabilityId</code> </p> </li> <li> <p> <code>severity</code> </p> </li> </ul> <p>If you don't request a filter, then all findings in your account are listed.</p>
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListImagesRequest:
      type: object
      title: ListImagesRequest
      properties:
        owner:
          allOf:
            - $ref: "#/components/schemas/Ownership"
            - description: The owner defines which images you want to list. By default, this request will only show images owned by your account. You can use this field to specify if you want to view images owned by yourself, by Amazon, or those images that have been shared with you by other customers.
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: <p>Use the following filters to streamline results:</p> <ul> <li> <p> <code>name</code> </p> </li> <li> <p> <code>osVersion</code> </p> </li> <li> <p> <code>platform</code> </p> </li> <li> <p> <code>type</code> </p> </li> <li> <p> <code>version</code> </p> </li> </ul>
        byName:
          allOf:
            - $ref: "#/components/schemas/Boolean"
            - description: Requests a list of images with a specific recipe name.
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
        includeDeprecated:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Includes deprecated images in the response list.
    ListInfrastructureConfigurationsRequest:
      type: object
      title: ListInfrastructureConfigurationsRequest
      properties:
        filters:
          allOf:
            - $ref: "#/components/schemas/FilterList"
            - description: You can filter on <code>name</code> to streamline results.
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    ListWorkflowExecutionsRequest:
      type: object
      required:
        - imageBuildVersionArn
      title: ListWorkflowExecutionsRequest
      properties:
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
        imageBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: List all workflow runtime instances for the specified image build version resource ARN.
    WorkflowExecutionsList:
      type: array
      items:
        $ref: "#/components/schemas/WorkflowExecutionMetadata"
    ListWorkflowStepExecutionsRequest:
      type: object
      required:
        - workflowExecutionId
      title: ListWorkflowStepExecutionsRequest
      properties:
        maxResults:
          allOf:
            - $ref: "#/components/schemas/RestrictedInteger"
            - description: The maximum items to return in a request.
        nextToken:
          allOf:
            - $ref: "#/components/schemas/PaginationToken"
            - description: A token to specify where to start paginating. This is the NextToken from a previously truncated response.
        workflowExecutionId:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionId"
            - description: The unique identifier that Image Builder assigned to keep track of runtime details when it ran the workflow.
    WorkflowStepExecutionsList:
      type: array
      items:
        $ref: "#/components/schemas/WorkflowStepMetadata"
    NonEmptyStringList:
      type: array
      items:
        $ref: "#/components/schemas/NonEmptyString"
      minItems: 1
    OrganizationArn:
      type: string
      pattern: ^arn:aws[^:]*:organizations::[0-9]{12}:organization/o-[a-z0-9]{10,32}$
    OrganizationalUnitArn:
      type: string
      pattern: ^arn:aws[^:]*:organizations::[0-9]{12}:ou/o-[a-z0-9]{10,32}/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}
    PackageArchitecture:
      type: string
    PackageEpoch:
      type: integer
    VulnerabilityId:
      type: string
    VulnerablePackageList:
      type: array
      items:
        $ref: "#/components/schemas/VulnerablePackage"
    VulnerabilityIdList:
      type: array
      items:
        $ref: "#/components/schemas/VulnerabilityId"
    PutComponentPolicyRequest:
      type: object
      required:
        - componentArn
        - policy
      title: PutComponentPolicyRequest
      properties:
        componentArn:
          allOf:
            - $ref: "#/components/schemas/ComponentBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the component that this policy should be applied to.
        policy:
          allOf:
            - $ref: "#/components/schemas/ResourcePolicyDocument"
            - description: The policy to apply.
    PutContainerRecipePolicyRequest:
      type: object
      required:
        - containerRecipeArn
        - policy
      title: PutContainerRecipePolicyRequest
      properties:
        containerRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipeArn"
            - description: The Amazon Resource Name (ARN) of the container recipe that this policy should be applied to.
        policy:
          allOf:
            - $ref: "#/components/schemas/ResourcePolicyDocument"
            - description: The policy to apply to the container recipe.
    PutImagePolicyRequest:
      type: object
      required:
        - imageArn
        - policy
      title: PutImagePolicyRequest
      properties:
        imageArn:
          allOf:
            - $ref: "#/components/schemas/ImageBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the image that this policy should be applied to.
        policy:
          allOf:
            - $ref: "#/components/schemas/ResourcePolicyDocument"
            - description: The policy to apply.
    PutImageRecipePolicyRequest:
      type: object
      required:
        - imageRecipeArn
        - policy
      title: PutImageRecipePolicyRequest
      properties:
        imageRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ImageRecipeArn"
            - description: The Amazon Resource Name (ARN) of the image recipe that this policy should be applied to.
        policy:
          allOf:
            - $ref: "#/components/schemas/ResourcePolicyDocument"
            - description: The policy to apply.
    RemediationRecommendation:
      type: object
      properties:
        text:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The recommended course of action to remediate the finding.
        url:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: A link to more information about the recommended remediation for this vulnerability.
      description: Details about the recommended course of action to remediate the finding.
    SeverityCountNumber:
      type: integer
    SourceLayerHash:
      type: string
    StartImagePipelineExecutionRequest:
      type: object
      required:
        - imagePipelineArn
        - clientToken
      title: StartImagePipelineExecutionRequest
      properties:
        imagePipelineArn:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineArn"
            - description: The Amazon Resource Name (ARN) of the image pipeline that you want to manually invoke.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 1
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags to apply to the resource.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateDistributionConfigurationRequest:
      type: object
      required:
        - distributionConfigurationArn
        - distributions
        - clientToken
      title: UpdateDistributionConfigurationRequest
      properties:
        distributionConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/DistributionConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration that you want to update.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the distribution configuration.
        distributions:
          allOf:
            - $ref: "#/components/schemas/DistributionList"
            - description: The distributions of the distribution configuration.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token of the distribution configuration.
    UpdateImagePipelineRequest:
      type: object
      required:
        - imagePipelineArn
        - infrastructureConfigurationArn
        - clientToken
      title: UpdateImagePipelineRequest
      properties:
        imagePipelineArn:
          allOf:
            - $ref: "#/components/schemas/ImagePipelineArn"
            - description: The Amazon Resource Name (ARN) of the image pipeline that you want to update.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the image pipeline.
        imageRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ImageRecipeArn"
            - description: The Amazon Resource Name (ARN) of the image recipe that will be used to configure images updated by this image pipeline.
        containerRecipeArn:
          allOf:
            - $ref: "#/components/schemas/ContainerRecipeArn"
            - description: The Amazon Resource Name (ARN) of the container pipeline to update.
        infrastructureConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration that Image Builder uses to build images that this image pipeline has updated.
        distributionConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/DistributionConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the distribution configuration that Image Builder uses to configure and distribute images that this image pipeline has updated.
        imageTestsConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageTestsConfiguration"
            - description: The image test configuration of the image pipeline.
        enhancedImageMetadataEnabled:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
        schedule:
          allOf:
            - $ref: "#/components/schemas/Schedule"
            - description: The schedule of the image pipeline.
        status:
          allOf:
            - $ref: "#/components/schemas/PipelineStatus"
            - description: The status of the image pipeline.
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        imageScanningConfiguration:
          allOf:
            - $ref: "#/components/schemas/ImageScanningConfiguration"
            - description: Contains settings for vulnerability scans.
    UpdateInfrastructureConfigurationRequest:
      type: object
      required:
        - infrastructureConfigurationArn
        - instanceProfileName
        - clientToken
      title: UpdateInfrastructureConfigurationRequest
      properties:
        infrastructureConfigurationArn:
          allOf:
            - $ref: "#/components/schemas/InfrastructureConfigurationArn"
            - description: The Amazon Resource Name (ARN) of the infrastructure configuration that you want to update.
        description:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The description of the infrastructure configuration.
        instanceTypes:
          allOf:
            - $ref: "#/components/schemas/InstanceTypeList"
            - description: The instance types of the infrastructure configuration. You can specify one or more instance types to use for this build. The service will pick one of these instance types based on availability.
        instanceProfileName:
          allOf:
            - $ref: "#/components/schemas/InstanceProfileNameType"
            - description: The instance profile to associate with the instance used to customize your Amazon EC2 AMI.
        securityGroupIds:
          allOf:
            - $ref: "#/components/schemas/SecurityGroupIds"
            - description: The security group IDs to associate with the instance used to customize your Amazon EC2 AMI.
        subnetId:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The subnet ID to place the instance used to customize your Amazon EC2 AMI in.
        logging:
          allOf:
            - $ref: "#/components/schemas/Logging"
            - description: The logging configuration of the infrastructure configuration.
        keyPair:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The key pair of the infrastructure configuration. You can use this to log on to and debug the instance used to create your image.
        terminateInstanceOnFailure:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: The terminate instance on failure setting of the infrastructure configuration. Set to false if you want Image Builder to retain the instance used to configure your AMI if the build or test phase of your workflow fails.
        snsTopicArn:
          allOf:
            - $ref: "#/components/schemas/SnsTopicArn"
            - description: <p>The Amazon Resource Name (ARN) for the SNS topic to which we send image build event notifications.</p> <note> <p>EC2 Image Builder is unable to send notifications to SNS topics that are encrypted using keys from other accounts. The key that is used to encrypt the SNS topic must reside in the account that the Image Builder service runs under.</p> </note>
        clientToken:
          allOf:
            - $ref: "#/components/schemas/ClientToken"
            - description: The idempotency token used to make this request idempotent.
        resourceTags:
          allOf:
            - $ref: "#/components/schemas/ResourceTagMap"
            - description: The tags attached to the resource created by Image Builder.
        instanceMetadataOptions:
          allOf:
            - $ref: "#/components/schemas/InstanceMetadataOptions"
            - description: <p>The instance metadata options that you can set for the HTTP requests that pipeline builds use to launch EC2 build and test instances. For more information about instance metadata options, see one of the following links:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 User Guide</i> </i> for Linux instances.</p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/configuring-instance-metadata-options.html">Configure the instance metadata options</a> in the <i> <i>Amazon EC2 Windows Guide</i> </i> for Windows instances.</p> </li> </ul>
    VulnerablePackage:
      type: object
      properties:
        name:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The name of the vulnerable package.
        version:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The version of the vulnerable package.
        sourceLayerHash:
          allOf:
            - $ref: "#/components/schemas/SourceLayerHash"
            - description: The source layer hash of the vulnerable package.
        epoch:
          allOf:
            - $ref: "#/components/schemas/PackageEpoch"
            - description: The epoch of the vulnerable package.
        release:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The release of the vulnerable package.
        arch:
          allOf:
            - $ref: "#/components/schemas/PackageArchitecture"
            - description: The architecture of the vulnerable package.
        packageManager:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The package manager of the vulnerable package.
        filePath:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The file path of the vulnerable package.
        fixedInVersion:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The version of the package that contains the vulnerability fix.
        remediation:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The code to run in your environment to update packages with a fix available.
      description: Information about a vulnerable package that Amazon Inspector identifies in a finding.
    WorkflowExecutionMetadata:
      type: object
      properties:
        workflowBuildVersionArn:
          allOf:
            - $ref: "#/components/schemas/WorkflowBuildVersionArn"
            - description: The Amazon Resource Name (ARN) of the workflow resource build version that ran.
        workflowExecutionId:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionId"
            - description: Unique identifier that Image Builder assigns to keep track of runtime resources each time it runs a workflow.
        type:
          allOf:
            - $ref: "#/components/schemas/WorkflowType"
            - description: Indicates what type of workflow that Image Builder ran for this runtime instance of the workflow.
        status:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionStatus"
            - description: The current runtime status for this workflow.
        message:
          allOf:
            - $ref: "#/components/schemas/WorkflowExecutionMessage"
            - description: The runtime output message from the workflow, if applicable.
        totalStepCount:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepCount"
            - description: The total number of steps in the workflow. This should equal the sum of the step counts for steps that succeeded, were skipped, and failed.
        totalStepsSucceeded:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepCount"
            - description: A runtime count for the number of steps in the workflow that ran successfully.
        totalStepsFailed:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepCount"
            - description: A runtime count for the number of steps in the workflow that failed.
        totalStepsSkipped:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepCount"
            - description: A runtime count for the number of steps in the workflow that were skipped.
        startTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The timestamp when the runtime instance of this workflow started.
        endTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The timestamp when this runtime instance of the workflow finished.
      description: Metadata that includes details and status from this runtime instance of the workflow.
    WorkflowStepMetadata:
      type: object
      properties:
        stepExecutionId:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepExecutionId"
            - description: A unique identifier for the workflow step, assigned at runtime.
        name:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepName"
            - description: The name of the workflow step.
        description:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepDescription"
            - description: Description of the workflow step.
        action:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepAction"
            - description: The step action name.
        status:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepExecutionStatus"
            - description: Runtime status for the workflow step.
        rollbackStatus:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepExecutionRollbackStatus"
            - description: Reports on the rollback status of the step, if applicable.
        message:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepMessage"
            - description: Detailed output message that the workflow step provides at runtime.
        inputs:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepInputs"
            - description: Input parameters that Image Builder provides for the workflow step.
        outputs:
          allOf:
            - $ref: "#/components/schemas/WorkflowStepOutputs"
            - description: The file names that the workflow step created as output for this runtime instance of the workflow.
        startTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The timestamp when the workflow step started.
        endTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The timestamp when the workflow step finished.
      description: Runtime details and status for the workflow step.
security:
  - hmac: []
