openapi: 3.0.0
info:
  version: 2017-03-31
  x-release: v4
  title: AWS Lake Formation
  description: <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: lakeformation
  x-aws-signingName: lakeformation
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lakeformation-2017-03-31.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/lakeformation/
servers:
  - url: http://lakeformation.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS Lake Formation multi-region endpoint
  - url: https://lakeformation.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS Lake Formation multi-region endpoint
  - url: http://lakeformation.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Lake Formation endpoint for China (Beijing) and China (Ningxia)
  - url: https://lakeformation.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Lake Formation endpoint for China (Beijing) and China (Ningxia)
paths:
  /AddLFTagsToResource:
    post:
      operationId: AddLFTagsToResource
      description: Attaches one or more LF-tags to an existing resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddLFTagsToResourceResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "485":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Resource
                - LFTags
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Resource:
                  description: A structure for the resource.
                  type: object
                  properties:
                    Catalog:
                      allOf:
                        - $ref: "#/components/schemas/CatalogResource"
                        - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                    Database:
                      allOf:
                        - $ref: "#/components/schemas/DatabaseResource"
                        - description: "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. "
                    Table:
                      allOf:
                        - $ref: "#/components/schemas/TableResource"
                        - description: "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
                    TableWithColumns:
                      allOf:
                        - $ref: "#/components/schemas/TableWithColumnsResource"
                        - description: The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
                    DataLocation:
                      allOf:
                        - $ref: "#/components/schemas/DataLocationResource"
                        - description: "The location of an Amazon S3 path where permissions are granted or revoked. "
                    DataCellsFilter:
                      allOf:
                        - $ref: "#/components/schemas/DataCellsFilterResource"
                        - description: A data cell filter.
                    LFTag:
                      allOf:
                        - $ref: "#/components/schemas/LFTagKeyResource"
                        - description: The LF-tag key and values attached to a resource.
                    LFTagPolicy:
                      allOf:
                        - $ref: "#/components/schemas/LFTagPolicyResource"
                        - description: A list of LF-tag conditions that define a resource's LF-tag policy.
                LFTags:
                  description: The LF-tags to attach to the resource.
                  type: array
                  items:
                    $ref: "#/components/schemas/LFTagPair"
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /AssumeDecoratedRoleWithSAML:
    post:
      operationId: AssumeDecoratedRoleWithSAML
      description: "<p>Allows a caller to assume an IAM role decorated as the SAML user specified in the SAML assertion included in the request. This decoration allows Lake Formation to enforce access policies against the SAML users and groups. This API operation requires SAML federation setup in the callerâ€™s account as it can only be called with valid SAML assertions. Lake Formation does not scope down the permission of the assumed role. All permissions attached to the role via the SAML federation setup will be included in the role session. </p> <p> This decorated role is expected to access data in Amazon S3 by getting temporary access from Lake Formation which is authorized via the virtual API <code>GetDataAccess</code>. Therefore, all SAML roles that can be assumed via <code>AssumeDecoratedRoleWithSAML</code> must at a minimum include <code>lakeformation:GetDataAccess</code> in their role policies. A typical IAM policy attached to such a role would look as follows: </p>"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssumeDecoratedRoleWithSAMLResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - SAMLAssertion
                - RoleArn
                - PrincipalArn
              properties:
                SAMLAssertion:
                  description: A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.
                  type: string
                  minLength: 4
                  maxLength: 100000
                RoleArn:
                  description: "The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as <code>GetTemporaryTableCredentials</code>. The caller must also have iam:PassRole permission on this role. "
                  type: string
                  pattern: arn:aws:iam::[0-9]*:role/.*
                PrincipalArn:
                  description: The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.
                  type: string
                  pattern: arn:aws:iam::[0-9]*:saml-provider/.*
                DurationSeconds:
                  description: The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.
                  type: integer
                  minimum: 900
                  maximum: 43200
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /BatchGrantPermissions:
    post:
      operationId: BatchGrantPermissions
      description: Batch operation to grant permissions to the principal.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchGrantPermissionsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Entries
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Entries:
                  description: A list of up to 20 entries for resource permissions to be granted by batch operation to the principal.
                  type: array
                  items:
                    $ref: "#/components/schemas/BatchPermissionsRequestEntry"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /BatchRevokePermissions:
    post:
      operationId: BatchRevokePermissions
      description: Batch operation to revoke permissions from the principal.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchRevokePermissionsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Entries
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Entries:
                  description: A list of up to 20 entries for resource permissions to be revoked by batch operation to the principal.
                  type: array
                  items:
                    $ref: "#/components/schemas/BatchPermissionsRequestEntry"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CancelTransaction:
    post:
      operationId: CancelTransaction
      description: Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelTransactionResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: TransactionCommittedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCommittedException"
        "485":
          description: TransactionCommitInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCommitInProgressException"
        "486":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TransactionId
              properties:
                TransactionId:
                  description: The transaction to cancel.
                  type: string
                  pattern: "[\\p{L}\\p{N}\\p{P}]*"
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CommitTransaction:
    post:
      operationId: CommitTransaction
      description: Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommitTransactionResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: TransactionCanceledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCanceledException"
        "485":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TransactionId
              properties:
                TransactionId:
                  description: The transaction to commit.
                  type: string
                  pattern: "[\\p{L}\\p{N}\\p{P}]*"
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateDataCellsFilter:
    post:
      operationId: CreateDataCellsFilter
      description: Creates a data cell filter to allow one to grant access to certain columns on certain rows.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDataCellsFilterResponse"
        "480":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "483":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "484":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "485":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "486":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TableData
              properties:
                TableData:
                  description: A structure that describes certain columns on certain rows.
                  type: object
                  properties:
                    TableCatalogId:
                      allOf:
                        - $ref: "#/components/schemas/CatalogIdString"
                        - description: The ID of the catalog to which the table belongs.
                    DatabaseName:
                      allOf:
                        - $ref: "#/components/schemas/NameString"
                        - description: A database in the Glue Data Catalog.
                    TableName:
                      allOf:
                        - $ref: "#/components/schemas/NameString"
                        - description: A table in the database.
                    Name:
                      allOf:
                        - $ref: "#/components/schemas/NameString"
                        - description: The name given by the user to the data filter cell.
                    RowFilter:
                      allOf:
                        - $ref: "#/components/schemas/RowFilter"
                        - description: A PartiQL predicate.
                    ColumnNames:
                      allOf:
                        - $ref: "#/components/schemas/ColumnNames"
                        - description: A list of column names.
                    ColumnWildcard:
                      allOf:
                        - $ref: "#/components/schemas/ColumnWildcard"
                        - description: <p>A wildcard with exclusions.</p> <p>You must specify either a <code>ColumnNames</code> list or the <code>ColumnWildCard</code>. </p>
                    VersionId:
                      allOf:
                        - $ref: "#/components/schemas/VersionString"
                        - description: The ID of the data cells filter version.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /CreateLFTag:
    post:
      operationId: CreateLFTag
      description: Creates an LF-tag with the specified name and values.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLFTagResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TagKey
                - TagValues
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TagKey:
                  description: The key-name for the LF-tag.
                  type: string
                  pattern: ^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$
                  minLength: 1
                  maxLength: 128
                TagValues:
                  description: A list of possible values an attribute can take.
                  type: array
                  items:
                    $ref: "#/components/schemas/LFTagValue"
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteDataCellsFilter:
    post:
      operationId: DeleteDataCellsFilter
      description: Deletes a data cell filter.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteDataCellsFilterResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TableCatalogId:
                  description: The ID of the catalog to which the table belongs.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                DatabaseName:
                  description: A database in the Glue Data Catalog.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TableName:
                  description: A table in the database.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Name:
                  description: The name given by the user to the data filter cell.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteLFTag:
    post:
      operationId: DeleteLFTag
      description: Deletes the specified LF-tag given a key name. If the input parameter tag key was not found, then the operation will throw an exception. When you delete an LF-tag, the <code>LFTagPolicy</code> attached to the LF-tag becomes invalid. If the deleted LF-tag was still assigned to any resource, the tag policy attach to the deleted LF-tag will no longer be applied to the resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteLFTagResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TagKey
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TagKey:
                  description: The key-name for the LF-tag to delete.
                  type: string
                  pattern: ^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$
                  minLength: 1
                  maxLength: 128
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeleteObjectsOnCancel:
    post:
      operationId: DeleteObjectsOnCancel
      description: <p>For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels. </p> <p> The Glue ETL library function <code>write_dynamic_frame.from_catalog()</code> includes an option to automatically call <code>DeleteObjectsOnCancel</code> before writes. For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/transactions-data-operations.html#rolling-back-writes">Rolling Back Amazon S3 Writes</a>. </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteObjectsOnCancelResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "484":
          description: TransactionCommittedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCommittedException"
        "485":
          description: TransactionCanceledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCanceledException"
        "486":
          description: ResourceNotReadyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotReadyException"
        "487":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DatabaseName
                - TableName
                - TransactionId
                - Objects
              properties:
                CatalogId:
                  description: The Glue data catalog that contains the governed table. Defaults to the current account ID.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                DatabaseName:
                  description: The database that contains the governed table.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TableName:
                  description: The name of the governed table.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TransactionId:
                  description: ID of the transaction that the writes occur in.
                  type: string
                  pattern: "[\\p{L}\\p{N}\\p{P}]*"
                  minLength: 1
                  maxLength: 255
                Objects:
                  description: A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.
                  type: array
                  items:
                    $ref: "#/components/schemas/VirtualObject"
                  minItems: 1
                  maxItems: 100
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DeregisterResource:
    post:
      operationId: DeregisterResource
      description: <p>Deregisters the resource as managed by the Data Catalog.</p> <p>When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeregisterResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ResourceArn
              properties:
                ResourceArn:
                  description: The Amazon Resource Name (ARN) of the resource that you want to deregister.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DescribeResource:
    post:
      operationId: DescribeResource
      description: Retrieves the current data access role for the given resource registered in Lake Formation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ResourceArn
              properties:
                ResourceArn:
                  description: The resource ARN.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /DescribeTransaction:
    post:
      operationId: DescribeTransaction
      description: Returns the details of a single transaction.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescribeTransactionResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TransactionId
              properties:
                TransactionId:
                  description: The transaction for which to return status.
                  type: string
                  pattern: "[\\p{L}\\p{N}\\p{P}]*"
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ExtendTransaction:
    post:
      operationId: ExtendTransaction
      description: <p>Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted.</p> <p>Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendTransactionResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: TransactionCommittedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCommittedException"
        "485":
          description: TransactionCanceledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCanceledException"
        "486":
          description: TransactionCommitInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCommitInProgressException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TransactionId:
                  description: The transaction to extend.
                  type: string
                  pattern: "[\\p{L}\\p{N}\\p{P}]*"
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetDataCellsFilter:
    post:
      operationId: GetDataCellsFilter
      description: Returns a data cells filter.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataCellsFilterResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TableCatalogId
                - DatabaseName
                - TableName
                - Name
              properties:
                TableCatalogId:
                  description: The ID of the catalog to which the table belongs.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                DatabaseName:
                  description: A database in the Glue Data Catalog.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TableName:
                  description: A table in the database.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Name:
                  description: The name given by the user to the data filter cell.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetDataLakeSettings:
    post:
      operationId: GetDataLakeSettings
      description: "Retrieves the list of the data lake administrators of a Lake Formation-managed data lake. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataLakeSettingsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetEffectivePermissionsForPath:
    post:
      operationId: GetEffectivePermissionsForPath
      description: Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. <code>GetEffectivePermissionsForPath</code> will not return databases and tables if the catalog is encrypted.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEffectivePermissionsForPathResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ResourceArn
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                ResourceArn:
                  description: The Amazon Resource Name (ARN) of the resource for which you want to get permissions.
                  type: string
                NextToken:
                  description: A continuation token, if this is not the first call to retrieve this list.
                  type: string
                MaxResults:
                  description: The maximum number of results to return.
                  type: integer
                  minimum: 1
                  maximum: 1000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetLFTag:
    post:
      operationId: GetLFTag
      description: Returns an LF-tag definition.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLFTagResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TagKey
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TagKey:
                  description: The key-name for the LF-tag.
                  type: string
                  pattern: ^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$
                  minLength: 1
                  maxLength: 128
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetQueryState:
    post:
      operationId: GetQueryState
      description: Returns the state of a query previously submitted. Clients are expected to poll <code>GetQueryState</code> to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to <code>StartQueryPlanning</code>.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryStateResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - QueryId
              properties:
                QueryId:
                  description: The ID of the plan query operation.
                  type: string
                  minLength: 36
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetQueryStatistics:
    post:
      operationId: GetQueryStatistics
      description: Retrieves statistics on the planning and execution of a query.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQueryStatisticsResponse"
        "480":
          description: StatisticsNotReadyYetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticsNotReadyYetException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "484":
          description: ExpiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredException"
        "485":
          description: ThrottledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottledException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - QueryId
              properties:
                QueryId:
                  description: The ID of the plan query operation.
                  type: string
                  minLength: 36
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetResourceLFTags:
    post:
      operationId: GetResourceLFTags
      description: Returns the LF-tags applied to a resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetResourceLFTagsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Resource
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Resource:
                  description: A structure for the resource.
                  type: object
                  properties:
                    Catalog:
                      allOf:
                        - $ref: "#/components/schemas/CatalogResource"
                        - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                    Database:
                      allOf:
                        - $ref: "#/components/schemas/DatabaseResource"
                        - description: "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. "
                    Table:
                      allOf:
                        - $ref: "#/components/schemas/TableResource"
                        - description: "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
                    TableWithColumns:
                      allOf:
                        - $ref: "#/components/schemas/TableWithColumnsResource"
                        - description: The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
                    DataLocation:
                      allOf:
                        - $ref: "#/components/schemas/DataLocationResource"
                        - description: "The location of an Amazon S3 path where permissions are granted or revoked. "
                    DataCellsFilter:
                      allOf:
                        - $ref: "#/components/schemas/DataCellsFilterResource"
                        - description: A data cell filter.
                    LFTag:
                      allOf:
                        - $ref: "#/components/schemas/LFTagKeyResource"
                        - description: The LF-tag key and values attached to a resource.
                    LFTagPolicy:
                      allOf:
                        - $ref: "#/components/schemas/LFTagPolicyResource"
                        - description: A list of LF-tag conditions that define a resource's LF-tag policy.
                ShowAssignedLFTags:
                  description: Indicates whether to show the assigned LF-tags.
                  type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetTableObjects:
    post:
      operationId: GetTableObjects
      description: Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTableObjectsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: TransactionCommittedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCommittedException"
        "485":
          description: TransactionCanceledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCanceledException"
        "486":
          description: ResourceNotReadyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotReadyException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DatabaseName
                - TableName
              properties:
                CatalogId:
                  description: The catalog containing the governed table. Defaults to the callerâ€™s account.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                DatabaseName:
                  description: The database containing the governed table.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TableName:
                  description: The governed table for which to retrieve objects.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TransactionId:
                  description: The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.
                  type: string
                  pattern: "[\\p{L}\\p{N}\\p{P}]*"
                  minLength: 1
                  maxLength: 255
                QueryAsOfTime:
                  description: The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with <code>TransactionId</code>.
                  type: string
                  format: date-time
                PartitionPredicate:
                  description: '<p>A predicate to filter the objects returned based on the partition keys defined in the governed table.</p> <ul> <li> <p>The comparison operators supported are: =, &gt;, &lt;, &gt;=, &lt;=</p> </li> <li> <p>The logical operators supported are: AND</p> </li> <li> <p>The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p> </li> </ul>'
                  type: string
                  minLength: 0
                  maxLength: 2048
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
                MaxResults:
                  description: Specifies how many values to return in a page.
                  type: integer
                  minimum: 1
                  maximum: 1000
                NextToken:
                  description: A continuation token if this is not the first call to retrieve these objects.
                  type: string
                  maxLength: 4096
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetTemporaryGluePartitionCredentials:
    post:
      operationId: GetTemporaryGluePartitionCredentials
      description: This API is identical to <code>GetTemporaryTableCredentials</code> except that this is used when the target Data Catalog resource is of type Partition. Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTemporaryGluePartitionCredentialsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "485":
          description: PermissionTypeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionTypeMismatchException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TableArn
                - Partition
                - SupportedPermissionTypes
              properties:
                TableArn:
                  description: The ARN of the partitions' table.
                  type: string
                Partition:
                  description: Contains a list of values defining partitions.
                  type: object
                  properties:
                    Values:
                      allOf:
                        - $ref: "#/components/schemas/ValueStringList"
                        - description: The list of partition values.
                Permissions:
                  description: Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).
                  type: array
                  items:
                    $ref: "#/components/schemas/Permission"
                DurationSeconds:
                  description: The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.
                  type: integer
                  minimum: 900
                  maximum: 43200
                AuditContext:
                  description: "A structure used to include auditing information on the privileged API. "
                  type: object
                  properties:
                    AdditionalAuditContext:
                      allOf:
                        - $ref: "#/components/schemas/AuditContextString"
                        - description: The filter engine can populate the 'AdditionalAuditContext' information with the request ID for you to track. This information will be displayed in CloudTrail log in your account.
                SupportedPermissionTypes:
                  description: A list of supported permission types for the partition. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.
                  type: array
                  items:
                    $ref: "#/components/schemas/PermissionType"
                  minItems: 1
                  maxItems: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetTemporaryGlueTableCredentials:
    post:
      operationId: GetTemporaryGlueTableCredentials
      description: Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTemporaryGlueTableCredentialsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "485":
          description: PermissionTypeMismatchException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionTypeMismatchException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TableArn
                - SupportedPermissionTypes
              properties:
                TableArn:
                  description: The ARN identifying a table in the Data Catalog for the temporary credentials request.
                  type: string
                Permissions:
                  description: Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).
                  type: array
                  items:
                    $ref: "#/components/schemas/Permission"
                DurationSeconds:
                  description: The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.
                  type: integer
                  minimum: 900
                  maximum: 43200
                AuditContext:
                  description: "A structure used to include auditing information on the privileged API. "
                  type: object
                  properties:
                    AdditionalAuditContext:
                      allOf:
                        - $ref: "#/components/schemas/AuditContextString"
                        - description: The filter engine can populate the 'AdditionalAuditContext' information with the request ID for you to track. This information will be displayed in CloudTrail log in your account.
                SupportedPermissionTypes:
                  description: A list of supported permission types for the table. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.
                  type: array
                  items:
                    $ref: "#/components/schemas/PermissionType"
                  minItems: 1
                  maxItems: 255
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetWorkUnitResults:
    post:
      operationId: GetWorkUnitResults
      description: "Returns the work units resulting from the query. Work units can be executed in any order and in parallel. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkUnitResultsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ExpiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredException"
        "484":
          description: ThrottledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottledException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - QueryId
                - WorkUnitId
                - WorkUnitToken
              properties:
                QueryId:
                  description: The ID of the plan query operation for which to get results.
                  type: string
                  minLength: 36
                  maxLength: 36
                WorkUnitId:
                  description: The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.
                  type: integer
                  minimum: 0
                WorkUnitToken:
                  description: A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.
                  type: string
                  minLength: 1
                  format: password
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GetWorkUnits:
    post:
      operationId: GetWorkUnits
      description: Retrieves the work units generated by the <code>StartQueryPlanning</code> operation.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkUnitsResponse"
        "480":
          description: WorkUnitsNotReadyYetException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkUnitsNotReadyYetException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "484":
          description: ExpiredException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredException"
      parameters:
        - name: PageSize
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - QueryId
              properties:
                NextToken:
                  description: A continuation token, if this is a continuation call.
                  type: string
                PageSize:
                  description: The size of each page to get in the Amazon Web Services service call. This does not affect the number of items returned in the command's output. Setting a smaller page size results in more calls to the Amazon Web Services service, retrieving fewer items in each call. This can help prevent the Amazon Web Services service calls from timing out.
                  type: integer
                QueryId:
                  description: The ID of the plan query operation.
                  type: string
                  minLength: 36
                  maxLength: 36
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /GrantPermissions:
    post:
      operationId: GrantPermissions
      description: <p>Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.</p> <p>For information about permissions, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GrantPermissionsResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Principal
                - Resource
                - Permissions
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Principal:
                  description: The Lake Formation principal. Supported principals are IAM users or IAM roles.
                  type: object
                  properties:
                    DataLakePrincipalIdentifier:
                      allOf:
                        - $ref: "#/components/schemas/DataLakePrincipalString"
                        - description: An identifier for the Lake Formation principal.
                Resource:
                  description: A structure for the resource.
                  type: object
                  properties:
                    Catalog:
                      allOf:
                        - $ref: "#/components/schemas/CatalogResource"
                        - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                    Database:
                      allOf:
                        - $ref: "#/components/schemas/DatabaseResource"
                        - description: "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. "
                    Table:
                      allOf:
                        - $ref: "#/components/schemas/TableResource"
                        - description: "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
                    TableWithColumns:
                      allOf:
                        - $ref: "#/components/schemas/TableWithColumnsResource"
                        - description: The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
                    DataLocation:
                      allOf:
                        - $ref: "#/components/schemas/DataLocationResource"
                        - description: "The location of an Amazon S3 path where permissions are granted or revoked. "
                    DataCellsFilter:
                      allOf:
                        - $ref: "#/components/schemas/DataCellsFilterResource"
                        - description: A data cell filter.
                    LFTag:
                      allOf:
                        - $ref: "#/components/schemas/LFTagKeyResource"
                        - description: The LF-tag key and values attached to a resource.
                    LFTagPolicy:
                      allOf:
                        - $ref: "#/components/schemas/LFTagPolicyResource"
                        - description: A list of LF-tag conditions that define a resource's LF-tag policy.
                Permissions:
                  description: "The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. "
                  type: array
                  items:
                    $ref: "#/components/schemas/Permission"
                PermissionsWithGrantOption:
                  description: Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the <code>Privileges</code>.
                  type: array
                  items:
                    $ref: "#/components/schemas/Permission"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListDataCellsFilter:
    post:
      operationId: ListDataCellsFilter
      description: Lists all the data cell filters on a table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDataCellsFilterResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Table:
                  description: "A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
                  type: object
                  properties:
                    CatalogId:
                      allOf:
                        - $ref: "#/components/schemas/CatalogIdString"
                        - description: The identifier for the Data Catalog. By default, it is the account ID of the caller.
                    DatabaseName:
                      allOf:
                        - $ref: "#/components/schemas/NameString"
                        - description: "The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal. "
                    Name:
                      allOf:
                        - $ref: "#/components/schemas/NameString"
                        - description: The name of the table.
                    TableWildcard:
                      allOf:
                        - $ref: "#/components/schemas/TableWildcard"
                        - description: <p>A wildcard object representing every table under a database.</p> <p>At least one of <code>TableResource$Name</code> or <code>TableResource$TableWildcard</code> is required.</p>
                NextToken:
                  description: A continuation token, if this is a continuation call.
                  type: string
                MaxResults:
                  description: The maximum size of the response.
                  type: integer
                  minimum: 1
                  maximum: 1000
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListLFTags:
    post:
      operationId: ListLFTags
      description: "Lists LF-tags that the requester has permission to view. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLFTagsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                ResourceShareType:
                  description: If resource share type is <code>ALL</code>, returns both in-account LF-tags and shared LF-tags that the requester has permission to view. If resource share type is <code>FOREIGN</code>, returns all share LF-tags that the requester can view. If no resource share type is passed, lists LF-tags in the given catalog ID that the requester has permission to view.
                  type: string
                  enum:
                    - FOREIGN
                    - ALL
                MaxResults:
                  description: The maximum number of results to return.
                  type: integer
                  minimum: 1
                  maximum: 1000
                NextToken:
                  description: A continuation token, if this is not the first call to retrieve this list.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListPermissions:
    post:
      operationId: ListPermissions
      description: <p>Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER.</p> <p>This operation returns only those permissions that have been explicitly granted.</p> <p>For information about permissions, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPermissionsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Principal:
                  description: The Lake Formation principal. Supported principals are IAM users or IAM roles.
                  type: object
                  properties:
                    DataLakePrincipalIdentifier:
                      allOf:
                        - $ref: "#/components/schemas/DataLakePrincipalString"
                        - description: An identifier for the Lake Formation principal.
                ResourceType:
                  description: Specifies a resource type to filter the permissions returned.
                  type: string
                  enum:
                    - CATALOG
                    - DATABASE
                    - TABLE
                    - DATA_LOCATION
                    - LF_TAG
                    - LF_TAG_POLICY
                    - LF_TAG_POLICY_DATABASE
                    - LF_TAG_POLICY_TABLE
                Resource:
                  description: A structure for the resource.
                  type: object
                  properties:
                    Catalog:
                      allOf:
                        - $ref: "#/components/schemas/CatalogResource"
                        - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                    Database:
                      allOf:
                        - $ref: "#/components/schemas/DatabaseResource"
                        - description: "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. "
                    Table:
                      allOf:
                        - $ref: "#/components/schemas/TableResource"
                        - description: "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
                    TableWithColumns:
                      allOf:
                        - $ref: "#/components/schemas/TableWithColumnsResource"
                        - description: The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
                    DataLocation:
                      allOf:
                        - $ref: "#/components/schemas/DataLocationResource"
                        - description: "The location of an Amazon S3 path where permissions are granted or revoked. "
                    DataCellsFilter:
                      allOf:
                        - $ref: "#/components/schemas/DataCellsFilterResource"
                        - description: A data cell filter.
                    LFTag:
                      allOf:
                        - $ref: "#/components/schemas/LFTagKeyResource"
                        - description: The LF-tag key and values attached to a resource.
                    LFTagPolicy:
                      allOf:
                        - $ref: "#/components/schemas/LFTagPolicyResource"
                        - description: A list of LF-tag conditions that define a resource's LF-tag policy.
                NextToken:
                  description: A continuation token, if this is not the first call to retrieve this list.
                  type: string
                MaxResults:
                  description: The maximum number of results to return.
                  type: integer
                  minimum: 1
                  maximum: 1000
                IncludeRelated:
                  description: Indicates that related permissions should be included in the results.
                  type: string
                  minLength: 1
                  maxLength: 5
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListResources:
    post:
      operationId: ListResources
      description: Lists the resources registered to be managed by the Data Catalog.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListResourcesResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                FilterConditionList:
                  description: Any applicable row-level and/or column-level filtering conditions for the resources.
                  type: array
                  items:
                    $ref: "#/components/schemas/FilterCondition"
                  minItems: 1
                  maxItems: 20
                MaxResults:
                  description: The maximum number of resource results.
                  type: integer
                  minimum: 1
                  maximum: 1000
                NextToken:
                  description: A continuation token, if this is not the first call to retrieve these resources.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListTableStorageOptimizers:
    post:
      operationId: ListTableStorageOptimizers
      description: Returns the configuration of all storage optimizers associated with a specified table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTableStorageOptimizersResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DatabaseName
                - TableName
              properties:
                CatalogId:
                  description: The Catalog ID of the table.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                DatabaseName:
                  description: Name of the database where the table is present.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TableName:
                  description: Name of the table.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                StorageOptimizerType:
                  description: The specific type of storage optimizers to list. The supported value is <code>compaction</code>.
                  type: string
                  enum:
                    - COMPACTION
                    - GARBAGE_COLLECTION
                    - ALL
                MaxResults:
                  description: The number of storage optimizers to return on each call.
                  type: integer
                  minimum: 1
                  maximum: 1000
                NextToken:
                  description: A continuation token, if this is a continuation call.
                  type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /ListTransactions:
    post:
      operationId: ListTransactions
      description: <p>Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned.</p> <p>This operation can help you identify uncommitted transactions or to get information about transactions.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTransactionsResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                CatalogId:
                  description: The catalog for which to list transactions. Defaults to the account ID of the caller.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                StatusFilter:
                  description: " A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>."
                  type: string
                  enum:
                    - ALL
                    - COMPLETED
                    - ACTIVE
                    - COMMITTED
                    - ABORTED
                MaxResults:
                  description: The maximum number of transactions to return in a single call.
                  type: integer
                  minimum: 1
                  maximum: 1000
                NextToken:
                  description: A continuation token if this is not the first call to retrieve transactions.
                  type: string
                  maxLength: 4096
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /PutDataLakeSettings:
    post:
      operationId: PutDataLakeSettings
      description: <p>Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/lake-formation-permissions.html">Granting Lake Formation Permissions</a>.</p> <p>This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutDataLakeSettingsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DataLakeSettings
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                DataLakeSettings:
                  description: A structure representing a list of Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions.
                  type: object
                  properties:
                    DataLakeAdmins:
                      allOf:
                        - $ref: "#/components/schemas/DataLakePrincipalList"
                        - description: A list of Lake Formation principals. Supported principals are IAM users or IAM roles.
                    CreateDatabaseDefaultPermissions:
                      allOf:
                        - $ref: "#/components/schemas/PrincipalPermissionsList"
                        - description: <p>Specifies whether access control on newly created database is managed by Lake Formation permissions or exclusively by IAM permissions.</p> <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p> <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
                    CreateTableDefaultPermissions:
                      allOf:
                        - $ref: "#/components/schemas/PrincipalPermissionsList"
                        - description: <p>Specifies whether access control on newly created table is managed by Lake Formation permissions or exclusively by IAM permissions.</p> <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p> <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
                    Parameters:
                      allOf:
                        - $ref: "#/components/schemas/ParametersMap"
                        - description: A key-value map that provides an additional configuration on your data lake. CrossAccountVersion is the key you can configure in the Parameters field. Accepted values for the CrossAccountVersion key are 1, 2, and 3.
                    TrustedResourceOwners:
                      allOf:
                        - $ref: "#/components/schemas/TrustedResourceOwners"
                        - description: <p>A list of the resource-owning account IDs that the caller's account can use to share their user access details (user ARNs). The user ARNs can be logged in the resource owner's CloudTrail log.</p> <p>You may want to specify this property when you are in a high-trust boundary, such as the same team or company. </p>
                    AllowExternalDataFiltering:
                      allOf:
                        - $ref: "#/components/schemas/NullableBoolean"
                        - description: <p>Whether to allow Amazon EMR clusters to access data managed by Lake Formation. </p> <p>If true, you allow Amazon EMR clusters to access data in Amazon S3 locations that are registered with Lake Formation.</p> <p>If false or null, no Amazon EMR clusters will be able to access data in Amazon S3 locations that are registered with Lake Formation.</p> <p>For more information, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/getting-started-setup.html#emr-switch">(Optional) Allow Data Filtering on Amazon EMR</a>.</p>
                    ExternalDataFilteringAllowList:
                      allOf:
                        - $ref: "#/components/schemas/DataLakePrincipalList"
                        - description: A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.&gt;
                    AuthorizedSessionTagValueList:
                      allOf:
                        - $ref: "#/components/schemas/AuthorizedSessionTagValueList"
                        - description: Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it. Lake Formation will publish the acceptable key-value pair, for example key = "LakeFormationTrustedCaller" and value = "TRUE" and the third party integrator must properly tag the temporary security credentials that will be used to call Lake Formation's administrative APIs.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /RegisterResource:
    post:
      operationId: RegisterResource
      description: <p>Registers the resource as managed by the Data Catalog.</p> <p>To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy.</p> <p>The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.</p> <p> <code>ResourceArn = arn:aws:s3:::my-bucket UseServiceLinkedRole = true</code> </p> <p>If <code>UseServiceLinkedRole</code> is not set to true, you must provide or set the <code>RoleArn</code>:</p> <p> <code>arn:aws:iam::12345:role/my-data-access-role</code> </p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: AlreadyExistsException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlreadyExistsException"
        "484":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "485":
          description: ResourceNumberLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNumberLimitExceededException"
        "486":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ResourceArn
              properties:
                ResourceArn:
                  description: The Amazon Resource Name (ARN) of the resource that you want to register.
                  type: string
                UseServiceLinkedRole:
                  description: <p>Designates an Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog. A service-linked role is a unique type of IAM role that is linked directly to Lake Formation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/service-linked-roles.html">Using Service-Linked Roles for Lake Formation</a>.</p>
                  type: boolean
                RoleArn:
                  description: The identifier for the role that registers the resource.
                  type: string
                  pattern: arn:aws:iam::[0-9]*:role/.*
                WithFederation:
                  description: Whether or not the resource is a federated resource.
                  type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /RemoveLFTagsFromResource:
    post:
      operationId: RemoveLFTagsFromResource
      description: Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in <code>tableWithColumns</code> to specify column input.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemoveLFTagsFromResourceResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "486":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Resource
                - LFTags
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Resource:
                  description: A structure for the resource.
                  type: object
                  properties:
                    Catalog:
                      allOf:
                        - $ref: "#/components/schemas/CatalogResource"
                        - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                    Database:
                      allOf:
                        - $ref: "#/components/schemas/DatabaseResource"
                        - description: "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. "
                    Table:
                      allOf:
                        - $ref: "#/components/schemas/TableResource"
                        - description: "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
                    TableWithColumns:
                      allOf:
                        - $ref: "#/components/schemas/TableWithColumnsResource"
                        - description: The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
                    DataLocation:
                      allOf:
                        - $ref: "#/components/schemas/DataLocationResource"
                        - description: "The location of an Amazon S3 path where permissions are granted or revoked. "
                    DataCellsFilter:
                      allOf:
                        - $ref: "#/components/schemas/DataCellsFilterResource"
                        - description: A data cell filter.
                    LFTag:
                      allOf:
                        - $ref: "#/components/schemas/LFTagKeyResource"
                        - description: The LF-tag key and values attached to a resource.
                    LFTagPolicy:
                      allOf:
                        - $ref: "#/components/schemas/LFTagPolicyResource"
                        - description: A list of LF-tag conditions that define a resource's LF-tag policy.
                LFTags:
                  description: The LF-tags to be removed from the resource.
                  type: array
                  items:
                    $ref: "#/components/schemas/LFTagPair"
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /RevokePermissions:
    post:
      operationId: RevokePermissions
      description: Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevokePermissionsResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Principal
                - Resource
                - Permissions
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Principal:
                  description: The Lake Formation principal. Supported principals are IAM users or IAM roles.
                  type: object
                  properties:
                    DataLakePrincipalIdentifier:
                      allOf:
                        - $ref: "#/components/schemas/DataLakePrincipalString"
                        - description: An identifier for the Lake Formation principal.
                Resource:
                  description: A structure for the resource.
                  type: object
                  properties:
                    Catalog:
                      allOf:
                        - $ref: "#/components/schemas/CatalogResource"
                        - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                    Database:
                      allOf:
                        - $ref: "#/components/schemas/DatabaseResource"
                        - description: "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. "
                    Table:
                      allOf:
                        - $ref: "#/components/schemas/TableResource"
                        - description: "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
                    TableWithColumns:
                      allOf:
                        - $ref: "#/components/schemas/TableWithColumnsResource"
                        - description: The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
                    DataLocation:
                      allOf:
                        - $ref: "#/components/schemas/DataLocationResource"
                        - description: "The location of an Amazon S3 path where permissions are granted or revoked. "
                    DataCellsFilter:
                      allOf:
                        - $ref: "#/components/schemas/DataCellsFilterResource"
                        - description: A data cell filter.
                    LFTag:
                      allOf:
                        - $ref: "#/components/schemas/LFTagKeyResource"
                        - description: The LF-tag key and values attached to a resource.
                    LFTagPolicy:
                      allOf:
                        - $ref: "#/components/schemas/LFTagPolicyResource"
                        - description: A list of LF-tag conditions that define a resource's LF-tag policy.
                Permissions:
                  description: The permissions revoked to the principal on the resource. For information about permissions, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data</a>.
                  type: array
                  items:
                    $ref: "#/components/schemas/Permission"
                PermissionsWithGrantOption:
                  description: Indicates a list of permissions for which to revoke the grant option allowing the principal to pass permissions to other principals.
                  type: array
                  items:
                    $ref: "#/components/schemas/Permission"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /SearchDatabasesByLFTags:
    post:
      operationId: SearchDatabasesByLFTags
      description: This operation allows a search on <code>DATABASE</code> resources by <code>TagCondition</code>. This operation is used by admins who want to grant user permissions on certain <code>TagConditions</code>. Before making a grant, the admin can use <code>SearchDatabasesByTags</code> to find all resources where the given <code>TagConditions</code> are valid to verify whether the returned resources can be shared.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchDatabasesByLFTagsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Expression
              properties:
                NextToken:
                  description: A continuation token, if this is not the first call to retrieve this list.
                  type: string
                MaxResults:
                  description: The maximum number of results to return.
                  type: integer
                  minimum: 1
                  maximum: 100
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Expression:
                  description: A list of conditions (<code>LFTag</code> structures) to search for in database resources.
                  type: array
                  items:
                    $ref: "#/components/schemas/LFTag"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /SearchTablesByLFTags:
    post:
      operationId: SearchTablesByLFTags
      description: This operation allows a search on <code>TABLE</code> resources by <code>LFTag</code>s. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use <code>SearchTablesByLFTags</code> to find all resources where the given <code>LFTag</code>s are valid to verify whether the returned resources can be shared.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchTablesByLFTagsResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: GlueEncryptionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlueEncryptionException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Expression
              properties:
                NextToken:
                  description: A continuation token, if this is not the first call to retrieve this list.
                  type: string
                MaxResults:
                  description: The maximum number of results to return.
                  type: integer
                  minimum: 1
                  maximum: 100
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                Expression:
                  description: A list of conditions (<code>LFTag</code> structures) to search for in table resources.
                  type: array
                  items:
                    $ref: "#/components/schemas/LFTag"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /StartQueryPlanning:
    post:
      operationId: StartQueryPlanning
      description: <p>Submits a request to process a query statement.</p> <p>This operation generates work units that can be retrieved with the <code>GetWorkUnits</code> operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartQueryPlanningResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ThrottledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottledException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - QueryPlanningContext
                - QueryString
              properties:
                QueryPlanningContext:
                  description: A structure containing information about the query plan.
                  type: object
                  properties:
                    CatalogId:
                      allOf:
                        - $ref: "#/components/schemas/CatalogIdString"
                        - description: The ID of the Data Catalog where the partition in question resides. If none is provided, the Amazon Web Services account ID is used by default.
                    DatabaseName:
                      allOf:
                        - $ref: "#/components/schemas/QueryPlanningContextDatabaseNameString"
                        - description: The database containing the table.
                    QueryAsOfTime:
                      allOf:
                        - $ref: "#/components/schemas/Timestamp"
                        - description: The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.
                    QueryParameters:
                      allOf:
                        - $ref: "#/components/schemas/QueryParameterMap"
                        - description: A map consisting of key-value pairs.
                    TransactionId:
                      allOf:
                        - $ref: "#/components/schemas/TransactionIdString"
                        - description: The transaction ID at which to read the table contents. If this transaction is not committed, the read will be treated as part of that transaction and will see its writes. If this transaction has aborted, an error will be returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.
                QueryString:
                  description: A PartiQL query statement used as an input to the planner service.
                  type: string
                  minLength: 1
                  format: password
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /StartTransaction:
    post:
      operationId: StartTransaction
      description: Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartTransactionResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TransactionType:
                  description: "Indicates whether this transaction should be read only or read and write. Writes made using a read-only transaction ID will be rejected. Read-only transactions do not need to be committed. "
                  type: string
                  enum:
                    - READ_AND_WRITE
                    - READ_ONLY
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /UpdateDataCellsFilter:
    post:
      operationId: UpdateDataCellsFilter
      description: Updates a data cell filter.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDataCellsFilterResponse"
        "480":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "484":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TableData
              properties:
                TableData:
                  description: A structure that describes certain columns on certain rows.
                  type: object
                  properties:
                    TableCatalogId:
                      allOf:
                        - $ref: "#/components/schemas/CatalogIdString"
                        - description: The ID of the catalog to which the table belongs.
                    DatabaseName:
                      allOf:
                        - $ref: "#/components/schemas/NameString"
                        - description: A database in the Glue Data Catalog.
                    TableName:
                      allOf:
                        - $ref: "#/components/schemas/NameString"
                        - description: A table in the database.
                    Name:
                      allOf:
                        - $ref: "#/components/schemas/NameString"
                        - description: The name given by the user to the data filter cell.
                    RowFilter:
                      allOf:
                        - $ref: "#/components/schemas/RowFilter"
                        - description: A PartiQL predicate.
                    ColumnNames:
                      allOf:
                        - $ref: "#/components/schemas/ColumnNames"
                        - description: A list of column names.
                    ColumnWildcard:
                      allOf:
                        - $ref: "#/components/schemas/ColumnWildcard"
                        - description: <p>A wildcard with exclusions.</p> <p>You must specify either a <code>ColumnNames</code> list or the <code>ColumnWildCard</code>. </p>
                    VersionId:
                      allOf:
                        - $ref: "#/components/schemas/VersionString"
                        - description: The ID of the data cells filter version.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /UpdateLFTag:
    post:
      operationId: UpdateLFTag
      description: "Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - \"Update not allowed\". Untag the attribute before deleting the LF-tag key's value. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateLFTagResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "483":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "484":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
        "485":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - TagKey
              properties:
                CatalogId:
                  description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TagKey:
                  description: The key-name for the LF-tag for which to add or delete values.
                  type: string
                  pattern: ^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$
                  minLength: 1
                  maxLength: 128
                TagValuesToDelete:
                  description: A list of LF-tag values to delete from the LF-tag.
                  type: array
                  items:
                    $ref: "#/components/schemas/LFTagValue"
                  minItems: 1
                  maxItems: 50
                TagValuesToAdd:
                  description: A list of LF-tag values to add from the LF-tag.
                  type: array
                  items:
                    $ref: "#/components/schemas/LFTagValue"
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /UpdateResource:
    post:
      operationId: UpdateResource
      description: "Updates the data access role used for vending access to the given (registered) resource in Lake Formation. "
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResourceResponse"
        "480":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "481":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - RoleArn
                - ResourceArn
              properties:
                RoleArn:
                  description: The new role to use for the given resource registered in Lake Formation.
                  type: string
                  pattern: arn:aws:iam::[0-9]*:role/.*
                ResourceArn:
                  description: The resource ARN.
                  type: string
                WithFederation:
                  description: Whether or not the resource is a federated resource.
                  type: boolean
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /UpdateTableObjects:
    post:
      operationId: UpdateTableObjects
      description: Updates the manifest of Amazon S3 objects that make up the specified governed table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTableObjectsResponse"
        "480":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: OperationTimeoutException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationTimeoutException"
        "483":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "484":
          description: TransactionCommittedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCommittedException"
        "485":
          description: TransactionCanceledException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCanceledException"
        "486":
          description: TransactionCommitInProgressException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCommitInProgressException"
        "487":
          description: ResourceNotReadyException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotReadyException"
        "488":
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConcurrentModificationException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DatabaseName
                - TableName
                - WriteOperations
              properties:
                CatalogId:
                  description: The catalog containing the governed table to update. Defaults to the callerâ€™s account ID.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                DatabaseName:
                  description: The database containing the governed table to update.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TableName:
                  description: The governed table to update.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TransactionId:
                  description: The transaction at which to do the write.
                  type: string
                  pattern: "[\\p{L}\\p{N}\\p{P}]*"
                  minLength: 1
                  maxLength: 255
                WriteOperations:
                  description: A list of <code>WriteOperation</code> objects that define an object to add to or delete from the manifest for a governed table.
                  type: array
                  items:
                    $ref: "#/components/schemas/WriteOperation"
                  minItems: 1
                  maxItems: 100
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /UpdateTableStorageOptimizer:
    post:
      operationId: UpdateTableStorageOptimizer
      description: Updates the configuration of the storage optimizers for a table.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTableStorageOptimizerResponse"
        "480":
          description: EntityNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNotFoundException"
        "481":
          description: InvalidInputException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: InternalServiceException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServiceException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DatabaseName
                - TableName
                - StorageOptimizerConfig
              properties:
                CatalogId:
                  description: The Catalog ID of the table.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                DatabaseName:
                  description: Name of the database where the table is present.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                TableName:
                  description: Name of the table for which to enable the storage optimizer.
                  type: string
                  minLength: 1
                  maxLength: 255
                  x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
                StorageOptimizerConfig:
                  description: Name of the table for which to enable the storage optimizer.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/StorageOptimizerConfig"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddLFTagsToResourceResponse:
      type: object
      properties:
        Failures:
          allOf:
            - $ref: "#/components/schemas/LFTagErrors"
            - description: A list of failures to tag the resource.
    CatalogResource:
      type: object
      properties: {}
      description: A structure for the catalog object.
    DatabaseResource:
      type: object
      required:
        - Name
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The identifier for the Data Catalog. By default, it is the account ID of the caller.
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the database resource. Unique to the Data Catalog.
      description: A structure for the database object.
    TableResource:
      type: object
      required:
        - DatabaseName
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The identifier for the Data Catalog. By default, it is the account ID of the caller.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: "The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal. "
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the table.
        TableWildcard:
          allOf:
            - $ref: "#/components/schemas/TableWildcard"
            - description: <p>A wildcard object representing every table under a database.</p> <p>At least one of <code>TableResource$Name</code> or <code>TableResource$TableWildcard</code> is required.</p>
      description: "A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
    TableWithColumnsResource:
      type: object
      required:
        - DatabaseName
        - Name
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The identifier for the Data Catalog. By default, it is the account ID of the caller.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: "The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal. "
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: "The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
        ColumnNames:
          allOf:
            - $ref: "#/components/schemas/ColumnNames"
            - description: The list of column names for the table. At least one of <code>ColumnNames</code> or <code>ColumnWildcard</code> is required.
        ColumnWildcard:
          allOf:
            - $ref: "#/components/schemas/ColumnWildcard"
            - description: A wildcard specified by a <code>ColumnWildcard</code> object. At least one of <code>ColumnNames</code> or <code>ColumnWildcard</code> is required.
      description: <p>A structure for a table with columns object. This object is only used when granting a SELECT permission.</p> <p>This object must take a value for at least one of <code>ColumnsNames</code>, <code>ColumnsIndexes</code>, or <code>ColumnsWildcard</code>.</p>
    DataLocationResource:
      type: object
      required:
        - ResourceArn
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
        ResourceArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The Amazon Resource Name (ARN) that uniquely identifies the data location resource.
      description: "A structure for a data location object where permissions are granted or revoked. "
    DataCellsFilterResource:
      type: object
      properties:
        TableCatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The ID of the catalog to which the table belongs.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: A database in the Glue Data Catalog.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the table.
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: "The name of the data cells filter. "
      description: "A structure for a data cells filter resource. "
    LFTagKeyResource:
      type: object
      required:
        - TagKey
        - TagValues
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        TagKey:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The key-name for the LF-tag.
        TagValues:
          allOf:
            - $ref: "#/components/schemas/TagValueList"
            - description: A list of possible values an attribute can take.
      description: A structure containing an LF-tag key and values for a resource.
    LFTagPolicyResource:
      type: object
      required:
        - ResourceType
        - Expression
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        ResourceType:
          allOf:
            - $ref: "#/components/schemas/ResourceType"
            - description: The resource type for which the LF-tag policy applies.
        Expression:
          allOf:
            - $ref: "#/components/schemas/Expression"
            - description: A list of LF-tag conditions that apply to the resource's LF-tag policy.
      description: A structure containing a list of LF-tag conditions that apply to a resource's LF-tag policy.
    LFTagPair:
      type: object
      required:
        - TagKey
        - TagValues
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        TagKey:
          allOf:
            - $ref: "#/components/schemas/LFTagKey"
            - description: The key-name for the LF-tag.
        TagValues:
          allOf:
            - $ref: "#/components/schemas/TagValueList"
            - description: A list of possible values an attribute can take.
      description: A structure containing an LF-tag key-value pair.
    EntityNotFoundException: {}
    InvalidInputException: {}
    InternalServiceException: {}
    OperationTimeoutException: {}
    AccessDeniedException: {}
    ConcurrentModificationException: {}
    AssumeDecoratedRoleWithSAMLResponse:
      type: object
      properties:
        AccessKeyId:
          allOf:
            - $ref: "#/components/schemas/AccessKeyIdString"
            - description: The access key ID for the temporary credentials. (The access key consists of an access key ID and a secret key).
        SecretAccessKey:
          allOf:
            - $ref: "#/components/schemas/SecretAccessKeyString"
            - description: The secret key for the temporary credentials. (The access key consists of an access key ID and a secret key).
        SessionToken:
          allOf:
            - $ref: "#/components/schemas/SessionTokenString"
            - description: The session token for the temporary credentials.
        Expiration:
          allOf:
            - $ref: "#/components/schemas/ExpirationTimestamp"
            - description: The date and time when the temporary credentials expire.
    BatchGrantPermissionsResponse:
      type: object
      properties:
        Failures:
          allOf:
            - $ref: "#/components/schemas/BatchPermissionsFailureList"
            - description: A list of failures to grant permissions to the resources.
    BatchPermissionsRequestEntry:
      type: object
      required:
        - Id
      properties:
        Id:
          allOf:
            - $ref: "#/components/schemas/Identifier"
            - description: A unique identifier for the batch permissions request entry.
        Principal:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipal"
            - description: The principal to be granted a permission.
        Resource:
          allOf:
            - $ref: "#/components/schemas/Resource"
            - description: The resource to which the principal is to be granted a permission.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: The permissions to be granted.
        PermissionsWithGrantOption:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: Indicates if the option to pass permissions is granted.
      description: A permission to a resource granted by batch operation to the principal.
    BatchRevokePermissionsResponse:
      type: object
      properties:
        Failures:
          allOf:
            - $ref: "#/components/schemas/BatchPermissionsFailureList"
            - description: A list of failures to revoke permissions to the resources.
    CancelTransactionResponse:
      type: object
      properties: {}
    TransactionCommittedException: {}
    TransactionCommitInProgressException: {}
    CommitTransactionResponse:
      type: object
      properties:
        TransactionStatus:
          allOf:
            - $ref: "#/components/schemas/TransactionStatus"
            - description: The status of the transaction.
    TransactionCanceledException: {}
    CreateDataCellsFilterResponse:
      type: object
      properties: {}
    CatalogIdString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    NameString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    RowFilter:
      type: object
      properties:
        FilterExpression:
          allOf:
            - $ref: "#/components/schemas/PredicateString"
            - description: A filter expression.
        AllRowsWildcard:
          allOf:
            - $ref: "#/components/schemas/AllRowsWildcard"
            - description: A wildcard for all rows.
      description: A PartiQL predicate.
    ColumnNames:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    ColumnWildcard:
      type: object
      properties:
        ExcludedColumnNames:
          allOf:
            - $ref: "#/components/schemas/ColumnNames"
            - description: Excludes column names. Any column with this name will be excluded.
      description: A wildcard object, consisting of an optional list of excluded column names or indexes.
    VersionString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    AlreadyExistsException: {}
    ResourceNumberLimitExceededException: {}
    CreateLFTagResponse:
      type: object
      properties: {}
    LFTagValue:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:\*\/=+\-@%]*)$
      minLength: 0
      maxLength: 256
    DeleteDataCellsFilterResponse:
      type: object
      properties: {}
    DeleteLFTagResponse:
      type: object
      properties: {}
    DeleteObjectsOnCancelResponse:
      type: object
      properties: {}
    VirtualObject:
      type: object
      required:
        - Uri
      properties:
        Uri:
          allOf:
            - $ref: "#/components/schemas/URI"
            - description: The path to the Amazon S3 object. Must start with s3://
        ETag:
          allOf:
            - $ref: "#/components/schemas/ETagString"
            - description: The ETag of the Amazon S3 object.
      description: An object that defines an Amazon S3 object to be deleted if a transaction cancels, provided that <code>VirtualPut</code> was called before writing the object.
    ResourceNotReadyException: {}
    DeregisterResourceResponse:
      type: object
      properties: {}
    DescribeResourceResponse:
      type: object
      properties:
        ResourceInfo:
          allOf:
            - $ref: "#/components/schemas/ResourceInfo"
            - description: A structure containing information about an Lake Formation resource.
    DescribeTransactionResponse:
      type: object
      properties:
        TransactionDescription:
          allOf:
            - $ref: "#/components/schemas/TransactionDescription"
            - description: Returns a <code>TransactionDescription</code> object containing information about the transaction.
    ExtendTransactionResponse:
      type: object
      properties: {}
    GetDataCellsFilterResponse:
      type: object
      properties:
        DataCellsFilter:
          allOf:
            - $ref: "#/components/schemas/DataCellsFilter"
            - description: A structure that describes certain columns on certain rows.
    GetDataLakeSettingsResponse:
      type: object
      properties:
        DataLakeSettings:
          allOf:
            - $ref: "#/components/schemas/DataLakeSettings"
            - description: A structure representing a list of Lake Formation principals designated as data lake administrators.
    GetEffectivePermissionsForPathResponse:
      type: object
      properties:
        Permissions:
          allOf:
            - $ref: "#/components/schemas/PrincipalResourcePermissionsList"
            - description: A list of the permissions for the specified table or database resource located at the path in Amazon S3.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve this list.
    GetLFTagResponse:
      type: object
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        TagKey:
          allOf:
            - $ref: "#/components/schemas/LFTagKey"
            - description: The key-name for the LF-tag.
        TagValues:
          allOf:
            - $ref: "#/components/schemas/TagValueList"
            - description: A list of possible values an attribute can take.
    GetQueryStateResponse:
      type: object
      required:
        - State
      properties:
        Error:
          allOf:
            - $ref: "#/components/schemas/ErrorMessageString"
            - description: An error message when the operation fails.
        State:
          allOf:
            - $ref: "#/components/schemas/QueryStateString"
            - description: "<p>The state of a query previously submitted. The possible states are:</p> <ul> <li> <p>PENDING: the query is pending.</p> </li> <li> <p>WORKUNITS_AVAILABLE: some work units are ready for retrieval and execution.</p> </li> <li> <p>FINISHED: the query planning finished successfully, and all work units are ready for retrieval and execution.</p> </li> <li> <p>ERROR: an error occurred with the query, such as an invalid query ID or a backend error.</p> </li> </ul>"
      description: A structure for the output.
    GetQueryStatisticsResponse:
      type: object
      properties:
        ExecutionStatistics:
          allOf:
            - $ref: "#/components/schemas/ExecutionStatistics"
            - description: An <code>ExecutionStatistics</code> structure containing execution statistics.
        PlanningStatistics:
          allOf:
            - $ref: "#/components/schemas/PlanningStatistics"
            - description: A <code>PlanningStatistics</code> structure containing query planning statistics.
        QuerySubmissionTime:
          allOf:
            - $ref: "#/components/schemas/DateTime"
            - description: The time that the query was submitted.
    StatisticsNotReadyYetException: {}
    ExpiredException: {}
    ThrottledException: {}
    GetResourceLFTagsResponse:
      type: object
      properties:
        LFTagOnDatabase:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: A list of LF-tags applied to a database resource.
        LFTagsOnTable:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: A list of LF-tags applied to a table resource.
        LFTagsOnColumns:
          allOf:
            - $ref: "#/components/schemas/ColumnLFTagsList"
            - description: A list of LF-tags applied to a column resource.
    GlueEncryptionException: {}
    GetTableObjectsResponse:
      type: object
      properties:
        Objects:
          allOf:
            - $ref: "#/components/schemas/PartitionedTableObjectsList"
            - description: A list of objects organized by partition keys.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/TokenString"
            - description: A continuation token indicating whether additional data is available.
    GetTemporaryGluePartitionCredentialsResponse:
      type: object
      properties:
        AccessKeyId:
          allOf:
            - $ref: "#/components/schemas/AccessKeyIdString"
            - description: The access key ID for the temporary credentials.
        SecretAccessKey:
          allOf:
            - $ref: "#/components/schemas/SecretAccessKeyString"
            - description: The secret key for the temporary credentials.
        SessionToken:
          allOf:
            - $ref: "#/components/schemas/SessionTokenString"
            - description: The session token for the temporary credentials.
        Expiration:
          allOf:
            - $ref: "#/components/schemas/ExpirationTimestamp"
            - description: The date and time when the temporary credentials expire.
    ValueStringList:
      type: array
      items:
        $ref: "#/components/schemas/ValueString"
      minItems: 1
    Permission:
      type: string
      enum:
        - ALL
        - SELECT
        - ALTER
        - DROP
        - DELETE
        - INSERT
        - DESCRIBE
        - CREATE_DATABASE
        - CREATE_TABLE
        - DATA_LOCATION_ACCESS
        - CREATE_TAG
        - ASSOCIATE
    AuditContextString:
      type: string
      minLength: 0
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    PermissionType:
      type: string
      enum:
        - COLUMN_PERMISSION
        - CELL_FILTER_PERMISSION
    PermissionTypeMismatchException: {}
    GetTemporaryGlueTableCredentialsResponse:
      type: object
      properties:
        AccessKeyId:
          allOf:
            - $ref: "#/components/schemas/AccessKeyIdString"
            - description: The access key ID for the temporary credentials.
        SecretAccessKey:
          allOf:
            - $ref: "#/components/schemas/SecretAccessKeyString"
            - description: The secret key for the temporary credentials.
        SessionToken:
          allOf:
            - $ref: "#/components/schemas/SessionTokenString"
            - description: The session token for the temporary credentials.
        Expiration:
          allOf:
            - $ref: "#/components/schemas/ExpirationTimestamp"
            - description: The date and time when the temporary credentials expire.
    GetWorkUnitResultsResponse:
      type: object
      properties:
        ResultStream:
          allOf:
            - $ref: "#/components/schemas/ResultStream"
            - description: Rows returned from the <code>GetWorkUnitResults</code> operation as a stream of Apache Arrow v1.0 messages.
      description: A structure for the output.
    GetWorkUnitsResponse:
      type: object
      required:
        - QueryId
        - WorkUnitRanges
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
        QueryId:
          allOf:
            - $ref: "#/components/schemas/QueryIdString"
            - description: The ID of the plan query operation.
        WorkUnitRanges:
          allOf:
            - $ref: "#/components/schemas/WorkUnitRangeList"
            - description: A <code>WorkUnitRangeList</code> object that specifies the valid range of work unit IDs for querying the execution service.
      description: A structure for the output.
    WorkUnitsNotReadyYetException: {}
    GrantPermissionsResponse:
      type: object
      properties: {}
    DataLakePrincipalString:
      type: string
      minLength: 1
      maxLength: 255
    ListDataCellsFilterResponse:
      type: object
      properties:
        DataCellsFilters:
          allOf:
            - $ref: "#/components/schemas/DataCellsFilterList"
            - description: A list of <code>DataCellFilter</code> structures.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if not all requested data cell filters have been returned.
    TableWildcard:
      type: object
      properties: {}
      description: A wildcard object representing every table under a database.
    ListLFTagsResponse:
      type: object
      properties:
        LFTags:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: A list of LF-tags that the requested has permission to view.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, present if the current list segment is not the last.
    ListPermissionsResponse:
      type: object
      properties:
        PrincipalResourcePermissions:
          allOf:
            - $ref: "#/components/schemas/PrincipalResourcePermissionsList"
            - description: A list of principals and their permissions on the resource for the specified principal and resource types.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve this list.
    ListResourcesResponse:
      type: object
      properties:
        ResourceInfoList:
          allOf:
            - $ref: "#/components/schemas/ResourceInfoList"
            - description: A summary of the data lake resources.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve these resources.
    FilterCondition:
      type: object
      properties:
        Field:
          allOf:
            - $ref: "#/components/schemas/FieldNameString"
            - description: The field to filter in the filter condition.
        ComparisonOperator:
          allOf:
            - $ref: "#/components/schemas/ComparisonOperator"
            - description: The comparison operator used in the filter condition.
        StringValueList:
          allOf:
            - $ref: "#/components/schemas/StringValueList"
            - description: A string with values used in evaluating the filter condition.
      description: This structure describes the filtering of columns in a table based on a filter condition.
    ListTableStorageOptimizersResponse:
      type: object
      properties:
        StorageOptimizerList:
          allOf:
            - $ref: "#/components/schemas/StorageOptimizerList"
            - description: A list of the storage optimizers associated with a table.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.
    ListTransactionsResponse:
      type: object
      properties:
        Transactions:
          allOf:
            - $ref: "#/components/schemas/TransactionDescriptionList"
            - description: A list of transactions. The record for each transaction is a <code>TransactionDescription</code> object.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/TokenString"
            - description: A continuation token indicating whether additional data is available.
    PutDataLakeSettingsResponse:
      type: object
      properties: {}
    DataLakePrincipalList:
      type: array
      items:
        $ref: "#/components/schemas/DataLakePrincipal"
      minItems: 0
      maxItems: 30
    PrincipalPermissionsList:
      type: array
      items:
        $ref: "#/components/schemas/PrincipalPermissions"
    ParametersMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ParametersMapValue"
    TrustedResourceOwners:
      type: array
      items:
        $ref: "#/components/schemas/CatalogIdString"
    NullableBoolean:
      type: boolean
    AuthorizedSessionTagValueList:
      type: array
      items:
        $ref: "#/components/schemas/NameString"
    RegisterResourceResponse:
      type: object
      properties: {}
    RemoveLFTagsFromResourceResponse:
      type: object
      properties:
        Failures:
          allOf:
            - $ref: "#/components/schemas/LFTagErrors"
            - description: A list of failures to untag a resource.
    RevokePermissionsResponse:
      type: object
      properties: {}
    SearchDatabasesByLFTagsResponse:
      type: object
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, present if the current list segment is not the last.
        DatabaseList:
          allOf:
            - $ref: "#/components/schemas/DatabaseLFTagsList"
            - description: A list of databases that meet the LF-tag conditions.
    LFTag:
      type: object
      required:
        - TagKey
        - TagValues
      properties:
        TagKey:
          allOf:
            - $ref: "#/components/schemas/LFTagKey"
            - description: The key-name for the LF-tag.
        TagValues:
          allOf:
            - $ref: "#/components/schemas/TagValueList"
            - description: A list of possible values an attribute can take.
      description: A structure that allows an admin to grant user permissions on certain conditions. For example, granting a role access to all columns that do not have the LF-tag 'PII' in tables that have the LF-tag 'Prod'.
    SearchTablesByLFTagsResponse:
      type: object
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, present if the current list segment is not the last.
        TableList:
          allOf:
            - $ref: "#/components/schemas/TableLFTagsList"
            - description: A list of tables that meet the LF-tag conditions.
    StartQueryPlanningResponse:
      type: object
      required:
        - QueryId
      properties:
        QueryId:
          allOf:
            - $ref: "#/components/schemas/QueryIdString"
            - description: The ID of the plan query operation can be used to fetch the actual work unit descriptors that are produced as the result of the operation. The ID is also used to get the query state and as an input to the <code>Execute</code> operation.
      description: A structure for the output.
    QueryPlanningContextDatabaseNameString:
      type: string
      minLength: 1
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    Timestamp:
      type: string
      format: date-time
    QueryParameterMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/String"
    TransactionIdString:
      type: string
      pattern: "[\\p{L}\\p{N}\\p{P}]*"
      minLength: 1
      maxLength: 255
    StartTransactionResponse:
      type: object
      properties:
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: An opaque identifier for the transaction.
    UpdateDataCellsFilterResponse:
      type: object
      properties: {}
    UpdateLFTagResponse:
      type: object
      properties: {}
    UpdateResourceResponse:
      type: object
      properties: {}
    UpdateTableObjectsResponse:
      type: object
      properties: {}
    WriteOperation:
      type: object
      properties:
        AddObject:
          allOf:
            - $ref: "#/components/schemas/AddObjectInput"
            - description: A new object to add to the governed table.
        DeleteObject:
          allOf:
            - $ref: "#/components/schemas/DeleteObjectInput"
            - description: An object to delete from the governed table.
      description: Defines an object to add to or delete from a governed table.
    UpdateTableStorageOptimizerResponse:
      type: object
      properties:
        Result:
          allOf:
            - $ref: "#/components/schemas/Result"
            - description: A response indicating the success of failure of the operation.
    StorageOptimizerConfig:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StorageOptimizerConfigValue"
    AccessKeyIdString:
      type: string
    Resource:
      type: object
      properties:
        Catalog:
          allOf:
            - $ref: "#/components/schemas/CatalogResource"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Database:
          allOf:
            - $ref: "#/components/schemas/DatabaseResource"
            - description: "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal. "
        Table:
          allOf:
            - $ref: "#/components/schemas/TableResource"
            - description: "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal. "
        TableWithColumns:
          allOf:
            - $ref: "#/components/schemas/TableWithColumnsResource"
            - description: The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
        DataLocation:
          allOf:
            - $ref: "#/components/schemas/DataLocationResource"
            - description: "The location of an Amazon S3 path where permissions are granted or revoked. "
        DataCellsFilter:
          allOf:
            - $ref: "#/components/schemas/DataCellsFilterResource"
            - description: A data cell filter.
        LFTag:
          allOf:
            - $ref: "#/components/schemas/LFTagKeyResource"
            - description: The LF-tag key and values attached to a resource.
        LFTagPolicy:
          allOf:
            - $ref: "#/components/schemas/LFTagPolicyResource"
            - description: A list of LF-tag conditions that define a resource's LF-tag policy.
      description: A structure for the resource.
    LFTagsList:
      type: array
      items:
        $ref: "#/components/schemas/LFTagPair"
      minItems: 1
      maxItems: 50
    AddLFTagsToResourceRequest:
      type: object
      required:
        - Resource
        - LFTags
      title: AddLFTagsToResourceRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Resource:
          allOf:
            - $ref: "#/components/schemas/Resource"
            - description: The database, table, or column resource to which to attach an LF-tag.
        LFTags:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: The LF-tags to attach to the resource.
    LFTagErrors:
      type: array
      items:
        $ref: "#/components/schemas/LFTagError"
    URI:
      type: string
      minLength: 1
      maxLength: 1024
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    ETagString:
      type: string
      pattern: "[\\p{L}\\p{N}\\p{P}]*"
      minLength: 1
      maxLength: 255
    ObjectSize:
      type: integer
    PartitionValuesList:
      type: array
      items:
        $ref: "#/components/schemas/PartitionValueString"
      minItems: 1
      maxItems: 100
    AddObjectInput:
      type: object
      required:
        - Uri
        - ETag
        - Size
      properties:
        Uri:
          allOf:
            - $ref: "#/components/schemas/URI"
            - description: The Amazon S3 location of the object.
        ETag:
          allOf:
            - $ref: "#/components/schemas/ETagString"
            - description: The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.
        Size:
          allOf:
            - $ref: "#/components/schemas/ObjectSize"
            - description: The size of the Amazon S3 object in bytes.
        PartitionValues:
          allOf:
            - $ref: "#/components/schemas/PartitionValuesList"
            - description: <p>A list of partition values for the object. A value must be specified for each partition key associated with the table.</p> <p>The supported data types are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p>
      description: A new object to add to the governed table.
    AllRowsWildcard:
      type: object
      properties: {}
      description: "A structure that you pass to indicate you want all rows in a filter. "
    SAMLAssertionString:
      type: string
      minLength: 4
      maxLength: 100000
    IAMRoleArn:
      type: string
      pattern: arn:aws:iam::[0-9]*:role/.*
    IAMSAMLProviderArn:
      type: string
      pattern: arn:aws:iam::[0-9]*:saml-provider/.*
    CredentialTimeoutDurationSecondInteger:
      type: integer
      minimum: 900
      maximum: 43200
    AssumeDecoratedRoleWithSAMLRequest:
      type: object
      required:
        - SAMLAssertion
        - RoleArn
        - PrincipalArn
      title: AssumeDecoratedRoleWithSAMLRequest
      properties:
        SAMLAssertion:
          allOf:
            - $ref: "#/components/schemas/SAMLAssertionString"
            - description: A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.
        RoleArn:
          allOf:
            - $ref: "#/components/schemas/IAMRoleArn"
            - description: "The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as <code>GetTemporaryTableCredentials</code>. The caller must also have iam:PassRole permission on this role. "
        PrincipalArn:
          allOf:
            - $ref: "#/components/schemas/IAMSAMLProviderArn"
            - description: The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.
        DurationSeconds:
          allOf:
            - $ref: "#/components/schemas/CredentialTimeoutDurationSecondInteger"
            - description: The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.
    SecretAccessKeyString:
      type: string
    SessionTokenString:
      type: string
    ExpirationTimestamp:
      type: string
      format: date-time
    AuditContext:
      type: object
      properties:
        AdditionalAuditContext:
          allOf:
            - $ref: "#/components/schemas/AuditContextString"
            - description: The filter engine can populate the 'AdditionalAuditContext' information with the request ID for you to track. This information will be displayed in CloudTrail log in your account.
      description: "A structure used to include auditing information on the privileged API. "
    BatchPermissionsRequestEntryList:
      type: array
      items:
        $ref: "#/components/schemas/BatchPermissionsRequestEntry"
    BatchGrantPermissionsRequest:
      type: object
      required:
        - Entries
      title: BatchGrantPermissionsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Entries:
          allOf:
            - $ref: "#/components/schemas/BatchPermissionsRequestEntryList"
            - description: A list of up to 20 entries for resource permissions to be granted by batch operation to the principal.
    BatchPermissionsFailureList:
      type: array
      items:
        $ref: "#/components/schemas/BatchPermissionsFailureEntry"
    ErrorDetail:
      type: object
      properties:
        ErrorCode:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The code associated with this error.
        ErrorMessage:
          allOf:
            - $ref: "#/components/schemas/DescriptionString"
            - description: A message describing the error.
      description: Contains details about an error.
    BatchPermissionsFailureEntry:
      type: object
      properties:
        RequestEntry:
          allOf:
            - $ref: "#/components/schemas/BatchPermissionsRequestEntry"
            - description: An identifier for an entry of the batch request.
        Error:
          allOf:
            - $ref: "#/components/schemas/ErrorDetail"
            - description: An error message that applies to the failure of the entry.
      description: A list of failures when performing a batch grant or batch revoke operation.
    Identifier:
      type: string
      minLength: 1
      maxLength: 255
    DataLakePrincipal:
      type: object
      properties:
        DataLakePrincipalIdentifier:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipalString"
            - description: An identifier for the Lake Formation principal.
      description: The Lake Formation principal. Supported principals are IAM users or IAM roles.
    PermissionList:
      type: array
      items:
        $ref: "#/components/schemas/Permission"
    BatchRevokePermissionsRequest:
      type: object
      required:
        - Entries
      title: BatchRevokePermissionsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Entries:
          allOf:
            - $ref: "#/components/schemas/BatchPermissionsRequestEntryList"
            - description: A list of up to 20 entries for resource permissions to be revoked by batch operation to the principal.
    BooleanNullable:
      type: boolean
    CancelTransactionRequest:
      type: object
      required:
        - TransactionId
      title: CancelTransactionRequest
      properties:
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: The transaction to cancel.
    ColumnLFTag:
      type: object
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of a column resource.
        LFTags:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: The LF-tags attached to a column resource.
      description: A structure containing the name of a column resource and the LF-tags attached to it.
    ColumnLFTagsList:
      type: array
      items:
        $ref: "#/components/schemas/ColumnLFTag"
    CommitTransactionRequest:
      type: object
      required:
        - TransactionId
      title: CommitTransactionRequest
      properties:
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: The transaction to commit.
    TransactionStatus:
      type: string
      enum:
        - ACTIVE
        - COMMITTED
        - ABORTED
        - COMMIT_IN_PROGRESS
    ComparisonOperator:
      type: string
      enum:
        - EQ
        - NE
        - LE
        - LT
        - GE
        - GT
        - CONTAINS
        - NOT_CONTAINS
        - BEGINS_WITH
        - IN
        - BETWEEN
    DataCellsFilter:
      type: object
      required:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      properties:
        TableCatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The ID of the catalog to which the table belongs.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: A database in the Glue Data Catalog.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: A table in the database.
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name given by the user to the data filter cell.
        RowFilter:
          allOf:
            - $ref: "#/components/schemas/RowFilter"
            - description: A PartiQL predicate.
        ColumnNames:
          allOf:
            - $ref: "#/components/schemas/ColumnNames"
            - description: A list of column names.
        ColumnWildcard:
          allOf:
            - $ref: "#/components/schemas/ColumnWildcard"
            - description: <p>A wildcard with exclusions.</p> <p>You must specify either a <code>ColumnNames</code> list or the <code>ColumnWildCard</code>. </p>
        VersionId:
          allOf:
            - $ref: "#/components/schemas/VersionString"
            - description: The ID of the data cells filter version.
      description: A structure that describes certain columns on certain rows.
    CreateDataCellsFilterRequest:
      type: object
      required:
        - TableData
      title: CreateDataCellsFilterRequest
      properties:
        TableData:
          allOf:
            - $ref: "#/components/schemas/DataCellsFilter"
            - description: A <code>DataCellsFilter</code> structure containing information about the data cells filter.
    LFTagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$
      minLength: 1
      maxLength: 128
    TagValueList:
      type: array
      items:
        $ref: "#/components/schemas/LFTagValue"
      minItems: 1
      maxItems: 50
    CreateLFTagRequest:
      type: object
      required:
        - TagKey
        - TagValues
      title: CreateLFTagRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        TagKey:
          allOf:
            - $ref: "#/components/schemas/LFTagKey"
            - description: The key-name for the LF-tag.
        TagValues:
          allOf:
            - $ref: "#/components/schemas/TagValueList"
            - description: A list of possible values an attribute can take.
    DataCellsFilterList:
      type: array
      items:
        $ref: "#/components/schemas/DataCellsFilter"
    DataLakeResourceType:
      type: string
      enum:
        - CATALOG
        - DATABASE
        - TABLE
        - DATA_LOCATION
        - LF_TAG
        - LF_TAG_POLICY
        - LF_TAG_POLICY_DATABASE
        - LF_TAG_POLICY_TABLE
    DataLakeSettings:
      type: object
      properties:
        DataLakeAdmins:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipalList"
            - description: A list of Lake Formation principals. Supported principals are IAM users or IAM roles.
        CreateDatabaseDefaultPermissions:
          allOf:
            - $ref: "#/components/schemas/PrincipalPermissionsList"
            - description: <p>Specifies whether access control on newly created database is managed by Lake Formation permissions or exclusively by IAM permissions.</p> <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p> <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
        CreateTableDefaultPermissions:
          allOf:
            - $ref: "#/components/schemas/PrincipalPermissionsList"
            - description: <p>Specifies whether access control on newly created table is managed by Lake Formation permissions or exclusively by IAM permissions.</p> <p>A null value indicates access control by Lake Formation permissions. A value that assigns ALL to IAM_ALLOWED_PRINCIPALS indicates access control by IAM permissions. This is referred to as the setting "Use only IAM access control," and is for backward compatibility with the Glue permission model implemented by IAM permissions.</p> <p>The only permitted values are an empty array or an array that contains a single JSON object that grants ALL to IAM_ALLOWED_PRINCIPALS.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/change-settings.html">Changing the Default Security Settings for Your Data Lake</a>.</p>
        Parameters:
          allOf:
            - $ref: "#/components/schemas/ParametersMap"
            - description: A key-value map that provides an additional configuration on your data lake. CrossAccountVersion is the key you can configure in the Parameters field. Accepted values for the CrossAccountVersion key are 1, 2, and 3.
        TrustedResourceOwners:
          allOf:
            - $ref: "#/components/schemas/TrustedResourceOwners"
            - description: <p>A list of the resource-owning account IDs that the caller's account can use to share their user access details (user ARNs). The user ARNs can be logged in the resource owner's CloudTrail log.</p> <p>You may want to specify this property when you are in a high-trust boundary, such as the same team or company. </p>
        AllowExternalDataFiltering:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: <p>Whether to allow Amazon EMR clusters to access data managed by Lake Formation. </p> <p>If true, you allow Amazon EMR clusters to access data in Amazon S3 locations that are registered with Lake Formation.</p> <p>If false or null, no Amazon EMR clusters will be able to access data in Amazon S3 locations that are registered with Lake Formation.</p> <p>For more information, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/getting-started-setup.html#emr-switch">(Optional) Allow Data Filtering on Amazon EMR</a>.</p>
        ExternalDataFilteringAllowList:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipalList"
            - description: A list of the account IDs of Amazon Web Services accounts with Amazon EMR clusters that are to perform data filtering.&gt;
        AuthorizedSessionTagValueList:
          allOf:
            - $ref: "#/components/schemas/AuthorizedSessionTagValueList"
            - description: Lake Formation relies on a privileged process secured by Amazon EMR or the third party integrator to tag the user's role while assuming it. Lake Formation will publish the acceptable key-value pair, for example key = "LakeFormationTrustedCaller" and value = "TRUE" and the third party integrator must properly tag the temporary security credentials that will be used to call Lake Formation's administrative APIs.
      description: A structure representing a list of Lake Formation principals designated as data lake administrators and lists of principal permission entries for default create database and default create table permissions.
    ResourceArnString:
      type: string
    TaggedDatabase:
      type: object
      properties:
        Database:
          allOf:
            - $ref: "#/components/schemas/DatabaseResource"
            - description: A database that has LF-tags attached to it.
        LFTags:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: A list of LF-tags attached to the database.
      description: A structure describing a database resource with LF-tags.
    DatabaseLFTagsList:
      type: array
      items:
        $ref: "#/components/schemas/TaggedDatabase"
    DateTime:
      type: string
      format: date-time
    DeleteDataCellsFilterRequest:
      type: object
      title: DeleteDataCellsFilterRequest
      properties:
        TableCatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The ID of the catalog to which the table belongs.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: A database in the Glue Data Catalog.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: A table in the database.
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name given by the user to the data filter cell.
    DeleteLFTagRequest:
      type: object
      required:
        - TagKey
      title: DeleteLFTagRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        TagKey:
          allOf:
            - $ref: "#/components/schemas/LFTagKey"
            - description: The key-name for the LF-tag to delete.
    DeleteObjectInput:
      type: object
      required:
        - Uri
      properties:
        Uri:
          allOf:
            - $ref: "#/components/schemas/URI"
            - description: The Amazon S3 location of the object to delete.
        ETag:
          allOf:
            - $ref: "#/components/schemas/ETagString"
            - description: The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.
        PartitionValues:
          allOf:
            - $ref: "#/components/schemas/PartitionValuesList"
            - description: A list of partition values for the object. A value must be specified for each partition key associated with the governed table.
      description: An object to delete from the governed table.
    VirtualObjectList:
      type: array
      items:
        $ref: "#/components/schemas/VirtualObject"
      minItems: 1
      maxItems: 100
    DeleteObjectsOnCancelRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - TransactionId
        - Objects
      title: DeleteObjectsOnCancelRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The Glue data catalog that contains the governed table. Defaults to the current account ID.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The database that contains the governed table.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name of the governed table.
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: ID of the transaction that the writes occur in.
        Objects:
          allOf:
            - $ref: "#/components/schemas/VirtualObjectList"
            - description: A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.
    DeregisterResourceRequest:
      type: object
      required:
        - ResourceArn
      title: DeregisterResourceRequest
      properties:
        ResourceArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The Amazon Resource Name (ARN) of the resource that you want to deregister.
    DescribeResourceRequest:
      type: object
      required:
        - ResourceArn
      title: DescribeResourceRequest
      properties:
        ResourceArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The resource ARN.
    ResourceInfo:
      type: object
      properties:
        ResourceArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The Amazon Resource Name (ARN) of the resource.
        RoleArn:
          allOf:
            - $ref: "#/components/schemas/IAMRoleArn"
            - description: The IAM role that registered a resource.
        LastModified:
          allOf:
            - $ref: "#/components/schemas/LastModifiedTimestamp"
            - description: The date and time the resource was last modified.
        WithFederation:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Whether or not the resource is a federated resource.
      description: A structure containing information about an Lake Formation resource.
    DescribeTransactionRequest:
      type: object
      required:
        - TransactionId
      title: DescribeTransactionRequest
      properties:
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: The transaction for which to return status.
    TransactionDescription:
      type: object
      properties:
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: The ID of the transaction.
        TransactionStatus:
          allOf:
            - $ref: "#/components/schemas/TransactionStatus"
            - description: A status of ACTIVE, COMMITTED, or ABORTED.
        TransactionStartTime:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The time when the transaction started.
        TransactionEndTime:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The time when the transaction committed or aborted, if it is not currently active.
      description: A structure that contains information about a transaction.
    DescriptionString:
      type: string
      minLength: 0
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    ResourceShareList:
      type: array
      items:
        $ref: "#/components/schemas/RAMResourceShareArn"
    DetailsMap:
      type: object
      properties:
        ResourceShare:
          allOf:
            - $ref: "#/components/schemas/ResourceShareList"
            - description: A resource share ARN for a catalog resource shared through RAM.
      description: <p>A structure containing the additional details to be returned in the <code>AdditionalDetails</code> attribute of <code>PrincipalResourcePermissions</code>.</p> <p>If a catalog resource is shared through Resource Access Manager (RAM), then there will exist a corresponding RAM resource share ARN.</p>
    ErrorMessageString:
      type: string
    NumberOfMilliseconds:
      type: integer
    NumberOfBytes:
      type: integer
    NumberOfItems:
      type: integer
    ExecutionStatistics:
      type: object
      properties:
        AverageExecutionTimeMillis:
          allOf:
            - $ref: "#/components/schemas/NumberOfMilliseconds"
            - description: The average time the request took to be executed.
        DataScannedBytes:
          allOf:
            - $ref: "#/components/schemas/NumberOfBytes"
            - description: The amount of data that was scanned in bytes.
        WorkUnitsExecutedCount:
          allOf:
            - $ref: "#/components/schemas/NumberOfItems"
            - description: The number of work units executed.
      description: Statistics related to the processing of a query statement.
    Expression:
      type: array
      items:
        $ref: "#/components/schemas/LFTag"
    ExtendTransactionRequest:
      type: object
      title: ExtendTransactionRequest
      properties:
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: The transaction to extend.
    FieldNameString:
      type: string
      enum:
        - RESOURCE_ARN
        - ROLE_ARN
        - LAST_MODIFIED
    StringValueList:
      type: array
      items:
        $ref: "#/components/schemas/StringValue"
    FilterConditionList:
      type: array
      items:
        $ref: "#/components/schemas/FilterCondition"
      minItems: 1
      maxItems: 20
    GetDataCellsFilterRequest:
      type: object
      required:
        - TableCatalogId
        - DatabaseName
        - TableName
        - Name
      title: GetDataCellsFilterRequest
      properties:
        TableCatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The ID of the catalog to which the table belongs.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: A database in the Glue Data Catalog.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: A table in the database.
        Name:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The name given by the user to the data filter cell.
    GetDataLakeSettingsRequest:
      type: object
      title: GetDataLakeSettingsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
    Token:
      type: string
    PageSize:
      type: integer
      minimum: 1
      maximum: 1000
    GetEffectivePermissionsForPathRequest:
      type: object
      required:
        - ResourceArn
      title: GetEffectivePermissionsForPathRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        ResourceArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The Amazon Resource Name (ARN) of the resource for which you want to get permissions.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve this list.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/PageSize"
            - description: The maximum number of results to return.
    PrincipalResourcePermissionsList:
      type: array
      items:
        $ref: "#/components/schemas/PrincipalResourcePermissions"
    GetLFTagRequest:
      type: object
      required:
        - TagKey
      title: GetLFTagRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        TagKey:
          allOf:
            - $ref: "#/components/schemas/LFTagKey"
            - description: The key-name for the LF-tag.
    GetQueryStateRequestQueryIdString:
      type: string
      minLength: 36
      maxLength: 36
    GetQueryStateRequest:
      type: object
      required:
        - QueryId
      title: GetQueryStateRequest
      properties:
        QueryId:
          allOf:
            - $ref: "#/components/schemas/GetQueryStateRequestQueryIdString"
            - description: The ID of the plan query operation.
    QueryStateString:
      type: string
      enum:
        - PENDING
        - WORKUNITS_AVAILABLE
        - ERROR
        - FINISHED
        - EXPIRED
    GetQueryStatisticsRequestQueryIdString:
      type: string
      minLength: 36
      maxLength: 36
    GetQueryStatisticsRequest:
      type: object
      required:
        - QueryId
      title: GetQueryStatisticsRequest
      properties:
        QueryId:
          allOf:
            - $ref: "#/components/schemas/GetQueryStatisticsRequestQueryIdString"
            - description: The ID of the plan query operation.
    PlanningStatistics:
      type: object
      properties:
        EstimatedDataToScanBytes:
          allOf:
            - $ref: "#/components/schemas/NumberOfBytes"
            - description: An estimate of the data that was scanned in bytes.
        PlanningTimeMillis:
          allOf:
            - $ref: "#/components/schemas/NumberOfMilliseconds"
            - description: The time that it took to process the request.
        QueueTimeMillis:
          allOf:
            - $ref: "#/components/schemas/NumberOfMilliseconds"
            - description: The time the request was in queue to be processed.
        WorkUnitsGeneratedCount:
          allOf:
            - $ref: "#/components/schemas/NumberOfItems"
            - description: The number of work units generated.
      description: Statistics related to the processing of a query statement.
    GetResourceLFTagsRequest:
      type: object
      required:
        - Resource
      title: GetResourceLFTagsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Resource:
          allOf:
            - $ref: "#/components/schemas/Resource"
            - description: The database, table, or column resource for which you want to return LF-tags.
        ShowAssignedLFTags:
          allOf:
            - $ref: "#/components/schemas/BooleanNullable"
            - description: Indicates whether to show the assigned LF-tags.
    PredicateString:
      type: string
      minLength: 0
      maxLength: 2048
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    TokenString:
      type: string
      maxLength: 4096
    GetTableObjectsRequest:
      type: object
      required:
        - DatabaseName
        - TableName
      title: GetTableObjectsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The catalog containing the governed table. Defaults to the callerâ€™s account.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The database containing the governed table.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The governed table for which to retrieve objects.
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.
        QueryAsOfTime:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with <code>TransactionId</code>.
        PartitionPredicate:
          allOf:
            - $ref: "#/components/schemas/PredicateString"
            - description: '<p>A predicate to filter the objects returned based on the partition keys defined in the governed table.</p> <ul> <li> <p>The comparison operators supported are: =, &gt;, &lt;, &gt;=, &lt;=</p> </li> <li> <p>The logical operators supported are: AND</p> </li> <li> <p>The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss"), string and decimal.</p> </li> </ul>'
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/PageSize"
            - description: Specifies how many values to return in a page.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/TokenString"
            - description: A continuation token if this is not the first call to retrieve these objects.
    PartitionedTableObjectsList:
      type: array
      items:
        $ref: "#/components/schemas/PartitionObjects"
    PartitionValueList:
      type: object
      required:
        - Values
      properties:
        Values:
          allOf:
            - $ref: "#/components/schemas/ValueStringList"
            - description: The list of partition values.
      description: Contains a list of values defining partitions.
    PermissionTypeList:
      type: array
      items:
        $ref: "#/components/schemas/PermissionType"
      minItems: 1
      maxItems: 255
    GetTemporaryGluePartitionCredentialsRequest:
      type: object
      required:
        - TableArn
        - Partition
        - SupportedPermissionTypes
      title: GetTemporaryGluePartitionCredentialsRequest
      properties:
        TableArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The ARN of the partitions' table.
        Partition:
          allOf:
            - $ref: "#/components/schemas/PartitionValueList"
            - description: A list of partition values identifying a single partition.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).
        DurationSeconds:
          allOf:
            - $ref: "#/components/schemas/CredentialTimeoutDurationSecondInteger"
            - description: The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.
        AuditContext:
          allOf:
            - $ref: "#/components/schemas/AuditContext"
            - description: A structure representing context to access a resource (column names, query ID, etc).
        SupportedPermissionTypes:
          allOf:
            - $ref: "#/components/schemas/PermissionTypeList"
            - description: A list of supported permission types for the partition. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.
    GetTemporaryGlueTableCredentialsRequest:
      type: object
      required:
        - TableArn
        - SupportedPermissionTypes
      title: GetTemporaryGlueTableCredentialsRequest
      properties:
        TableArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The ARN identifying a table in the Data Catalog for the temporary credentials request.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).
        DurationSeconds:
          allOf:
            - $ref: "#/components/schemas/CredentialTimeoutDurationSecondInteger"
            - description: The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.
        AuditContext:
          allOf:
            - $ref: "#/components/schemas/AuditContext"
            - description: A structure representing context to access a resource (column names, query ID, etc).
        SupportedPermissionTypes:
          allOf:
            - $ref: "#/components/schemas/PermissionTypeList"
            - description: A list of supported permission types for the table. Valid values are <code>COLUMN_PERMISSION</code> and <code>CELL_FILTER_PERMISSION</code>.
    GetWorkUnitResultsRequestQueryIdString:
      type: string
      minLength: 36
      maxLength: 36
    GetWorkUnitResultsRequestWorkUnitIdLong:
      type: integer
      minimum: 0
    SyntheticGetWorkUnitResultsRequestWorkUnitTokenString:
      type: string
      minLength: 1
      format: password
    GetWorkUnitResultsRequest:
      type: object
      required:
        - QueryId
        - WorkUnitId
        - WorkUnitToken
      title: GetWorkUnitResultsRequest
      properties:
        QueryId:
          allOf:
            - $ref: "#/components/schemas/GetWorkUnitResultsRequestQueryIdString"
            - description: The ID of the plan query operation for which to get results.
        WorkUnitId:
          allOf:
            - $ref: "#/components/schemas/GetWorkUnitResultsRequestWorkUnitIdLong"
            - description: The work unit ID for which to get results. Value generated by enumerating <code>WorkUnitIdMin</code> to <code>WorkUnitIdMax</code> (inclusive) from the <code>WorkUnitRange</code> in the output of <code>GetWorkUnits</code>.
        WorkUnitToken:
          allOf:
            - $ref: "#/components/schemas/SyntheticGetWorkUnitResultsRequestWorkUnitTokenString"
            - description: A work token used to query the execution service. Token output from <code>GetWorkUnits</code>.
    ResultStream:
      type: string
    Integer:
      type: integer
    GetWorkUnitsRequestQueryIdString:
      type: string
      minLength: 36
      maxLength: 36
    GetWorkUnitsRequest:
      type: object
      required:
        - QueryId
      title: GetWorkUnitsRequest
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is a continuation call.
        PageSize:
          allOf:
            - $ref: "#/components/schemas/Integer"
            - description: The size of each page to get in the Amazon Web Services service call. This does not affect the number of items returned in the command's output. Setting a smaller page size results in more calls to the Amazon Web Services service, retrieving fewer items in each call. This can help prevent the Amazon Web Services service calls from timing out.
        QueryId:
          allOf:
            - $ref: "#/components/schemas/GetWorkUnitsRequestQueryIdString"
            - description: The ID of the plan query operation.
    QueryIdString:
      type: string
    WorkUnitRangeList:
      type: array
      items:
        $ref: "#/components/schemas/WorkUnitRange"
    GrantPermissionsRequest:
      type: object
      required:
        - Principal
        - Resource
        - Permissions
      title: GrantPermissionsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Principal:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipal"
            - description: <p>The principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles, and they are defined by their principal type and their ARN.</p> <p>Note that if you define a resource with a particular ARN, then later delete, and recreate a resource with that same ARN, the resource maintains the permissions already granted. </p>
        Resource:
          allOf:
            - $ref: "#/components/schemas/Resource"
            - description: The resource to which permissions are to be granted. Resources in Lake Formation are the Data Catalog, databases, and tables.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: "The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. "
        PermissionsWithGrantOption:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the <code>Privileges</code>.
    KeyString:
      type: string
      minLength: 1
      maxLength: 255
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    LFTagError:
      type: object
      properties:
        LFTag:
          allOf:
            - $ref: "#/components/schemas/LFTagPair"
            - description: The key-name of the LF-tag.
        Error:
          allOf:
            - $ref: "#/components/schemas/ErrorDetail"
            - description: An error that occurred with the attachment or detachment of the LF-tag.
      description: A structure containing an error related to a <code>TagResource</code> or <code>UnTagResource</code> operation.
    ResourceType:
      type: string
      enum:
        - DATABASE
        - TABLE
    LastModifiedTimestamp:
      type: string
      format: date-time
    ListDataCellsFilterRequest:
      type: object
      title: ListDataCellsFilterRequest
      properties:
        Table:
          allOf:
            - $ref: "#/components/schemas/TableResource"
            - description: A table in the Glue Data Catalog.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is a continuation call.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/PageSize"
            - description: The maximum size of the response.
    ResourceShareType:
      type: string
      enum:
        - FOREIGN
        - ALL
    ListLFTagsRequest:
      type: object
      title: ListLFTagsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        ResourceShareType:
          allOf:
            - $ref: "#/components/schemas/ResourceShareType"
            - description: If resource share type is <code>ALL</code>, returns both in-account LF-tags and shared LF-tags that the requester has permission to view. If resource share type is <code>FOREIGN</code>, returns all share LF-tags that the requester can view. If no resource share type is passed, lists LF-tags in the given catalog ID that the requester has permission to view.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/PageSize"
            - description: The maximum number of results to return.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve this list.
    TrueFalseString:
      type: string
      minLength: 1
      maxLength: 5
      x-pattern: "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
    ListPermissionsRequest:
      type: object
      title: ListPermissionsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Principal:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipal"
            - description: Specifies a principal to filter the permissions returned.
        ResourceType:
          allOf:
            - $ref: "#/components/schemas/DataLakeResourceType"
            - description: Specifies a resource type to filter the permissions returned.
        Resource:
          allOf:
            - $ref: "#/components/schemas/Resource"
            - description: <p>A resource where you will get a list of the principal permissions.</p> <p>This operation does not support getting privileges on a table with columns. Instead, call this operation on the table, and the operation returns the table and the table w columns.</p>
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve this list.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/PageSize"
            - description: The maximum number of results to return.
        IncludeRelated:
          allOf:
            - $ref: "#/components/schemas/TrueFalseString"
            - description: Indicates that related permissions should be included in the results.
    ListResourcesRequest:
      type: object
      title: ListResourcesRequest
      properties:
        FilterConditionList:
          allOf:
            - $ref: "#/components/schemas/FilterConditionList"
            - description: Any applicable row-level and/or column-level filtering conditions for the resources.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/PageSize"
            - description: The maximum number of resource results.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve these resources.
    ResourceInfoList:
      type: array
      items:
        $ref: "#/components/schemas/ResourceInfo"
    OptimizerType:
      type: string
      enum:
        - COMPACTION
        - GARBAGE_COLLECTION
        - ALL
    ListTableStorageOptimizersRequest:
      type: object
      required:
        - DatabaseName
        - TableName
      title: ListTableStorageOptimizersRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The Catalog ID of the table.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: Name of the database where the table is present.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: Name of the table.
        StorageOptimizerType:
          allOf:
            - $ref: "#/components/schemas/OptimizerType"
            - description: The specific type of storage optimizers to list. The supported value is <code>compaction</code>.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/PageSize"
            - description: The number of storage optimizers to return on each call.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is a continuation call.
    StorageOptimizerList:
      type: array
      items:
        $ref: "#/components/schemas/StorageOptimizer"
    TransactionStatusFilter:
      type: string
      enum:
        - ALL
        - COMPLETED
        - ACTIVE
        - COMMITTED
        - ABORTED
    ListTransactionsRequest:
      type: object
      title: ListTransactionsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The catalog for which to list transactions. Defaults to the account ID of the caller.
        StatusFilter:
          allOf:
            - $ref: "#/components/schemas/TransactionStatusFilter"
            - description: " A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>."
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/PageSize"
            - description: The maximum number of transactions to return in a single call.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/TokenString"
            - description: A continuation token if this is not the first call to retrieve transactions.
    TransactionDescriptionList:
      type: array
      items:
        $ref: "#/components/schemas/TransactionDescription"
    MessageString:
      type: string
    ParametersMapValue:
      type: string
      maxLength: 512000
    TableObjectList:
      type: array
      items:
        $ref: "#/components/schemas/TableObject"
    PartitionObjects:
      type: object
      properties:
        PartitionValues:
          allOf:
            - $ref: "#/components/schemas/PartitionValuesList"
            - description: A list of partition values.
        Objects:
          allOf:
            - $ref: "#/components/schemas/TableObjectList"
            - description: A list of table objects
      description: A structure containing a list of partition values and table objects.
    PartitionValueString:
      type: string
      maxLength: 1024
    PrincipalPermissions:
      type: object
      properties:
        Principal:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipal"
            - description: The principal who is granted permissions.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: The permissions that are granted to the principal.
      description: Permissions granted to a principal.
    PrincipalResourcePermissions:
      type: object
      properties:
        Principal:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipal"
            - description: The Data Lake principal to be granted or revoked permissions.
        Resource:
          allOf:
            - $ref: "#/components/schemas/Resource"
            - description: The resource where permissions are to be granted or revoked.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: The permissions to be granted or revoked on the resource.
        PermissionsWithGrantOption:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: Indicates whether to grant the ability to grant permissions (as a subset of permissions granted).
        AdditionalDetails:
          allOf:
            - $ref: "#/components/schemas/DetailsMap"
            - description: This attribute can be used to return any additional details of <code>PrincipalResourcePermissions</code>. Currently returns only as a RAM resource share ARN.
      description: The permissions granted or revoked on a resource.
    PutDataLakeSettingsRequest:
      type: object
      required:
        - DataLakeSettings
      title: PutDataLakeSettingsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        DataLakeSettings:
          allOf:
            - $ref: "#/components/schemas/DataLakeSettings"
            - description: A structure representing a list of Lake Formation principals designated as data lake administrators.
    String:
      type: string
    QueryPlanningContext:
      type: object
      required:
        - DatabaseName
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The ID of the Data Catalog where the partition in question resides. If none is provided, the Amazon Web Services account ID is used by default.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/QueryPlanningContextDatabaseNameString"
            - description: The database containing the table.
        QueryAsOfTime:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.
        QueryParameters:
          allOf:
            - $ref: "#/components/schemas/QueryParameterMap"
            - description: A map consisting of key-value pairs.
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: The transaction ID at which to read the table contents. If this transaction is not committed, the read will be treated as part of that transaction and will see its writes. If this transaction has aborted, an error will be returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.
      description: A structure containing information about the query plan.
    RAMResourceShareArn:
      type: string
    RegisterResourceRequest:
      type: object
      required:
        - ResourceArn
      title: RegisterResourceRequest
      properties:
        ResourceArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The Amazon Resource Name (ARN) of the resource that you want to register.
        UseServiceLinkedRole:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: <p>Designates an Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog. A service-linked role is a unique type of IAM role that is linked directly to Lake Formation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/service-linked-roles.html">Using Service-Linked Roles for Lake Formation</a>.</p>
        RoleArn:
          allOf:
            - $ref: "#/components/schemas/IAMRoleArn"
            - description: The identifier for the role that registers the resource.
        WithFederation:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Whether or not the resource is a federated resource.
    RemoveLFTagsFromResourceRequest:
      type: object
      required:
        - Resource
        - LFTags
      title: RemoveLFTagsFromResourceRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Resource:
          allOf:
            - $ref: "#/components/schemas/Resource"
            - description: The database, table, or column resource where you want to remove an LF-tag.
        LFTags:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: The LF-tags to be removed from the resource.
    Result:
      type: string
    RevokePermissionsRequest:
      type: object
      required:
        - Principal
        - Resource
        - Permissions
      title: RevokePermissionsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Principal:
          allOf:
            - $ref: "#/components/schemas/DataLakePrincipal"
            - description: The principal to be revoked permissions on the resource.
        Resource:
          allOf:
            - $ref: "#/components/schemas/Resource"
            - description: The resource to which permissions are to be revoked.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: The permissions revoked to the principal on the resource. For information about permissions, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data</a>.
        PermissionsWithGrantOption:
          allOf:
            - $ref: "#/components/schemas/PermissionList"
            - description: Indicates a list of permissions for which to revoke the grant option allowing the principal to pass permissions to other principals.
    SearchPageSize:
      type: integer
      minimum: 1
      maximum: 100
    SearchDatabasesByLFTagsRequest:
      type: object
      required:
        - Expression
      title: SearchDatabasesByLFTagsRequest
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve this list.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/SearchPageSize"
            - description: The maximum number of results to return.
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Expression:
          allOf:
            - $ref: "#/components/schemas/Expression"
            - description: A list of conditions (<code>LFTag</code> structures) to search for in database resources.
    SearchTablesByLFTagsRequest:
      type: object
      required:
        - Expression
      title: SearchTablesByLFTagsRequest
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/Token"
            - description: A continuation token, if this is not the first call to retrieve this list.
        MaxResults:
          allOf:
            - $ref: "#/components/schemas/SearchPageSize"
            - description: The maximum number of results to return.
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        Expression:
          allOf:
            - $ref: "#/components/schemas/Expression"
            - description: A list of conditions (<code>LFTag</code> structures) to search for in table resources.
    TableLFTagsList:
      type: array
      items:
        $ref: "#/components/schemas/TaggedTable"
    SyntheticStartQueryPlanningRequestQueryString:
      type: string
      minLength: 1
      format: password
    StartQueryPlanningRequest:
      type: object
      required:
        - QueryPlanningContext
        - QueryString
      title: StartQueryPlanningRequest
      properties:
        QueryPlanningContext:
          allOf:
            - $ref: "#/components/schemas/QueryPlanningContext"
            - description: A structure containing information about the query plan.
        QueryString:
          allOf:
            - $ref: "#/components/schemas/SyntheticStartQueryPlanningRequestQueryString"
            - description: A PartiQL query statement used as an input to the planner service.
    TransactionType:
      type: string
      enum:
        - READ_AND_WRITE
        - READ_ONLY
    StartTransactionRequest:
      type: object
      title: StartTransactionRequest
      properties:
        TransactionType:
          allOf:
            - $ref: "#/components/schemas/TransactionType"
            - description: "Indicates whether this transaction should be read only or read and write. Writes made using a read-only transaction ID will be rejected. Read-only transactions do not need to be committed. "
    StorageOptimizer:
      type: object
      properties:
        StorageOptimizerType:
          allOf:
            - $ref: "#/components/schemas/OptimizerType"
            - description: The specific type of storage optimizer. The supported value is <code>compaction</code>.
        Config:
          allOf:
            - $ref: "#/components/schemas/StorageOptimizerConfig"
            - description: "A map of the storage optimizer configuration. Currently contains only one key-value pair: <code>is_enabled</code> indicates true or false for acceleration."
        ErrorMessage:
          allOf:
            - $ref: "#/components/schemas/MessageString"
            - description: <p>A message that contains information about any error (if present).</p> <p>When an acceleration result has an enabled status, the error message is empty.</p> <p>When an acceleration result has a disabled status, the message describes an error or simply indicates "disabled by the user".</p>
        Warnings:
          allOf:
            - $ref: "#/components/schemas/MessageString"
            - description: A message that contains information about any warnings (if present).
        LastRunDetails:
          allOf:
            - $ref: "#/components/schemas/MessageString"
            - description: When an acceleration result has an enabled status, contains the details of the last job run.
      description: A structure describing the configuration and details of a storage optimizer.
    StorageOptimizerConfigValue:
      type: string
    StorageOptimizerConfigKey:
      type: string
    StorageOptimizerConfigMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/StorageOptimizerConfig"
    StringValue:
      type: string
    TaggedTable:
      type: object
      properties:
        Table:
          allOf:
            - $ref: "#/components/schemas/TableResource"
            - description: A table that has LF-tags attached to it.
        LFTagOnDatabase:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: A list of LF-tags attached to the database where the table resides.
        LFTagsOnTable:
          allOf:
            - $ref: "#/components/schemas/LFTagsList"
            - description: A list of LF-tags attached to the table.
        LFTagsOnColumns:
          allOf:
            - $ref: "#/components/schemas/ColumnLFTagsList"
            - description: A list of LF-tags attached to columns in the table.
      description: A structure describing a table resource with LF-tags.
    TableObject:
      type: object
      properties:
        Uri:
          allOf:
            - $ref: "#/components/schemas/URI"
            - description: The Amazon S3 location of the object.
        ETag:
          allOf:
            - $ref: "#/components/schemas/ETagString"
            - description: The Amazon S3 ETag of the object. Returned by <code>GetTableObjects</code> for validation and used to identify changes to the underlying data.
        Size:
          allOf:
            - $ref: "#/components/schemas/ObjectSize"
            - description: The size of the Amazon S3 object in bytes.
      description: Specifies the details of a governed table.
    UpdateDataCellsFilterRequest:
      type: object
      required:
        - TableData
      title: UpdateDataCellsFilterRequest
      properties:
        TableData:
          allOf:
            - $ref: "#/components/schemas/DataCellsFilter"
            - description: A <code>DataCellsFilter</code> structure containing information about the data cells filter.
    UpdateLFTagRequest:
      type: object
      required:
        - TagKey
      title: UpdateLFTagRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. "
        TagKey:
          allOf:
            - $ref: "#/components/schemas/LFTagKey"
            - description: The key-name for the LF-tag for which to add or delete values.
        TagValuesToDelete:
          allOf:
            - $ref: "#/components/schemas/TagValueList"
            - description: A list of LF-tag values to delete from the LF-tag.
        TagValuesToAdd:
          allOf:
            - $ref: "#/components/schemas/TagValueList"
            - description: A list of LF-tag values to add from the LF-tag.
    UpdateResourceRequest:
      type: object
      required:
        - RoleArn
        - ResourceArn
      title: UpdateResourceRequest
      properties:
        RoleArn:
          allOf:
            - $ref: "#/components/schemas/IAMRoleArn"
            - description: The new role to use for the given resource registered in Lake Formation.
        ResourceArn:
          allOf:
            - $ref: "#/components/schemas/ResourceArnString"
            - description: The resource ARN.
        WithFederation:
          allOf:
            - $ref: "#/components/schemas/NullableBoolean"
            - description: Whether or not the resource is a federated resource.
    WriteOperationList:
      type: array
      items:
        $ref: "#/components/schemas/WriteOperation"
      minItems: 1
      maxItems: 100
    UpdateTableObjectsRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - WriteOperations
      title: UpdateTableObjectsRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The catalog containing the governed table to update. Defaults to the callerâ€™s account ID.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The database containing the governed table to update.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: The governed table to update.
        TransactionId:
          allOf:
            - $ref: "#/components/schemas/TransactionIdString"
            - description: The transaction at which to do the write.
        WriteOperations:
          allOf:
            - $ref: "#/components/schemas/WriteOperationList"
            - description: A list of <code>WriteOperation</code> objects that define an object to add to or delete from the manifest for a governed table.
    UpdateTableStorageOptimizerRequest:
      type: object
      required:
        - DatabaseName
        - TableName
        - StorageOptimizerConfig
      title: UpdateTableStorageOptimizerRequest
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/CatalogIdString"
            - description: The Catalog ID of the table.
        DatabaseName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: Name of the database where the table is present.
        TableName:
          allOf:
            - $ref: "#/components/schemas/NameString"
            - description: Name of the table for which to enable the storage optimizer.
        StorageOptimizerConfig:
          allOf:
            - $ref: "#/components/schemas/StorageOptimizerConfigMap"
            - description: Name of the table for which to enable the storage optimizer.
    ValueString:
      type: string
    WorkUnitIdLong:
      type: integer
    WorkUnitTokenString:
      type: string
    WorkUnitRange:
      type: object
      required:
        - WorkUnitIdMax
        - WorkUnitIdMin
        - WorkUnitToken
      properties:
        WorkUnitIdMax:
          allOf:
            - $ref: "#/components/schemas/WorkUnitIdLong"
            - description: Defines the maximum work unit ID in the range. The maximum value is inclusive.
        WorkUnitIdMin:
          allOf:
            - $ref: "#/components/schemas/WorkUnitIdLong"
            - description: Defines the minimum work unit ID in the range.
        WorkUnitToken:
          allOf:
            - $ref: "#/components/schemas/WorkUnitTokenString"
            - description: A work token used to query the execution service.
      description: Defines the valid range of work unit IDs for querying the execution service.
security:
  - hmac: []
