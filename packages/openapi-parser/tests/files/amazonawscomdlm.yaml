openapi: 3.0.0
info:
  version: 2018-01-12
  x-release: v4
  title: Amazon Data Lifecycle Manager
  description: <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: dlm
  x-aws-signingName: dlm
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dlm-2018-01-12.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/dlm/
servers:
  - url: http://dlm.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon DLM multi-region endpoint
  - url: https://dlm.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Amazon DLM multi-region endpoint
  - url: http://dlm.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon DLM endpoint for China (Beijing) and China (Ningxia)
  - url: https://dlm.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Amazon DLM endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /policies:
    post:
      operationId: CreateLifecyclePolicy
      description: Creates a policy to manage the lifecycle of the specified Amazon Web Services resources. You can create up to 100 lifecycle policies.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLifecyclePolicyResponse"
        "480":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "481":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
        "482":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ExecutionRoleArn
                - Description
                - State
                - PolicyDetails
              properties:
                ExecutionRoleArn:
                  description: The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
                  type: string
                  pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
                  minLength: 0
                  maxLength: 2048
                Description:
                  description: A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.
                  type: string
                  pattern: "[0-9A-Za-z _-]+"
                  minLength: 0
                  maxLength: 500
                State:
                  description: The desired activation state of the lifecycle policy after creation.
                  type: string
                  enum:
                    - ENABLED
                    - DISABLED
                PolicyDetails:
                  description: " <b>[All policy types]</b> Specifies the configuration of a lifecycle policy."
                  type: object
                  properties:
                    PolicyType:
                      allOf:
                        - $ref: "#/components/schemas/PolicyTypeValues"
                        - description: <p> <b>[All policy types]</b> The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p> <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
                    ResourceTypes:
                      allOf:
                        - $ref: "#/components/schemas/ResourceTypeValuesList"
                        - description: " <b>[Snapshot policies only]</b> The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance."
                    ResourceLocations:
                      allOf:
                        - $ref: "#/components/schemas/ResourceLocationList"
                        - description: <p> <b>[Snapshot and AMI policies only]</b> The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>.</p> <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>
                    TargetTags:
                      allOf:
                        - $ref: "#/components/schemas/TargetTagList"
                        - description: " <b>[Snapshot and AMI policies only]</b> The single tag that identifies targeted resources for this policy."
                    Schedules:
                      allOf:
                        - $ref: "#/components/schemas/ScheduleList"
                        - description: " <b>[Snapshot and AMI policies only]</b> The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedulesâ€”one mandatory schedule and up to three optional schedules."
                    Parameters:
                      allOf:
                        - $ref: "#/components/schemas/Parameters"
                        - description: <p> <b>[Snapshot and AMI policies only]</b> A set of optional parameters for snapshot and AMI lifecycle policies. </p> <note> <p>If you are modifying a policy that was created or previously modified using the Amazon Data Lifecycle Manager console, then you must include this parameter and specify either the default values or the new values that you require. You can't omit this parameter or set its values to null.</p> </note>
                    EventSource:
                      allOf:
                        - $ref: "#/components/schemas/EventSource"
                        - description: " <b>[Event-based policies only]</b> The event that activates the event-based policy."
                    Actions:
                      allOf:
                        - $ref: "#/components/schemas/ActionList"
                        - description: " <b>[Event-based policies only]</b> The actions to be performed when the event-based policy is activated. You can specify only one action per policy."
                Tags:
                  description: The tags to apply to the lifecycle policy during creation.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetLifecyclePolicies
      description: <p>Gets summary information about all or the specified data lifecycle policies.</p> <p>To get complete information about a policy, use <a>GetLifecyclePolicy</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLifecyclePoliciesResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: policyIds
          in: query
          required: false
          description: The identifiers of the data lifecycle policies.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/PolicyId"
        - name: state
          in: query
          required: false
          description: The activation state.
          schema:
            type: string
            enum:
              - ENABLED
              - DISABLED
              - ERROR
        - name: resourceTypes
          in: query
          required: false
          description: The resource type.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ResourceTypeValues"
            minItems: 1
            maxItems: 1
        - name: targetTags
          in: query
          required: false
          description: <p>The target tag for a policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p>
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TagFilter"
            minItems: 1
            maxItems: 50
        - name: tagsToAdd
          in: query
          required: false
          description: <p>The tags to add to objects created by the policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p> <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TagFilter"
            minItems: 0
            maxItems: 50
  "/policies/{policyId}/":
    delete:
      operationId: DeleteLifecyclePolicy
      description: <p>Deletes the specified lifecycle policy and halts the automated operations that the policy specified.</p> <p>For more information about deleting a policy, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/view-modify-delete.html#delete">Delete lifecycle policies</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteLifecyclePolicyResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: policyId
          in: path
          required: true
          description: The identifier of the lifecycle policy.
          schema:
            type: string
            pattern: policy-[A-Za-z0-9]+
            minLength: 0
            maxLength: 64
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetLifecyclePolicy
      description: Gets detailed information about the specified lifecycle policy.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLifecyclePolicyResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "482":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: policyId
          in: path
          required: true
          description: The identifier of the lifecycle policy.
          schema:
            type: string
            pattern: policy-[A-Za-z0-9]+
            minLength: 0
            maxLength: 64
  "/tags/{resourceArn}":
    get:
      operationId: ListTagsForResource
      description: Lists the tags for the specified resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource.
          schema:
            type: string
            pattern: ^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\d+:policy/[0-9A-Za-z_-]{1,128}$
            minLength: 0
            maxLength: 2048
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: TagResource
      description: Adds the specified tags to the specified resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagResourceResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource.
          schema:
            type: string
            pattern: ^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\d+:policy/[0-9A-Za-z_-]{1,128}$
            minLength: 0
            maxLength: 2048
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Tags
              properties:
                Tags:
                  description: One or more tags.
                  type: object
                  minProperties: 1
                  maxProperties: 200
                  additionalProperties:
                    $ref: "#/components/schemas/TagValue"
  "/tags/{resourceArn}#tagKeys":
    delete:
      operationId: UntagResource
      description: Removes the specified tags from the specified resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UntagResourceResponse"
        "480":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The Amazon Resource Name (ARN) of the resource.
          schema:
            type: string
            pattern: ^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\d+:policy/[0-9A-Za-z_-]{1,128}$
            minLength: 0
            maxLength: 2048
        - name: tagKeys
          in: query
          required: true
          description: The tag keys.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TagKey"
            minItems: 1
            maxItems: 200
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/policies/{policyId}":
    patch:
      operationId: UpdateLifecyclePolicy
      description: <p>Updates the specified lifecycle policy.</p> <p>For more information about updating a policy, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/view-modify-delete.html#modify">Modify lifecycle policies</a>.</p>
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateLifecyclePolicyResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequestException"
        "482":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
        "483":
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LimitExceededException"
      parameters:
        - name: policyId
          in: path
          required: true
          description: The identifier of the lifecycle policy.
          schema:
            type: string
            pattern: policy-[A-Za-z0-9]+
            minLength: 0
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ExecutionRoleArn:
                  description: The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
                  type: string
                  pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
                  minLength: 0
                  maxLength: 2048
                State:
                  description: The desired activation state of the lifecycle policy after creation.
                  type: string
                  enum:
                    - ENABLED
                    - DISABLED
                Description:
                  description: A description of the lifecycle policy.
                  type: string
                  pattern: "[0-9A-Za-z _-]+"
                  minLength: 0
                  maxLength: 500
                PolicyDetails:
                  description: " <b>[All policy types]</b> Specifies the configuration of a lifecycle policy."
                  type: object
                  properties:
                    PolicyType:
                      allOf:
                        - $ref: "#/components/schemas/PolicyTypeValues"
                        - description: <p> <b>[All policy types]</b> The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p> <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
                    ResourceTypes:
                      allOf:
                        - $ref: "#/components/schemas/ResourceTypeValuesList"
                        - description: " <b>[Snapshot policies only]</b> The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance."
                    ResourceLocations:
                      allOf:
                        - $ref: "#/components/schemas/ResourceLocationList"
                        - description: <p> <b>[Snapshot and AMI policies only]</b> The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>.</p> <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>
                    TargetTags:
                      allOf:
                        - $ref: "#/components/schemas/TargetTagList"
                        - description: " <b>[Snapshot and AMI policies only]</b> The single tag that identifies targeted resources for this policy."
                    Schedules:
                      allOf:
                        - $ref: "#/components/schemas/ScheduleList"
                        - description: " <b>[Snapshot and AMI policies only]</b> The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedulesâ€”one mandatory schedule and up to three optional schedules."
                    Parameters:
                      allOf:
                        - $ref: "#/components/schemas/Parameters"
                        - description: <p> <b>[Snapshot and AMI policies only]</b> A set of optional parameters for snapshot and AMI lifecycle policies. </p> <note> <p>If you are modifying a policy that was created or previously modified using the Amazon Data Lifecycle Manager console, then you must include this parameter and specify either the default values or the new values that you require. You can't omit this parameter or set its values to null.</p> </note>
                    EventSource:
                      allOf:
                        - $ref: "#/components/schemas/EventSource"
                        - description: " <b>[Event-based policies only]</b> The event that activates the event-based policy."
                    Actions:
                      allOf:
                        - $ref: "#/components/schemas/ActionList"
                        - description: " <b>[Event-based policies only]</b> The actions to be performed when the event-based policy is activated. You can specify only one action per policy."
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateLifecyclePolicyResponse:
      type: object
      properties:
        PolicyId:
          allOf:
            - $ref: "#/components/schemas/PolicyId"
            - description: The identifier of the lifecycle policy.
    PolicyTypeValues:
      type: string
      enum:
        - EBS_SNAPSHOT_MANAGEMENT
        - IMAGE_MANAGEMENT
        - EVENT_BASED_POLICY
    ResourceTypeValuesList:
      type: array
      items:
        $ref: "#/components/schemas/ResourceTypeValues"
      minItems: 1
      maxItems: 1
    ResourceLocationList:
      type: array
      items:
        $ref: "#/components/schemas/ResourceLocationValues"
      minItems: 1
      maxItems: 1
    TargetTagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 1
      maxItems: 50
    ScheduleList:
      type: array
      items:
        $ref: "#/components/schemas/Schedule"
      minItems: 1
      maxItems: 4
    Parameters:
      type: object
      properties:
        ExcludeBootVolume:
          allOf:
            - $ref: "#/components/schemas/ExcludeBootVolume"
            - description: " <b>[Snapshot policies that target instances only]</b> Indicates whether to exclude the root volume from multi-volume snapshot sets. The default is <code>false</code>. If you specify <code>true</code>, then the root volumes attached to targeted instances will be excluded from the multi-volume snapshot sets created by the policy."
        NoReboot:
          allOf:
            - $ref: "#/components/schemas/NoReboot"
            - description: " <b>[AMI policies only]</b> Indicates whether targeted instances are rebooted when the lifecycle policy runs. <code>true</code> indicates that targeted instances are not rebooted when the policy runs. <code>false</code> indicates that target instances are rebooted when the policy runs. The default is <code>true</code> (instances are not rebooted)."
        ExcludeDataVolumeTags:
          allOf:
            - $ref: "#/components/schemas/ExcludeDataVolumeTagList"
            - description: <p> <b>[Snapshot policies that target instances only]</b> The tags used to identify data (non-root) volumes to exclude from multi-volume snapshot sets.</p> <p>If you create a snapshot lifecycle policy that targets instances and you specify tags for this parameter, then data volumes with the specified tags that are attached to targeted instances will be excluded from the multi-volume snapshot sets created by the policy.</p>
      description: <p> <b>[Snapshot and AMI policies only]</b> Specifies optional parameters for snapshot and AMI policies. The set of valid parameters depends on the combination of policy type and target resource type.</p> <p>If you choose to exclude boot volumes and you specify tags that consequently exclude all of the additional data volumes attached to an instance, then Amazon Data Lifecycle Manager will not create any snapshots for the affected instance, and it will emit a <code>SnapshotsCreateFailed</code> Amazon CloudWatch metric. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitor-dlm-cw-metrics.html">Monitor your policies using Amazon CloudWatch</a>.</p>
    EventSource:
      type: object
      required:
        - Type
      properties:
        Type:
          allOf:
            - $ref: "#/components/schemas/EventSourceValues"
            - description: The source of the event. Currently only managed CloudWatch Events rules are supported.
        Parameters:
          allOf:
            - $ref: "#/components/schemas/EventParameters"
            - description: Information about the event.
      description: " <b>[Event-based policies only]</b> Specifies an event that activates an event-based policy."
    ActionList:
      type: array
      items:
        $ref: "#/components/schemas/Action"
      minItems: 1
      maxItems: 1
    TagValue:
      type: string
      pattern: "[\\p{all}]*"
      maxLength: 256
    InvalidRequestException: {}
    LimitExceededException: {}
    InternalServerException: {}
    DeleteLifecyclePolicyResponse:
      type: object
      properties: {}
    ResourceNotFoundException: {}
    GetLifecyclePoliciesResponse:
      type: object
      properties:
        Policies:
          allOf:
            - $ref: "#/components/schemas/LifecyclePolicySummaryList"
            - description: Summary information about the lifecycle policies.
    PolicyId:
      type: string
      pattern: policy-[A-Za-z0-9]+
      minLength: 0
      maxLength: 64
    ResourceTypeValues:
      type: string
      enum:
        - VOLUME
        - INSTANCE
    TagFilter:
      type: string
      pattern: "[\\p{all}]*"
      minLength: 0
      maxLength: 256
    GetLifecyclePolicyResponse:
      type: object
      properties:
        Policy:
          allOf:
            - $ref: "#/components/schemas/LifecyclePolicy"
            - description: Detailed information about the lifecycle policy.
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: Information about the tags.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    UpdateLifecyclePolicyResponse:
      type: object
      properties: {}
    ActionName:
      type: string
      pattern: "[0-9A-Za-z _-]+"
      minLength: 0
      maxLength: 120
    CrossRegionCopyActionList:
      type: array
      items:
        $ref: "#/components/schemas/CrossRegionCopyAction"
      minItems: 0
      maxItems: 3
    Action:
      type: object
      required:
        - Name
        - CrossRegionCopy
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/ActionName"
            - description: A descriptive name for the action.
        CrossRegionCopy:
          allOf:
            - $ref: "#/components/schemas/CrossRegionCopyActionList"
            - description: The rule for copying shared snapshots across Regions.
      description: " <b>[Event-based policies only]</b> Specifies an action for an event-based policy."
    RetentionArchiveTier:
      type: object
      properties:
        Count:
          allOf:
            - $ref: "#/components/schemas/Count"
            - description: The maximum number of snapshots to retain in the archive storage tier for each volume. The count must ensure that each snapshot remains in the archive tier for at least 90 days. For example, if the schedule creates snapshots every 30 days, you must specify a count of 3 or more to ensure that each snapshot is archived for at least 90 days.
        Interval:
          allOf:
            - $ref: "#/components/schemas/Interval"
            - description: Specifies the period of time to retain snapshots in the archive tier. After this period expires, the snapshot is permanently deleted.
        IntervalUnit:
          allOf:
            - $ref: "#/components/schemas/RetentionIntervalUnitValues"
            - description: The unit of time in which to measure the <b>Interval</b>. For example, to retain a snapshots in the archive tier for 6 months, specify <code>Interval=6</code> and <code>IntervalUnit=MONTHS</code>.
      description: <p> <b>[Snapshot policies only]</b> Describes the retention rule for archived snapshots. Once the archive retention threshold is met, the snapshots are permanently deleted from the archive tier.</p> <note> <p>The archive retention rule must retain snapshots in the archive tier for a minimum of 90 days.</p> </note> <p>For <b>count-based schedules</b>, you must specify <b>Count</b>. For <b>age-based schedules</b>, you must specify <b>Interval</b> and <b> IntervalUnit</b>.</p> <p>For more information about using snapshot archiving, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-ami-policy.html#dlm-archive">Considerations for snapshot lifecycle policies</a>.</p>
    ArchiveRetainRule:
      type: object
      required:
        - RetentionArchiveTier
      properties:
        RetentionArchiveTier:
          allOf:
            - $ref: "#/components/schemas/RetentionArchiveTier"
            - description: Information about retention period in the Amazon EBS Snapshots Archive. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/snapshot-archive.html">Archive Amazon EBS snapshots</a>.
      description: " <b>[Snapshot policies only]</b> Specifies information about the archive storage tier retention period."
    ArchiveRule:
      type: object
      required:
        - RetainRule
      properties:
        RetainRule:
          allOf:
            - $ref: "#/components/schemas/ArchiveRetainRule"
            - description: Information about the retention period for the snapshot archiving rule.
      description: " <b>[Snapshot policies only]</b> Specifies a snapshot archiving rule for a schedule."
    AvailabilityZone:
      type: string
      pattern: ([a-z]+-){2,3}\d[a-z]
      minLength: 0
      maxLength: 16
    AvailabilityZoneList:
      type: array
      items:
        $ref: "#/components/schemas/AvailabilityZone"
      minItems: 1
      maxItems: 10
    AwsAccountId:
      type: string
      pattern: ^[0-9]{12}$
      minLength: 12
      maxLength: 12
    CmkArn:
      type: string
      pattern: arn:aws(-[a-z]{1,3}){0,2}:kms:([a-z]+-){2,3}\d:\d+:key/.*
      minLength: 0
      maxLength: 2048
    CopyTags:
      type: boolean
    CopyTagsNullable:
      type: boolean
    Count:
      type: integer
      minimum: 1
      maximum: 1000
    ExecutionRoleArn:
      type: string
      pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
      minLength: 0
      maxLength: 2048
    PolicyDescription:
      type: string
      pattern: "[0-9A-Za-z _-]+"
      minLength: 0
      maxLength: 500
    SettablePolicyStateValues:
      type: string
      enum:
        - ENABLED
        - DISABLED
    PolicyDetails:
      type: object
      properties:
        PolicyType:
          allOf:
            - $ref: "#/components/schemas/PolicyTypeValues"
            - description: <p> <b>[All policy types]</b> The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code> to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code> to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p> <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
        ResourceTypes:
          allOf:
            - $ref: "#/components/schemas/ResourceTypeValuesList"
            - description: " <b>[Snapshot policies only]</b> The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume snapshots from the volumes for an instance."
        ResourceLocations:
          allOf:
            - $ref: "#/components/schemas/ResourceLocationList"
            - description: <p> <b>[Snapshot and AMI policies only]</b> The location of the resources to backup. If the source resources are located in an Amazon Web Services Region, specify <code>CLOUD</code>. If the source resources are located on an Outpost in your account, specify <code>OUTPOST</code>.</p> <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources of the specified type with matching target tags across all of the Outposts in your account.</p>
        TargetTags:
          allOf:
            - $ref: "#/components/schemas/TargetTagList"
            - description: " <b>[Snapshot and AMI policies only]</b> The single tag that identifies targeted resources for this policy."
        Schedules:
          allOf:
            - $ref: "#/components/schemas/ScheduleList"
            - description: " <b>[Snapshot and AMI policies only]</b> The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy can have up to four schedulesâ€”one mandatory schedule and up to three optional schedules."
        Parameters:
          allOf:
            - $ref: "#/components/schemas/Parameters"
            - description: <p> <b>[Snapshot and AMI policies only]</b> A set of optional parameters for snapshot and AMI lifecycle policies. </p> <note> <p>If you are modifying a policy that was created or previously modified using the Amazon Data Lifecycle Manager console, then you must include this parameter and specify either the default values or the new values that you require. You can't omit this parameter or set its values to null.</p> </note>
        EventSource:
          allOf:
            - $ref: "#/components/schemas/EventSource"
            - description: " <b>[Event-based policies only]</b> The event that activates the event-based policy."
        Actions:
          allOf:
            - $ref: "#/components/schemas/ActionList"
            - description: " <b>[Event-based policies only]</b> The actions to be performed when the event-based policy is activated. You can specify only one action per policy."
      description: " <b>[All policy types]</b> Specifies the configuration of a lifecycle policy."
    TagMap:
      type: object
      minProperties: 1
      maxProperties: 200
      additionalProperties:
        $ref: "#/components/schemas/TagValue"
    CreateLifecyclePolicyRequest:
      type: object
      required:
        - ExecutionRoleArn
        - Description
        - State
        - PolicyDetails
      title: CreateLifecyclePolicyRequest
      properties:
        ExecutionRoleArn:
          allOf:
            - $ref: "#/components/schemas/ExecutionRoleArn"
            - description: The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
        Description:
          allOf:
            - $ref: "#/components/schemas/PolicyDescription"
            - description: A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.
        State:
          allOf:
            - $ref: "#/components/schemas/SettablePolicyStateValues"
            - description: The desired activation state of the lifecycle policy after creation.
        PolicyDetails:
          allOf:
            - $ref: "#/components/schemas/PolicyDetails"
            - description: The configuration details of the lifecycle policy.
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags to apply to the lifecycle policy during creation.
    LocationValues:
      type: string
      enum:
        - CLOUD
        - OUTPOST_LOCAL
    Interval:
      type: integer
      minimum: 1
    IntervalUnitValues:
      type: string
      enum:
        - HOURS
    TimesList:
      type: array
      items:
        $ref: "#/components/schemas/Time"
      maxItems: 1
    CronExpression:
      type: string
      pattern: cron\([^\n]{11,100}\)
      minLength: 17
      maxLength: 106
    CreateRule:
      type: object
      properties:
        Location:
          allOf:
            - $ref: "#/components/schemas/LocationValues"
            - description: <p> <b>[Snapshot policies only]</b> Specifies the destination for snapshots created by the policy. To create snapshots in the same Region as the source resource, specify <code>CLOUD</code>. To create snapshots on the same Outpost as the source resource, specify <code>OUTPOST_LOCAL</code>. If you omit this parameter, <code>CLOUD</code> is used by default.</p> <p>If the policy targets resources in an Amazon Web Services Region, then you must create snapshots in the same Region as the source resource. If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost as the source resource, or in the Region of that Outpost.</p>
        Interval:
          allOf:
            - $ref: "#/components/schemas/Interval"
            - description: The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and 24.
        IntervalUnit:
          allOf:
            - $ref: "#/components/schemas/IntervalUnitValues"
            - description: The interval unit.
        Times:
          allOf:
            - $ref: "#/components/schemas/TimesList"
            - description: <p>The time, in UTC, to start the operation. The supported format is hh:mm.</p> <p>The operation occurs within a one-hour window following the specified time. If you do not specify a time, Amazon Data Lifecycle Manager selects a time within the next 24 hours.</p>
        CronExpression:
          allOf:
            - $ref: "#/components/schemas/CronExpression"
            - description: The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1 year. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions">Cron expressions</a> in the <i>Amazon CloudWatch User Guide</i>.
      description: <p> <b>[Snapshot and AMI policies only]</b> Specifies when the policy should create snapshots or AMIs.</p> <note> <ul> <li> <p>You must specify either <b>CronExpression</b>, or <b>Interval</b>, <b>IntervalUnit</b>, and <b>Times</b>.</p> </li> <li> <p>If you need to specify an <a>ArchiveRule</a> for the schedule, then you must specify a creation frequency of at least 28 days.</p> </li> </ul> </note>
    Target:
      type: string
      pattern: ^[\w:\-\/\*]+$
      minLength: 0
      maxLength: 2048
    EncryptionConfiguration:
      type: object
      required:
        - Encrypted
      properties:
        Encrypted:
          allOf:
            - $ref: "#/components/schemas/Encrypted"
            - description: To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or when encryption by default is not enabled.
        CmkArn:
          allOf:
            - $ref: "#/components/schemas/CmkArn"
            - description: The Amazon Resource Name (ARN) of the KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
      description: " <b>[Event-based policies only]</b> Specifies the encryption settings for cross-Region snapshot copies created by event-based policies."
    CrossRegionCopyRetainRule:
      type: object
      properties:
        Interval:
          allOf:
            - $ref: "#/components/schemas/Interval"
            - description: The amount of time to retain a cross-Region snapshot or AMI copy. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.
        IntervalUnit:
          allOf:
            - $ref: "#/components/schemas/RetentionIntervalUnitValues"
            - description: The unit of time for time-based retention. For example, to retain a cross-Region copy for 3 months, specify <code>Interval=3</code> and <code>IntervalUnit=MONTHS</code>.
      description: Specifies a retention rule for cross-Region snapshot copies created by snapshot or event-based policies, or cross-Region AMI copies created by AMI policies. After the retention period expires, the cross-Region copy is deleted.
    CrossRegionCopyAction:
      type: object
      required:
        - Target
        - EncryptionConfiguration
      properties:
        Target:
          allOf:
            - $ref: "#/components/schemas/Target"
            - description: The target Region.
        EncryptionConfiguration:
          allOf:
            - $ref: "#/components/schemas/EncryptionConfiguration"
            - description: The encryption settings for the copied snapshot.
        RetainRule:
          $ref: "#/components/schemas/CrossRegionCopyRetainRule"
      description: <p> <b>[Event-based policies only]</b> Specifies a cross-Region copy action for event-based policies.</p> <note> <p>To specify a cross-Region copy rule for snapshot and AMI policies, use <a>CrossRegionCopyRule</a>.</p> </note>
    RetentionIntervalUnitValues:
      type: string
      enum:
        - DAYS
        - WEEKS
        - MONTHS
        - YEARS
    CrossRegionCopyDeprecateRule:
      type: object
      properties:
        Interval:
          allOf:
            - $ref: "#/components/schemas/Interval"
            - description: The period after which to deprecate the cross-Region AMI copies. The period must be less than or equal to the cross-Region AMI copy retention period, and it can't be greater than 10 years. This is equivalent to 120 months, 520 weeks, or 3650 days.
        IntervalUnit:
          allOf:
            - $ref: "#/components/schemas/RetentionIntervalUnitValues"
            - description: The unit of time in which to measure the <b>Interval</b>. For example, to deprecate a cross-Region AMI copy after 3 months, specify <code>Interval=3</code> and <code>IntervalUnit=MONTHS</code>.
      description: " <b>[AMI policies only]</b> Specifies an AMI deprecation rule for cross-Region AMI copies created by an AMI policy."
    TargetRegion:
      type: string
      pattern: ([a-z]+-){2,3}\d
      minLength: 0
      maxLength: 16
    Encrypted:
      type: boolean
    CrossRegionCopyRule:
      type: object
      required:
        - Encrypted
      properties:
        TargetRegion:
          allOf:
            - $ref: "#/components/schemas/TargetRegion"
            - description: <note> <p>Avoid using this parameter when creating new policies. Instead, use <b>Target</b> to specify a target Region or a target Outpost for snapshot copies.</p> <p>For policies created before the <b>Target</b> parameter was introduced, this parameter indicates the target Region for snapshot copies.</p> </note>
        Target:
          allOf:
            - $ref: "#/components/schemas/Target"
            - description: <p>The target Region or the Amazon Resource Name (ARN) of the target Outpost for the snapshot copies.</p> <p>Use this parameter instead of <b>TargetRegion</b>. Do not specify both.</p>
        Encrypted:
          allOf:
            - $ref: "#/components/schemas/Encrypted"
            - description: To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this parameter is false or if encryption by default is not enabled.
        CmkArn:
          allOf:
            - $ref: "#/components/schemas/CmkArn"
            - description: The Amazon Resource Name (ARN) of the KMS key to use for EBS encryption. If this parameter is not specified, the default KMS key for the account is used.
        CopyTags:
          allOf:
            - $ref: "#/components/schemas/CopyTagsNullable"
            - description: Indicates whether to copy all user-defined tags from the source snapshot or AMI to the cross-Region copy.
        RetainRule:
          allOf:
            - $ref: "#/components/schemas/CrossRegionCopyRetainRule"
            - description: The retention rule that indicates how long the cross-Region snapshot or AMI copies are to be retained in the destination Region.
        DeprecateRule:
          allOf:
            - $ref: "#/components/schemas/CrossRegionCopyDeprecateRule"
            - description: " <b>[AMI policies only]</b> The AMI deprecation rule for cross-Region AMI copies created by the rule."
      description: <p> <b>[Snapshot and AMI policies only]</b> Specifies a cross-Region copy rule for snapshot and AMI policies.</p> <note> <p>To specify a cross-Region copy action for event-based polices, use <a>CrossRegionCopyAction</a>.</p> </note>
    CrossRegionCopyRules:
      type: array
      items:
        $ref: "#/components/schemas/CrossRegionCopyRule"
      minItems: 0
      maxItems: 3
    DeleteLifecyclePolicyRequest:
      type: object
      title: DeleteLifecyclePolicyRequest
      properties: {}
    DeprecateRule:
      type: object
      properties:
        Count:
          allOf:
            - $ref: "#/components/schemas/Count"
            - description: If the schedule has a count-based retention rule, this parameter specifies the number of oldest AMIs to deprecate. The count must be less than or equal to the schedule's retention count, and it can't be greater than 1000.
        Interval:
          allOf:
            - $ref: "#/components/schemas/Interval"
            - description: If the schedule has an age-based retention rule, this parameter specifies the period after which to deprecate AMIs created by the schedule. The period must be less than or equal to the schedule's retention period, and it can't be greater than 10 years. This is equivalent to 120 months, 520 weeks, or 3650 days.
        IntervalUnit:
          allOf:
            - $ref: "#/components/schemas/RetentionIntervalUnitValues"
            - description: The unit of time in which to measure the <b>Interval</b>.
      description: <p> <b>[AMI policies only]</b> Specifies an AMI deprecation rule for AMIs created by an AMI lifecycle policy.</p> <p>For age-based schedules, you must specify <b>Interval</b> and <b>IntervalUnit</b>. For count-based schedules, you must specify <b>Count</b>.</p>
    DescriptionRegex:
      type: string
      pattern: "[\\p{all}]*"
      minLength: 0
      maxLength: 1000
    EventTypeValues:
      type: string
      enum:
        - shareSnapshot
    SnapshotOwnerList:
      type: array
      items:
        $ref: "#/components/schemas/AwsAccountId"
      minItems: 0
      maxItems: 50
    EventParameters:
      type: object
      required:
        - EventType
        - SnapshotOwner
        - DescriptionRegex
      properties:
        EventType:
          allOf:
            - $ref: "#/components/schemas/EventTypeValues"
            - description: The type of event. Currently, only snapshot sharing events are supported.
        SnapshotOwner:
          allOf:
            - $ref: "#/components/schemas/SnapshotOwnerList"
            - description: The IDs of the Amazon Web Services accounts that can trigger policy by sharing snapshots with your account. The policy only runs if one of the specified Amazon Web Services accounts shares a snapshot with your account.
        DescriptionRegex:
          allOf:
            - $ref: "#/components/schemas/DescriptionRegex"
            - description: "<p>The snapshot description that can trigger the policy. The description pattern is specified using a regular expression. The policy runs only if a snapshot with a description that matches the specified pattern is shared with your account.</p> <p>For example, specifying <code>^.*Created for policy: policy-1234567890abcdef0.*$</code> configures the policy to run only if snapshots created by policy <code>policy-1234567890abcdef0</code> are shared with your account.</p>"
      description: " <b>[Event-based policies only]</b> Specifies an event that activates an event-based policy."
    EventSourceValues:
      type: string
      enum:
        - MANAGED_CWE
    ExcludeBootVolume:
      type: boolean
    Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The tag key.
        Value:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The tag value.
      description: Specifies a tag for a resource.
    ExcludeDataVolumeTagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 0
      maxItems: 50
    FastRestoreRule:
      type: object
      required:
        - AvailabilityZones
      properties:
        Count:
          allOf:
            - $ref: "#/components/schemas/Count"
            - description: The number of snapshots to be enabled with fast snapshot restore.
        Interval:
          allOf:
            - $ref: "#/components/schemas/Interval"
            - description: The amount of time to enable fast snapshot restore. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.
        IntervalUnit:
          allOf:
            - $ref: "#/components/schemas/RetentionIntervalUnitValues"
            - description: The unit of time for enabling fast snapshot restore.
        AvailabilityZones:
          allOf:
            - $ref: "#/components/schemas/AvailabilityZoneList"
            - description: The Availability Zones in which to enable fast snapshot restore.
      description: " <b>[Snapshot policies only]</b> Specifies a rule for enabling fast snapshot restore for snapshots created by snapshot policies. You can enable fast snapshot restore based on either a count or a time interval."
    PolicyIdList:
      type: array
      items:
        $ref: "#/components/schemas/PolicyId"
    GettablePolicyStateValues:
      type: string
      enum:
        - ENABLED
        - DISABLED
        - ERROR
    TargetTagsFilterList:
      type: array
      items:
        $ref: "#/components/schemas/TagFilter"
      minItems: 1
      maxItems: 50
    TagsToAddFilterList:
      type: array
      items:
        $ref: "#/components/schemas/TagFilter"
      minItems: 0
      maxItems: 50
    GetLifecyclePoliciesRequest:
      type: object
      title: GetLifecyclePoliciesRequest
      properties: {}
    LifecyclePolicySummaryList:
      type: array
      items:
        $ref: "#/components/schemas/LifecyclePolicySummary"
    GetLifecyclePolicyRequest:
      type: object
      title: GetLifecyclePolicyRequest
      properties: {}
    LifecyclePolicy:
      type: object
      properties:
        PolicyId:
          allOf:
            - $ref: "#/components/schemas/PolicyId"
            - description: The identifier of the lifecycle policy.
        Description:
          allOf:
            - $ref: "#/components/schemas/PolicyDescription"
            - description: The description of the lifecycle policy.
        State:
          allOf:
            - $ref: "#/components/schemas/GettablePolicyStateValues"
            - description: The activation state of the lifecycle policy.
        StatusMessage:
          allOf:
            - $ref: "#/components/schemas/StatusMessage"
            - description: The description of the status.
        ExecutionRoleArn:
          allOf:
            - $ref: "#/components/schemas/ExecutionRoleArn"
            - description: The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
        DateCreated:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The local date and time when the lifecycle policy was created.
        DateModified:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The local date and time when the lifecycle policy was last modified.
        PolicyDetails:
          allOf:
            - $ref: "#/components/schemas/PolicyDetails"
            - description: The configuration of the lifecycle policy
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags.
        PolicyArn:
          allOf:
            - $ref: "#/components/schemas/PolicyArn"
            - description: The Amazon Resource Name (ARN) of the policy.
      description: " <b>[All policy types]</b> Detailed information about a snapshot, AMI, or event-based lifecycle policy."
    StatusMessage:
      type: string
      pattern: "[\\p{all}]*"
      minLength: 0
      maxLength: 500
    Timestamp:
      type: string
      format: date-time
    PolicyArn:
      type: string
      pattern: ^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\d+:policy/[0-9A-Za-z_-]{1,128}$
      minLength: 0
      maxLength: 2048
    LifecyclePolicySummary:
      type: object
      properties:
        PolicyId:
          allOf:
            - $ref: "#/components/schemas/PolicyId"
            - description: The identifier of the lifecycle policy.
        Description:
          allOf:
            - $ref: "#/components/schemas/PolicyDescription"
            - description: The description of the lifecycle policy.
        State:
          allOf:
            - $ref: "#/components/schemas/GettablePolicyStateValues"
            - description: The activation state of the lifecycle policy.
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: The tags.
        PolicyType:
          allOf:
            - $ref: "#/components/schemas/PolicyTypeValues"
            - description: The type of policy. <code>EBS_SNAPSHOT_MANAGEMENT</code> indicates that the policy manages the lifecycle of Amazon EBS snapshots. <code>IMAGE_MANAGEMENT</code> indicates that the policy manages the lifecycle of EBS-backed AMIs. <code>EVENT_BASED_POLICY</code> indicates that the policy automates cross-account snapshot copies for snapshots that are shared with your account.
      description: Summary information about a lifecycle policy.
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    NoReboot:
      type: boolean
    ResourceLocationValues:
      type: string
      enum:
        - CLOUD
        - OUTPOST
    StandardTierRetainRuleCount:
      type: integer
      minimum: 0
      maximum: 1000
    StandardTierRetainRuleInterval:
      type: integer
      minimum: 0
    RetainRule:
      type: object
      properties:
        Count:
          allOf:
            - $ref: "#/components/schemas/StandardTierRetainRuleCount"
            - description: The number of snapshots to retain for each volume, up to a maximum of 1000. For example if you want to retain a maximum of three snapshots, specify <code>3</code>. When the fourth snapshot is created, the oldest retained snapshot is deleted, or it is moved to the archive tier if you have specified an <a>ArchiveRule</a>.
        Interval:
          allOf:
            - $ref: "#/components/schemas/StandardTierRetainRuleInterval"
            - description: The amount of time to retain each snapshot. The maximum is 100 years. This is equivalent to 1200 months, 5200 weeks, or 36500 days.
        IntervalUnit:
          allOf:
            - $ref: "#/components/schemas/RetentionIntervalUnitValues"
            - description: The unit of time for time-based retention. For example, to retain snapshots for 3 months, specify <code>Interval=3</code> and <code>IntervalUnit=MONTHS</code>. Once the snapshot has been retained for 3 months, it is deleted, or it is moved to the archive tier if you have specified an <a>ArchiveRule</a>.
      description: <p> <b>[Snapshot and AMI policies only]</b> Specifies a retention rule for snapshots created by snapshot policies, or for AMIs created by AMI policies.</p> <note> <p>For snapshot policies that have an <a>ArchiveRule</a>, this retention rule applies to standard tier retention. When the retention threshold is met, snapshots are moved from the standard to the archive tier.</p> <p>For snapshot policies that do not have an <b>ArchiveRule</b>, snapshots are permanently deleted when this retention threshold is met.</p> </note> <p>You can retain snapshots based on either a count or a time interval.</p> <ul> <li> <p> <b>Count-based retention</b> </p> <p>You must specify <b>Count</b>. If you specify an <a>ArchiveRule</a> for the schedule, then you can specify a retention count of <code>0</code> to archive snapshots immediately after creation. If you specify a <a>FastRestoreRule</a>, <a>ShareRule</a>, or a <a>CrossRegionCopyRule</a>, then you must specify a retention count of <code>1</code> or more.</p> </li> <li> <p> <b>Age-based retention</b> </p> <p>You must specify <b>Interval</b> and <b>IntervalUnit</b>. If you specify an <a>ArchiveRule</a> for the schedule, then you can specify a retention interval of <code>0</code> days to archive snapshots immediately after creation. If you specify a <a>FastRestoreRule</a>, <a>ShareRule</a>, or a <a>CrossRegionCopyRule</a>, then you must specify a retention interval of <code>1</code> day or more.</p> </li> </ul>
    ScheduleName:
      type: string
      pattern: "[0-9A-Za-z _-]+"
      minLength: 0
      maxLength: 120
    TagsToAddList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 0
      maxItems: 45
    VariableTagsList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      minItems: 0
      maxItems: 45
    ShareRules:
      type: array
      items:
        $ref: "#/components/schemas/ShareRule"
      minItems: 0
      maxItems: 1
    Schedule:
      type: object
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/ScheduleName"
            - description: The name of the schedule.
        CopyTags:
          allOf:
            - $ref: "#/components/schemas/CopyTags"
            - description: Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
        TagsToAdd:
          allOf:
            - $ref: "#/components/schemas/TagsToAddList"
            - description: The tags to apply to policy-created resources. These user-defined tags are in addition to the Amazon Web Services-added lifecycle tags.
        VariableTags:
          allOf:
            - $ref: "#/components/schemas/VariableTagsList"
            - description: " <b>[AMI policies and snapshot policies that target instances only]</b> A collection of key/value pairs with values determined dynamically when the policy is executed. Keys may be any valid Amazon EC2 tag key. Values must be in one of the two following formats: <code>$(instance-id)</code> or <code>$(timestamp)</code>. Variable tags are only valid for EBS Snapshot Management â€“ Instance policies."
        CreateRule:
          allOf:
            - $ref: "#/components/schemas/CreateRule"
            - description: The creation rule.
        RetainRule:
          allOf:
            - $ref: "#/components/schemas/RetainRule"
            - description: The retention rule for snapshots or AMIs created by the policy.
        FastRestoreRule:
          allOf:
            - $ref: "#/components/schemas/FastRestoreRule"
            - description: " <b>[Snapshot policies only]</b> The rule for enabling fast snapshot restore."
        CrossRegionCopyRules:
          allOf:
            - $ref: "#/components/schemas/CrossRegionCopyRules"
            - description: <p>Specifies a rule for copying snapshots or AMIs across regions.</p> <note> <p>You can't specify cross-Region copy rules for policies that create snapshots on an Outpost. If the policy creates snapshots in a Region, then snapshots can be copied to up to three Regions or Outposts.</p> </note>
        ShareRules:
          allOf:
            - $ref: "#/components/schemas/ShareRules"
            - description: " <b>[Snapshot policies only]</b> The rule for sharing snapshots with other Amazon Web Services accounts."
        DeprecateRule:
          allOf:
            - $ref: "#/components/schemas/DeprecateRule"
            - description: " <b>[AMI policies only]</b> The AMI deprecation rule for the schedule."
        ArchiveRule:
          allOf:
            - $ref: "#/components/schemas/ArchiveRule"
            - description: <p> <b>[Snapshot policies that target volumes only]</b> The snapshot archiving rule for the schedule. When you specify an archiving rule, snapshots are automatically moved from the standard tier to the archive tier once the schedule's retention threshold is met. Snapshots are then retained in the archive tier for the archive retention period that you specify. </p> <p>For more information about using snapshot archiving, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-ami-policy.html#dlm-archive">Considerations for snapshot lifecycle policies</a>.</p>
      description: " <b>[Snapshot and AMI policies only]</b> Specifies a schedule for a snapshot or AMI lifecycle policy."
    ShareTargetAccountList:
      type: array
      items:
        $ref: "#/components/schemas/AwsAccountId"
      minItems: 1
    ShareRule:
      type: object
      required:
        - TargetAccounts
      properties:
        TargetAccounts:
          allOf:
            - $ref: "#/components/schemas/ShareTargetAccountList"
            - description: The IDs of the Amazon Web Services accounts with which to share the snapshots.
        UnshareInterval:
          allOf:
            - $ref: "#/components/schemas/Interval"
            - description: The period after which snapshots that are shared with other Amazon Web Services accounts are automatically unshared.
        UnshareIntervalUnit:
          allOf:
            - $ref: "#/components/schemas/RetentionIntervalUnitValues"
            - description: The unit of time for the automatic unsharing interval.
      description: " <b>[Snapshot policies only]</b> Specifies a rule for sharing snapshots across Amazon Web Services accounts."
    String:
      type: string
      pattern: "[\\p{all}]*"
      minLength: 0
      maxLength: 500
    TagKeyList:
      type: array
      items:
        $ref: "#/components/schemas/TagKey"
      minItems: 1
      maxItems: 200
    TagResourceRequest:
      type: object
      required:
        - Tags
      title: TagResourceRequest
      properties:
        Tags:
          allOf:
            - $ref: "#/components/schemas/TagMap"
            - description: One or more tags.
    Time:
      type: string
      pattern: ^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$
      minLength: 5
      maxLength: 5
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateLifecyclePolicyRequest:
      type: object
      title: UpdateLifecyclePolicyRequest
      properties:
        ExecutionRoleArn:
          allOf:
            - $ref: "#/components/schemas/ExecutionRoleArn"
            - description: The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
        State:
          allOf:
            - $ref: "#/components/schemas/SettablePolicyStateValues"
            - description: The desired activation state of the lifecycle policy after creation.
        Description:
          allOf:
            - $ref: "#/components/schemas/PolicyDescription"
            - description: A description of the lifecycle policy.
        PolicyDetails:
          allOf:
            - $ref: "#/components/schemas/PolicyDetails"
            - description: The configuration of the lifecycle policy. You cannot update the policy type or the resource type.
security:
  - hmac: []
