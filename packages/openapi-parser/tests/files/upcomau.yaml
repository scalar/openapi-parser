openapi: 3.0.3
servers:
  - url: https://api.up.com.au/api/v1
info:
  contact:
    name: API Specification and Support
    url: https://github.com/up-banking/api
  description: |
    The Up API gives you programmatic access to your balances and
    transaction data. You can request past transactions or set up
    webhooks to receive real-time events when new transactions hit your
    account. It’s new, it’s exciting and it’s just the beginning.
  title: Up API
  version: v1
  x-apisguru-categories:
    - financial
  x-origin:
    - format: openapi
      url: https://raw.githubusercontent.com/up-banking/api/master/v1/openapi.json
      version: "3.0"
  x-providerName: up.com.au
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_apis.guru_assets_images_no-logo.svg
security:
  - bearer_auth: []
tags:
  - description: |
      Accounts represent the underlying store used to track balances
      and the transactions that have occurred to modify those balances
      over time. Up currently has two types of account: `SAVER`—used to
      earn interest and to hit savings goals, and `TRANSACTIONAL`—used
      for everyday spending.
    name: Accounts
  - description: |
      Categories enable understanding where your money goes by driving
      powerful insights in Up. All categories in Up are pre-defined
      and are automatically assigned to new purchases in most cases. A
      parent-child relationship is used to represent categories,
      however parent categories cannot be directly assigned to
      transactions.
    name: Categories
  - description: |
      Tags are custom labels that can be associated with transactions
      on Up. Within the Up application, tags provide additional insight
      into spending. For example, you could have a "Take Away" tag that
      you apply to purchases from food delivery services. The Up API
      allows you to manage the tags associated with transactions. Each
      transaction may have up to 6 tags.

      Tags are identified by their labels, which are unique strings,
      so the tag "Holiday" has also the `id` `"Holiday"`.
    name: Tags
  - description: |
      Transactions represent the movement of money into and out of an
      account. They have many characteristics that vary depending on
      the kind of transaction. Transactions may be temporarily `HELD`
      (pending) or `SETTLED`, typically depending on which payment
      method was used at the point of sale.
    name: Transactions
  - description: |
      Some endpoints exist not to expose data, but to test the API
      itself. Currently there is only one endpoint in this group: ping!
    name: Utility endpoints
  - description: |
      Webhooks provide a mechanism for a configured URL to receive
      events when transaction activity occurs on Up. You can think of
      webhooks as being like push notifications for your server-side
      application.
    name: Webhooks
paths:
  /accounts:
    get:
      description: |
        Retrieve a paginated list of all accounts for the currently
        authenticated user. The returned list is paginated and can be scrolled
        by following the `prev` and `next` links where present.
      parameters:
        - description: |
            The number of records to return in each page.
          example: 30
          in: query
          name: page[size]
          required: false
          schema:
            type: integer
        - description: |
            The type of account for which to return records. This
            can be used to filter Savers from spending accounts.
          example: SAVER
          in: query
          name: filter[accountType]
          required: false
          schema:
            $ref: "#/components/schemas/AccountTypeEnum"
        - description: |
            The account ownership structure for which to return
            records. This can be used to filter 2Up accounts from Up
            accounts.
          example: INDIVIDUAL
          in: query
          name: filter[ownershipType]
          required: false
          schema:
            $ref: "#/components/schemas/OwnershipTypeEnum"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountsResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:5PnWS0GVxCU0O1Oz
              pathParameters: {}
              payload: null
              queryParameters:
                "page[size]": 1
            response:
              data:
                - attributes:
                    accountType: TRANSACTIONAL
                    balance:
                      currencyCode: AUD
                      value: "1.00"
                      valueInBaseUnits: 100
                    createdAt: 2022-01-13T14:50:14+11:00
                    displayName: Spending
                    ownershipType: INDIVIDUAL
                  id: 26d88ec4-78d0-443c-a71f-48bcbf1d7a8e
                  links:
                    self: https://api.up.com.au/api/v1/accounts/26d88ec4-78d0-443c-a71f-48bcbf1d7a8e
                  relationships:
                    transactions:
                      links:
                        related: https://api.up.com.au/api/v1/accounts/26d88ec4-78d0-443c-a71f-48bcbf1d7a8e/transactions
                  type: accounts
              links:
                next: https://api.up.com.au/api/v1/accounts?page%5Bafter%5D=WyIyMDIyLTAxLTEzVDAzOjUwOjE0LjUzNzk0NzAwMFoiLCIyNmQ4OGVjNC03OGQwLTQ0M2MtYTcxZi00OGJjYmYxZDdhOGUiXQ%3D%3D&page%5Bsize%5D=1
                prev: null
            type: exampleRequestResponse
      summary: List accounts
      tags:
        - Accounts
  "/accounts/{accountId}/transactions":
    get:
      description: |
        Retrieve a list of all transactions for a specific account. The returned
        list is [paginated](#pagination) and can be scrolled by following the
        `next` and `prev` links where present. To narrow the results to a
        specific date range pass one or both of `filter[since]` and
        `filter[until]` in the query string. These filter parameters
        **should not** be used for pagination. Results are ordered newest first
        to oldest last.
      parameters:
        - description: |
            The unique identifier for the account.
          example: b5544658-4bbd-4eb1-8f63-a9909e0f564b
          in: path
          name: accountId
          required: true
          schema:
            type: string
        - description: |
            The number of records to return in each page.
          example: 30
          in: query
          name: page[size]
          required: false
          schema:
            type: integer
        - description: |
            The transaction status for which to return records. This
            can be used to filter `HELD` transactions from those
            that are `SETTLED`.
          example: HELD
          in: query
          name: filter[status]
          required: false
          schema:
            $ref: "#/components/schemas/TransactionStatusEnum"
        - description: |
            The start date-time from which to return records,
            formatted according to rfc-3339. Not to be used for
            pagination purposes.
          example: 2020-01-01T01:02:03+10:00
          in: query
          name: filter[since]
          required: false
          schema:
            format: date-time
            type: string
        - description: |
            The end date-time up to which to return records,
            formatted according to rfc-3339. Not to be used for
            pagination purposes.
          example: 2020-02-01T01:02:03+10:00
          in: query
          name: filter[until]
          required: false
          schema:
            format: date-time
            type: string
        - description: |
            The category identifier for which to filter transactions.
            Both parent and child categories can be filtered through
            this parameter. Providing an invalid category identifier
            results in a `404` response.
          example: good-life
          in: query
          name: filter[category]
          required: false
          schema:
            type: string
        - description: |
            A transaction tag to filter for which to return records.
            If the tag does not exist, zero records are returned and
            a success response is given.
          example: Holiday
          in: query
          name: filter[tag]
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTransactionsResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:p5OsA0UQU85Tto4g
              pathParameters:
                accountId: 654cd41a-6f6d-4c2f-a1dd-5ad42c5ea175
              payload: null
              queryParameters:
                "filter[category]": good-life
                "filter[status]": HELD
                "page[size]": 1
            response:
              data:
                - attributes:
                    amount:
                      currencyCode: AUD
                      value: "-11.95"
                      valueInBaseUnits: -1195
                    cashback: null
                    createdAt: 2022-01-10T10:41:42+11:00
                    description: Spotify
                    foreignAmount: null
                    holdInfo:
                      amount:
                        currencyCode: AUD
                        value: "-11.95"
                        valueInBaseUnits: -1195
                      foreignAmount: null
                    isCategorizable: true
                    message: null
                    rawText: Spotify 0123456789
                    roundUp: null
                    settledAt: null
                    status: HELD
                  id: d3726667-719e-4202-b889-cee39dfedb70
                  links:
                    self: https://api.up.com.au/api/v1/transactions/d3726667-719e-4202-b889-cee39dfedb70
                  relationships:
                    account:
                      data:
                        id: 654cd41a-6f6d-4c2f-a1dd-5ad42c5ea175
                        type: accounts
                      links:
                        related: https://api.up.com.au/api/v1/accounts/654cd41a-6f6d-4c2f-a1dd-5ad42c5ea175
                    category:
                      data:
                        id: tv-and-music
                        type: categories
                      links:
                        related: https://api.up.com.au/api/v1/categories/tv-and-music
                        self: https://api.up.com.au/api/v1/transactions/d3726667-719e-4202-b889-cee39dfedb70/relationships/category
                    parentCategory:
                      data:
                        id: good-life
                        type: categories
                      links:
                        related: https://api.up.com.au/api/v1/categories/good-life
                    tags:
                      data: []
                      links:
                        self: https://api.up.com.au/api/v1/transactions/d3726667-719e-4202-b889-cee39dfedb70/relationships/tags
                    transferAccount:
                      data: null
                  type: transactions
              links:
                next: null
                prev: null
            type: exampleRequestResponse
      summary: List transactions by account
      tags:
        - Transactions
  "/accounts/{id}":
    get:
      description: |
        Retrieve a specific account by providing its unique identifier.
      parameters:
        - description: |
            The unique identifier for the account.
          example: 92b41408-6b7b-4fca-982b-3fb1fdd77220
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAccountResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:DpnDo3VeOQrhTq13
              pathParameters:
                id: c2b6547c-6189-42b8-bd63-3993761825a0
              payload: null
              queryParameters: {}
            response:
              data:
                attributes:
                  accountType: SAVER
                  balance:
                    currencyCode: AUD
                    value: "125.36"
                    valueInBaseUnits: 12536
                  createdAt: 2022-01-13T14:50:15+11:00
                  displayName: 🐷 Savings
                  ownershipType: INDIVIDUAL
                id: c2b6547c-6189-42b8-bd63-3993761825a0
                links:
                  self: https://api.up.com.au/api/v1/accounts/c2b6547c-6189-42b8-bd63-3993761825a0
                relationships:
                  transactions:
                    links:
                      related: https://api.up.com.au/api/v1/accounts/c2b6547c-6189-42b8-bd63-3993761825a0/transactions
                type: accounts
            type: exampleRequestResponse
      summary: Retrieve account
      tags:
        - Accounts
  /categories:
    get:
      description: |
        Retrieve a list of all categories and their ancestry. The returned list
        is not paginated.
      parameters:
        - description: |
            The unique identifier of a parent category for which to
            return only its children. Providing an invalid category
            identifier results in a `404` response.
          example: good-life
          in: query
          name: filter[parent]
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCategoriesResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:WPt3A6fzd8WAsLLP
              pathParameters: {}
              payload: null
              queryParameters:
                "filter[parent]": good-life
            response:
              data:
                - attributes:
                    name: Hobbies
                  id: hobbies
                  links:
                    self: https://api.up.com.au/api/v1/categories/hobbies
                  relationships:
                    children:
                      data: []
                      links:
                        related: https://api.up.com.au/api/v1/categories?filter%5Bparent%5D=hobbies
                    parent:
                      data:
                        id: good-life
                        type: categories
                      links:
                        related: https://api.up.com.au/api/v1/categories/good-life
                  type: categories
                - attributes:
                    name: Restaurants & Cafes
                  id: restaurants-and-cafes
                  links:
                    self: https://api.up.com.au/api/v1/categories/restaurants-and-cafes
                  relationships:
                    children:
                      data: []
                      links:
                        related: https://api.up.com.au/api/v1/categories?filter%5Bparent%5D=restaurants-and-cafes
                    parent:
                      data:
                        id: good-life
                        type: categories
                      links:
                        related: https://api.up.com.au/api/v1/categories/good-life
                  type: categories
            type: exampleRequestResponse
      summary: List categories
      tags:
        - Categories
  "/categories/{id}":
    get:
      description: |
        Retrieve a specific category by providing its unique identifier.
      parameters:
        - description: |
            The unique identifier for the category.
          example: restaurants-and-cafes
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCategoryResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:tOnteWbP5FzK52tt
              pathParameters:
                id: home
              payload: null
              queryParameters: {}
            response:
              data:
                attributes:
                  name: Home
                id: home
                links:
                  self: https://api.up.com.au/api/v1/categories/home
                relationships:
                  children:
                    data:
                      - id: groceries
                        type: categories
                    links:
                      related: https://api.up.com.au/api/v1/categories?filter%5Bparent%5D=home
                  parent:
                    data: null
                type: categories
            type: exampleRequestResponse
      summary: Retrieve category
      tags:
        - Categories
  /tags:
    get:
      description: |
        Retrieve a list of all tags currently in use. The returned list is
        [paginated](#pagination) and can be scrolled by following the `next`
        and `prev` links where present. Results are ordered lexicographically.
        The `transactions` relationship for each tag exposes a link
        to get the transactions with the given tag.
      parameters:
        - description: |
            The number of records to return in each page.
          example: 50
          in: query
          name: page[size]
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:Z4FAB4Tl7jVHdp3w
              pathParameters: {}
              payload: null
              queryParameters:
                "page[size]": 2
            response:
              data:
                - id: Holiday
                  relationships:
                    transactions:
                      links:
                        related: https://api.up.com.au/api/v1/transactions?filter%5Btag%5D=Holiday
                  type: tags
                - id: Pizza Night
                  relationships:
                    transactions:
                      links:
                        related: https://api.up.com.au/api/v1/transactions?filter%5Btag%5D=Pizza+Night
                  type: tags
              links:
                next: https://api.up.com.au/api/v1/tags?page%5Bafter%5D=WyJQaXp6YSBOaWdodCJd&page%5Bsize%5D=2
                prev: null
            type: exampleRequestResponse
      summary: List tags
      tags:
        - Tags
  /transactions:
    get:
      description: |
        Retrieve a list of all transactions across all accounts for the currently
        authenticated user. The returned list is [paginated](#pagination) and can
        be scrolled by following the `next` and `prev` links where present. To
        narrow the results to a specific date range pass one or both of
        `filter[since]` and `filter[until]` in the query string. These filter
        parameters **should not** be used for pagination. Results are ordered
        newest first to oldest last.
      parameters:
        - description: |
            The number of records to return in each page.
          example: 30
          in: query
          name: page[size]
          required: false
          schema:
            type: integer
        - description: |
            The transaction status for which to return records. This
            can be used to filter `HELD` transactions from those
            that are `SETTLED`.
          example: HELD
          in: query
          name: filter[status]
          required: false
          schema:
            $ref: "#/components/schemas/TransactionStatusEnum"
        - description: |
            The start date-time from which to return records,
            formatted according to rfc-3339. Not to be used for
            pagination purposes.
          example: 2020-01-01T01:02:03+10:00
          in: query
          name: filter[since]
          required: false
          schema:
            format: date-time
            type: string
        - description: |
            The end date-time up to which to return records,
            formatted according to rfc-3339. Not to be used for
            pagination purposes.
          example: 2020-02-01T01:02:03+10:00
          in: query
          name: filter[until]
          required: false
          schema:
            format: date-time
            type: string
        - description: |
            The category identifier for which to filter transactions.
            Both parent and child categories can be filtered through
            this parameter. Providing an invalid category identifier
            results in a `404` response.
          example: good-life
          in: query
          name: filter[category]
          required: false
          schema:
            type: string
        - description: |
            A transaction tag to filter for which to return records.
            If the tag does not exist, zero records are returned and
            a success response is given.
          example: Holiday
          in: query
          name: filter[tag]
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTransactionsResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:9iP9L9BTmcPc1dTh
              pathParameters: {}
              payload: null
              queryParameters:
                "filter[status]": SETTLED
                "filter[tag]": Pizza Night
                "page[size]": 1
            response:
              data:
                - attributes:
                    amount:
                      currencyCode: AUD
                      value: "-59.98"
                      valueInBaseUnits: -5998
                    cashback: null
                    createdAt: 2022-01-12T07:48:33+11:00
                    description: David Taylor
                    foreignAmount: null
                    holdInfo: null
                    isCategorizable: true
                    message: Money for the pizzas last night.
                    rawText: null
                    roundUp: null
                    settledAt: 2022-01-12T07:48:33+11:00
                    status: SETTLED
                  id: f2020933-8b6c-47a8-bb4e-fe5477d876c1
                  links:
                    self: https://api.up.com.au/api/v1/transactions/f2020933-8b6c-47a8-bb4e-fe5477d876c1
                  relationships:
                    account:
                      data:
                        id: 3050a1f9-5157-4b71-99c5-3524c083ecfe
                        type: accounts
                      links:
                        related: https://api.up.com.au/api/v1/accounts/3050a1f9-5157-4b71-99c5-3524c083ecfe
                    category:
                      data: null
                      links:
                        self: https://api.up.com.au/api/v1/transactions/f2020933-8b6c-47a8-bb4e-fe5477d876c1/relationships/category
                    parentCategory:
                      data: null
                    tags:
                      data:
                        - id: Pizza Night
                          type: tags
                      links:
                        self: https://api.up.com.au/api/v1/transactions/f2020933-8b6c-47a8-bb4e-fe5477d876c1/relationships/tags
                    transferAccount:
                      data: null
                  type: transactions
              links:
                next: null
                prev: null
            type: exampleRequestResponse
      summary: List transactions
      tags:
        - Transactions
  "/transactions/{id}":
    get:
      description: |
        Retrieve a specific transaction by providing its unique identifier.
      parameters:
        - description: |
            The unique identifier for the transaction.
          example: 7a9d19f9-106c-4e29-8591-52fc5d8f09c5
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTransactionResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:XLk9FDAi6bniOFR9
              pathParameters:
                id: 7c125426-98b7-4cd5-b899-95db54f5c6c1
              payload: null
              queryParameters: {}
            response:
              data:
                attributes:
                  amount:
                    currencyCode: AUD
                    value: "-107.92"
                    valueInBaseUnits: -10792
                  cashback: null
                  createdAt: 2022-01-10T04:00:00+11:00
                  description: Warung Bebek Bengil
                  foreignAmount:
                    currencyCode: IDR
                    value: "-1053698.77"
                    valueInBaseUnits: -105369877
                  holdInfo:
                    amount:
                      currencyCode: AUD
                      value: "-107.92"
                      valueInBaseUnits: -10792
                    foreignAmount: null
                  isCategorizable: true
                  message: null
                  rawText: WARUNG BEBEK, UBUD INDONES
                  roundUp:
                    amount:
                      currencyCode: AUD
                      value: "-0.08"
                      valueInBaseUnits: -8
                    boostPortion: null
                  settledAt: 2022-01-10T04:00:00+11:00
                  status: SETTLED
                id: 7c125426-98b7-4cd5-b899-95db54f5c6c1
                links:
                  self: https://api.up.com.au/api/v1/transactions/7c125426-98b7-4cd5-b899-95db54f5c6c1
                relationships:
                  account:
                    data:
                      id: 1bf1c1b3-2ea9-48b6-9e94-1bcfcaf56b7d
                      type: accounts
                    links:
                      related: https://api.up.com.au/api/v1/accounts/1bf1c1b3-2ea9-48b6-9e94-1bcfcaf56b7d
                  category:
                    data: null
                    links:
                      self: https://api.up.com.au/api/v1/transactions/7c125426-98b7-4cd5-b899-95db54f5c6c1/relationships/category
                  parentCategory:
                    data: null
                  tags:
                    data: []
                    links:
                      self: https://api.up.com.au/api/v1/transactions/7c125426-98b7-4cd5-b899-95db54f5c6c1/relationships/tags
                  transferAccount:
                    data: null
                type: transactions
            type: exampleRequestResponse
      summary: Retrieve transaction
      tags:
        - Transactions
  "/transactions/{transactionId}/relationships/category":
    patch:
      description: |
        Updates the category associated with a transaction. Only transactions
        for which `isCategorizable` is set to true support this operation. The
        `id` is taken from the list exposed on `/categories` and cannot be one of
        the top-level (parent) categories. To de-categorize a transaction, set
        the entire `data` key to `null`. An HTTP `204` is returned on success.
        The associated category, along with its request URL is also exposed via
        the `category` relationship on the transaction resource returned from
        `/transactions/{id}`.
      parameters:
        - description: |
            The unique identifier for the transaction.
          example: a572c7c3-b637-433c-a4ce-c0be5dcb0a5a
          in: path
          name: transactionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTransactionCategoryRequest"
      responses:
        "204":
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:FGVj7lJzpYRFBcwQ
                Content-Type: application/json
              pathParameters:
                transactionId: 5a010c5d-a058-465a-956b-93809e8bbf16
              payload:
                data:
                  id: restaurants-and-cafes
                  type: categories
              queryParameters: {}
            response: null
            type: exampleRequestResponse
      summary: Categorize transaction
      tags:
        - Categories
  "/transactions/{transactionId}/relationships/tags":
    delete:
      description: |
        Disassociates one or more tags from a specific transaction. Tags that are
        not associated are silently ignored. An HTTP `204` is returned on
        success. The associated tags, along with this request URL, are also
        exposed via the `tags` relationship on the transaction resource returned
        from `/transactions/{id}`.
      parameters:
        - description: |
            The unique identifier for the transaction.
          example: c3feb4ba-829c-4482-b882-1b9bd23da82d
          in: path
          name: transactionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTransactionTagsRequest"
      responses:
        "204":
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:qc6D7GoPamQ09cJH
                Content-Type: application/json
              pathParameters:
                transactionId: 32e050dc-ed36-462c-9cf6-68d5cb64e289
              payload:
                data:
                  - id: Holiday
                    type: tags
                  - id: Queensland
                    type: tags
              queryParameters: {}
            response: null
            type: exampleRequestResponse
      summary: Remove tags from transaction
      tags:
        - Tags
    post:
      description: |
        Associates one or more tags with a specific transaction. No more than 6
        tags may be present on any single transaction. Duplicate tags are
        silently ignored. An HTTP `204` is returned on success. The associated
        tags, along with this request URL, are also exposed via the `tags`
        relationship on the transaction resource returned from
        `/transactions/{id}`.
      parameters:
        - description: |
            The unique identifier for the transaction.
          example: acde4631-db56-49a6-aea3-4e2311ef1d6a
          in: path
          name: transactionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTransactionTagsRequest"
      responses:
        "204":
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:Sr1VvsqAqKngeTQS
                Content-Type: application/json
              pathParameters:
                transactionId: af2f319c-1edd-4386-ad15-5927f7ead3af
              payload:
                data:
                  - id: Holiday
                    type: tags
                  - id: Queensland
                    type: tags
              queryParameters: {}
            response: null
            type: exampleRequestResponse
      summary: Add tags to transaction
      tags:
        - Tags
  /util/ping:
    get:
      description: |
        Make a basic ping request to the API. This is useful to verify that
        authentication is functioning correctly. On authentication success an
        HTTP `200` status is returned. On failure an HTTP `401` error response
        is returned.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:eOr0TZ0qTMpcXWJj
              pathParameters: {}
              payload: null
              queryParameters: {}
            response:
              meta:
                id: 7feb7523-d65e-4b98-9eae-cd521b5005de
                statusEmoji: ⚡️
            type: exampleRequestResponse
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Not Authorized
          x-up:example:
            request:
              headers: {}
              pathParameters: {}
              payload: null
              queryParameters: {}
            response:
              errors:
                - detail: The request was not authenticated because no valid credential was found in the Authorization header, or the Authorization header was not present.
                  status: "401"
                  title: Not Authorized
            type: exampleRequestResponse
      summary: Ping
      tags:
        - Utility endpoints
  /webhooks:
    get:
      description: |
        Retrieve a list of configured webhooks. The returned list is
        [paginated](#pagination) and can be scrolled by following the `next`
        and `prev` links where present. Results are ordered oldest first to
        newest last.
      parameters:
        - description: |
            The number of records to return in each page.
          example: 30
          in: query
          name: page[size]
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWebhooksResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:Id50WZYXl1n7Pb7o
              pathParameters: {}
              payload: null
              queryParameters:
                "page[size]": 1
            response:
              data:
                - attributes:
                    createdAt: 2022-01-11T14:50:43+11:00
                    description: Webhook number 1
                    url: http://example.com/webhook-1
                  id: dcb32837-b686-42eb-82a9-2c173b5b3ee4
                  links:
                    self: https://api.up.com.au/api/v1/webhooks/dcb32837-b686-42eb-82a9-2c173b5b3ee4
                  relationships:
                    logs:
                      links:
                        related: https://api.up.com.au/api/v1/webhooks/dcb32837-b686-42eb-82a9-2c173b5b3ee4/logs
                  type: webhooks
              links:
                next: https://api.up.com.au/api/v1/webhooks?page%5Bafter%5D=WyIyMDIyLTAxLTExVDAzOjUwOjQzLjc1OTEyMzAwMFoiLCJkY2IzMjgzNy1iNjg2LTQyZWItODJhOS0yYzE3M2I1YjNlZTQiXQ%3D%3D&page%5Bsize%5D=1
                prev: null
            type: exampleRequestResponse
      summary: List webhooks
      tags:
        - Webhooks
    post:
      callbacks:
        Event:
          "{webhookURL}":
            post:
              description: |
                Once you have created a webhook in the Up API, events are sent to the
                webhook’s configured URL as JSON-encoded `POST` requests. The webhook
                URL must respond with a HTTP `200` status on success.

                It is important that the URL responds in a timely manner. If the URL
                takes too long to respond (currently 30s), the request will be timed
                out. For this reason it is strongly advised to avoid any heavy
                processing before a response has been returned from the URL. A common
                solution to this problem is to use a message broker such as RabbitMQ
                to do the work asynchronously.

                Event delivery is retried with exponential backoff in the case of any
                non-`200` response status, if the URL is unreachable, or if the request
                is timed out.

                Refer to the `eventType` attribute in order to determine what course of
                action to take when handling the event. The following event types are
                currently sent:

                **`PING`**

                Manually triggered by calls to the webhook `ping` endpoint. Used for
                testing and debugging purposes.

                **`TRANSACTION_CREATED`**

                Triggered whenever a new transaction is created in Up. This event
                includes a `transaction` relationship that provides the unique
                identifier for the transaction and a link to the transaction within the
                Up API. This link should be used to retrieve the complete transaction
                data.

                **`TRANSACTION_SETTLED`**

                Triggered whenever a transaction transitions from the `HELD` status to
                the `SETTLED` status. This event includes a `transaction` relationship
                that provides the unique identifier for the transaction and a link to
                the transaction within the Up API. This link should be used to retrieve
                the complete transaction data.

                Due to external factors in banking processes, on rare occasions this
                event may not be triggered. Separate `TRANSACTION_DELETED` and
                `TRANSACTION_CREATED` events will be received in its place.

                **`TRANSACTION_DELETED`**

                Triggered whenever a `HELD` transaction is deleted from Up. This
                generally occurs for example when a hotel deposit is returned. This
                event includes a `transaction` relationship that provides the unique
                identifier for the transaction, however no link is provided to the
                transaction within the Up API as it no longer exists.

                ## Securing Webhook Event Handlers

                Incoming webhook event requests include a `X-Up-Authenticity-Signature`
                header, which can be used to verify that the event was sent by Up.
                Verification of the signature requires knowledge of the shared
                `secretKey` that was returned upon creation of the webhook. This key is
                known only to your application and to Up.

                The verification process involves:

                1. Taking the raw, unparsed webhook event request body.
                2. Computing the SHA-256 HMAC signature of the request body, using the
                   shared `secretKey`.
                3. Comparing the computed HMAC signature with the value of the
                   `X-Up-Authenticity-Signature` header.

                If the computed SHA-256 HMAC signature matches the
                `X-Up-Authenticity-Signature` header, the request is valid.

                A few language-specific examples follow.

                **Ruby**:

                This example uses the Ruby on Rails framework.

                ```ruby
                require 'openssl'

                def handle_webhook_event
                  received_signature =
                    request.headers['X-Up-Authenticity-Signature']

                  signature = OpenSSL::HMAC.hexdigest(
                    'SHA256',
                    secret_key,
                    request.raw_post,
                  )

                  if Rack::Utils.secure_compare(received_signature, signature)
                    # Process webhook event
                  end
                end
                ```

                **PHP**:

                This example uses the Laravel framework.

                ```php
                public function handleWebhookEvent(Request $request) {
                    $received_signature = $request->header(
                        'X-Up-Authenticity-Signature',
                        ''
                    );
                    $raw_body = $request->getContent();
                    $signature = hash_hmac('sha256', $raw_body, $this->secretKey);

                    if (hash_equals($signature, $received_signature)) {
                        // Process webhook event
                    }
                }
                ```

                **Go**:

                This example is in plain Go.

                ```go
                import (
                    "crypto/hmac"
                    "crypto/sha256"
                    "encoding/hex"
                    "io"
                    "net/http"
                )

                func handleWebhookEvent(w http.ResponseWriter, r *http.Request) {
                    receivedSignature, _ := hex.DecodeString(
                        r.Header.Get("X-Up-Authenticity-Signature"),
                    )

                    mac := hmac.New(sha256.New, secretKey)
                    io.Copy(mac, r.Body)
                    signature := mac.Sum(nil)

                    if hmac.Equal(signature, receivedSignature)
                        // Process webhook event
                    }
                }
                ```

                If the `secretKey` for a webhook is lost, simply create a new webhook
                with the same URL, capture the returned `secretKey` and delete the
                original webhook.
              parameters:
                - description: |
                    The SHA-256 HMAC signature of the raw request body, signed using
                    the `secretKey` of the webhook.
                  example: 317c0a8ea81df3f53c1d2aef5dcbf60492d0df557197b2990e71daa4a0693364
                  in: header
                  name: X-Up-Authenticity-Signature
                  required: false
                  schema:
                    type: string
                - description: Automatically added
                  in: path
                  name: webhookURL
                  required: true
                  schema:
                    type: string
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/WebhookEventCallback"
              responses:
                "200":
                  description: Successful Response
              summary: Handling webhook events
              x-up:example:
                payload:
                  data:
                    attributes:
                      createdAt: 2022-01-13T14:50:45+11:00
                      eventType: TRANSACTION_CREATED
                    id: f23aba64-a992-46e3-a6f9-b162d58bc731
                    relationships:
                      transaction:
                        data:
                          id: 52717f62-f725-4674-94a9-8470decf2c2a
                          type: transactions
                        links:
                          related: https://api.up.com.au/api/v1/transactions/52717f62-f725-4674-94a9-8470decf2c2a
                      webhook:
                        data:
                          id: 8b1744c4-d65c-4d9e-9ab5-3b50512fa867
                          type: webhooks
                        links:
                          related: https://api.up.com.au/api/v1/webhooks/8b1744c4-d65c-4d9e-9ab5-3b50512fa867
                    type: webhook-events
                type: examplePayload
      description: |
        Create a new webhook with a given URL. The URL will receive webhook
        events as JSON-encoded `POST` requests. The URL must respond with a HTTP
        `200` status on success.

        There is currently a limit of 10 webhooks at any given time. Once this
        limit is reached, existing webhooks will need to be deleted before new
        webhooks can be created.

        Event delivery is retried with exponential backoff if the URL is
        unreachable or it does not respond with a `200` status. The response
        includes a `secretKey` attribute, which is used to sign requests sent to
        the webhook URL. It will not be returned from any other endpoints within
        the Up API. If the `secretKey` is lost, simply create a new webhook with
        the same URL, capture its `secretKey` and then delete the original
        webhook. See [Handling webhook events](#callback_post_webhookURL) for
        details on how to process webhook events.

        It is probably a good idea to test the webhook by
        [sending it a `PING` event](#post_webhooks_webhookId_ping) after creating
        it.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWebhookRequest"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWebhookResponse"
          description: Created
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:Q8zq1dRpYtsGeGHE
                Content-Type: application/json
              pathParameters: {}
              payload:
                data:
                  attributes:
                    description: Example webhook
                    url: http://example.com/webhook
              queryParameters: {}
            response:
              data:
                attributes:
                  createdAt: 2022-01-13T14:50:44+11:00
                  description: Example webhook
                  secretKey: 5l2wSJIvC01gD2W2GZ6XPHN7SEg2cXUWWKf7xiVLdk0Qsmuu9NHDmNV3M5DxVDg6
                  url: http://example.com/webhook
                id: 4229772e-3558-46c9-8df1-526b7c0632bc
                links:
                  self: https://api.up.com.au/api/v1/webhooks/4229772e-3558-46c9-8df1-526b7c0632bc
                relationships:
                  logs:
                    links:
                      related: https://api.up.com.au/api/v1/webhooks/4229772e-3558-46c9-8df1-526b7c0632bc/logs
                type: webhooks
            type: exampleRequestResponse
      summary: Create webhook
      tags:
        - Webhooks
  "/webhooks/{id}":
    delete:
      description: |
        Delete a specific webhook by providing its unique identifier. Once
        deleted, webhook events will no longer be sent to the configured URL.
      parameters:
        - description: |
            The unique identifier for the webhook.
          example: a940825b-80b6-4798-b378-c6284259b4c5
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:DSduRSY7s3nReT16
              pathParameters:
                id: b2daaed4-4403-44fd-acec-9f9b8ceba5d9
              payload: null
              queryParameters: {}
            response: null
            type: exampleRequestResponse
      summary: Delete webhook
      tags:
        - Webhooks
    get:
      description: |
        Retrieve a specific webhook by providing its unique identifier.
      parameters:
        - description: |
            The unique identifier for the webhook.
          example: c8283a72-24b0-4fd8-9b13-fccccab371e5
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWebhookResponse"
          description: Successful Response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:6qAFUokK7x5aUTSL
              pathParameters:
                id: 4485694d-d057-4e7f-879c-0886d2092a71
              payload: null
              queryParameters: {}
            response:
              data:
                attributes:
                  createdAt: 2022-01-12T14:50:46+11:00
                  description: Webhook number 2
                  url: http://example.com/webhook-2
                id: 4485694d-d057-4e7f-879c-0886d2092a71
                links:
                  self: https://api.up.com.au/api/v1/webhooks/4485694d-d057-4e7f-879c-0886d2092a71
                relationships:
                  logs:
                    links:
                      related: https://api.up.com.au/api/v1/webhooks/4485694d-d057-4e7f-879c-0886d2092a71/logs
                type: webhooks
            type: exampleRequestResponse
      summary: Retrieve webhook
      tags:
        - Webhooks
  "/webhooks/{webhookId}/logs":
    get:
      description: |
        Retrieve a list of delivery logs for a webhook by providing its unique
        identifier. This is useful for analysis and debugging purposes. The
        returned list is [paginated](#pagination) and can be scrolled by
        following the `next` and `prev` links where present. Results are ordered
        newest first to oldest last. Logs may be automatically purged after a
        period of time.
      parameters:
        - description: |
            The unique identifier for the webhook.
          example: 7104f5df-4993-495f-9d29-2b4d062c03a9
          in: path
          name: webhookId
          required: true
          schema:
            type: string
        - description: |
            The number of records to return in each page.
          example: 30
          in: query
          name: page[size]
          required: false
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWebhookDeliveryLogsResponse"
          description: Successful response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:TONkbYAMSJJAbHbp
              pathParameters:
                webhookId: 117454bf-46ad-4be9-be0f-cadabf14e2c9
              payload: null
              queryParameters:
                "page[size]": 1
            response:
              data:
                - attributes:
                    createdAt: 2022-01-12T14:51:50+11:00
                    deliveryStatus: DELIVERED
                    request:
                      body: '{"data":{"type":"webhook-events","id":"2347d5a4-78c8-47f8-b858-6a6f7ed8cd10","attributes":{"eventType":"TRANSACTION_CREATED","createdAt":"2022-01-12T14:51:50+11:00"},"relationships":{"webhook":{"data":{"type":"webhooks","id":"117454bf-46ad-4be9-be0f-cadabf14e2c9"},"links":{"related":"https://api.up.com.au/api/v1/webhooks/117454bf-46ad-4be9-be0f-cadabf14e2c9"}},"transaction":{"data":{"type":"transactions","id":"346eeb5b-43ba-4a5b-a747-667d72bef559"},"links":{"related":"https://api.up.com.au/api/v1/transactions/346eeb5b-43ba-4a5b-a747-667d72bef559"}}}}}'
                    response:
                      body: '{"ok":true}'
                      statusCode: 200
                  id: 2482a02f-ebec-42a0-a09f-eb15843378d9
                  relationships:
                    webhookEvent:
                      data:
                        id: 2347d5a4-78c8-47f8-b858-6a6f7ed8cd10
                        type: webhook-events
                  type: webhook-delivery-logs
              links:
                next: https://api.up.com.au/api/v1/webhooks/117454bf-46ad-4be9-be0f-cadabf14e2c9/logs?page%5Bafter%5D=WyIyMDIyLTAxLTEyVDAzOjUxOjUwLjYyNTgwODAwMFoiLCIyNDgyYTAyZi1lYmVjLTQyYTAtYTA5Zi1lYjE1ODQzMzc4ZDkiXQ%3D%3D&page%5Bsize%5D=1
                prev: null
            type: exampleRequestResponse
      summary: List webhook logs
      tags:
        - Webhooks
  "/webhooks/{webhookId}/ping":
    post:
      description: |
        Send a `PING` event to a webhook by providing its unique identifier.
        This is useful for testing and debugging purposes. The event is delivered
        asynchronously and its data is returned in the response to this request.
      parameters:
        - description: |
            The unique identifier for the webhook.
          example: 830e127d-fb89-4400-92bb-f3f48289dcba
          in: path
          name: webhookId
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookEventCallback"
          description: Successful response
          x-up:example:
            request:
              headers:
                Authorization: Bearer up:demo:oLDKm4XoYRcboJD3
                Content-Type: application/json
              pathParameters:
                webhookId: c673b0fa-caee-4d05-9fa6-9a76ee58f838
              payload: ""
              queryParameters: {}
            response:
              data:
                attributes:
                  createdAt: 2022-01-13T14:50:48+11:00
                  eventType: PING
                id: f0adb047-e63e-41d7-bdba-263c38f14581
                relationships:
                  webhook:
                    data:
                      id: c673b0fa-caee-4d05-9fa6-9a76ee58f838
                      type: webhooks
                    links:
                      related: https://api.up.com.au/api/v1/webhooks/c673b0fa-caee-4d05-9fa6-9a76ee58f838
                type: webhook-events
            type: exampleRequestResponse
      summary: Ping webhook
      tags:
        - Webhooks
components:
  schemas:
    AccountResource:
      description: |
        Provides information about an Up bank account.
      properties:
        attributes:
          properties:
            accountType:
              allOf:
                - $ref: "#/components/schemas/AccountTypeEnum"
              description: |
                The bank account type of this account.
            balance:
              allOf:
                - $ref: "#/components/schemas/MoneyObject"
              description: |
                The available balance of the account, taking into account any amounts
                that are currently on hold.
            createdAt:
              description: |
                The date-time at which this account was first opened.
              format: date-time
              type: string
            displayName:
              description: |
                The name associated with the account in the Up application.
              type: string
            ownershipType:
              allOf:
                - $ref: "#/components/schemas/OwnershipTypeEnum"
              description: |
                The ownership structure for this account.
          required:
            - displayName
            - accountType
            - ownershipType
            - balance
            - createdAt
          type: object
        id:
          description: |
            The unique identifier for this account.
          type: string
        links:
          properties:
            self:
              description: |
                The canonical link to this resource within the API.
              type: string
          required:
            - self
          type: object
        relationships:
          properties:
            transactions:
              properties:
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              type: object
          required:
            - transactions
          type: object
        type:
          description: "The type of this resource: `accounts`"
          type: string
      required:
        - type
        - id
        - attributes
        - relationships
      type: object
    AccountTypeEnum:
      description: |
        Specifies the type of bank account. Currently returned values are `SAVER`
        and `TRANSACTIONAL`.
      enum:
        - SAVER
        - TRANSACTIONAL
    CashbackObject:
      description: |
        Provides information about an instant reimbursement in the form of
        cashback.
      properties:
        amount:
          allOf:
            - $ref: "#/components/schemas/MoneyObject"
          description: |
            The total amount of cashback paid, represented as a positive value.
        description:
          description: |
            A brief description of why this cashback was paid.
          type: string
      required:
        - description
        - amount
      type: object
    CategoryInputResourceIdentifier:
      description: |
        Uniquely identifies a category in the API.
      properties:
        id:
          description: |
            The unique identifier of the category, as returned by the `/categories`
            endpoint.
          type: string
        type:
          description: "The type of this resource: `categories`"
          type: string
      required:
        - type
        - id
      type: object
    CategoryResource:
      description: |
        Provides information about a category and its ancestry.
      properties:
        attributes:
          properties:
            name:
              description: |
                The name of this category as seen in the Up application.
              type: string
          required:
            - name
          type: object
        id:
          description: |
            The unique identifier for this category. This is a human-readable but
            URL-safe value.
          type: string
        links:
          properties:
            self:
              description: |
                The canonical link to this resource within the API.
              type: string
          required:
            - self
          type: object
        relationships:
          properties:
            children:
              properties:
                data:
                  items:
                    properties:
                      id:
                        description: |
                          The unique identifier of the resource within its type.
                        type: string
                      type:
                        description: "The type of this resource: `categories`"
                        type: string
                    required:
                      - type
                      - id
                    type: object
                  type: array
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              required:
                - data
              type: object
            parent:
              properties:
                data:
                  nullable: true
                  properties:
                    id:
                      description: |
                        The unique identifier of the resource within its type.
                      type: string
                    type:
                      description: "The type of this resource: `categories`"
                      type: string
                  required:
                    - type
                    - id
                  type: object
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              required:
                - data
              type: object
          required:
            - parent
            - children
          type: object
        type:
          description: "The type of this resource: `categories`"
          type: string
      required:
        - type
        - id
        - attributes
        - relationships
      type: object
    CreateWebhookRequest:
      description: |
        Request to create a new webhook. This currently only requires a `url`
        attribute.
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/WebhookInputResource"
          description: |
            The webhook resource to create.
      required:
        - data
      type: object
    CreateWebhookResponse:
      description: |
        Successful response after creating a webhook.
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/WebhookResource"
          description: |
            The webhook that was created.
      required:
        - data
      type: object
    ErrorObject:
      description: |
        Provides information about an error processing a request.
      properties:
        detail:
          description: |
            A detailed description of this error. This should be considered unique
            to individual occurrences of an error and subject to change. It is
            useful for debugging purposes.
          type: string
        source:
          description: |
            If applicable, location in the request that this error relates to. This
            may be a parameter in the query string, or a an attribute in the
            request body.
          properties:
            parameter:
              description: |
                If this error relates to a query parameter, the name of the
                parameter.
              type: string
            pointer:
              description: |
                If this error relates to an attribute in the request body, a
                rfc-6901 JSON pointer to the attribute.
              type: string
          type: object
        status:
          description: |
            The HTTP status code associated with this error. This can also be
            obtained from the response headers. The status indicates the broad type
            of error according to HTTP semantics.
          type: string
        title:
          description: |
            A short description of this error. This should be stable across
            multiple occurrences of this type of error and typically expands on the
            reason for the status code.
          type: string
      required:
        - status
        - title
        - detail
      type: object
    ErrorResponse:
      description: |
        Generic error response that returns one or more errors.
      properties:
        errors:
          description: |
            The list of errors returned in this response.
          items:
            $ref: "#/components/schemas/ErrorObject"
          type: array
      required:
        - errors
      type: object
    GetAccountResponse:
      description: |
        Successful response to get a single account.
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/AccountResource"
          description: |
            The account returned in this response.
      required:
        - data
      type: object
    GetCategoryResponse:
      description: |
        Successful response to get a single category and its ancestry.
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/CategoryResource"
          description: |
            The category returned in this response.
      required:
        - data
      type: object
    GetTransactionResponse:
      description: |
        Successful response to get a single transaction.
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/TransactionResource"
          description: |
            The transaction returned in this response.
      required:
        - data
      type: object
    GetWebhookResponse:
      description: |
        Successful response to get a single webhook.
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/WebhookResource"
          description: |
            The webhook returned in this response.
      required:
        - data
      type: object
    HoldInfoObject:
      description: |
        Provides information about the amount at which a transaction was in the
        `HELD` status.
      properties:
        amount:
          allOf:
            - $ref: "#/components/schemas/MoneyObject"
          description: |
            The amount of this transaction while in the `HELD` status, in
            Australian dollars.
        foreignAmount:
          allOf:
            - $ref: "#/components/schemas/MoneyObject"
          description: |
            The foreign currency amount of this transaction while in the `HELD`
            status. This field will be `null` for domestic transactions. The amount
            was converted to the AUD amount reflected in the `amount` field.
          nullable: true
      required:
        - amount
        - foreignAmount
      type: object
    ListAccountsResponse:
      description: |
        Successful response to get all accounts. This returns a paginated list of
        accounts, which can be scrolled by following the `prev` and `next` links
        if present.
      properties:
        data:
          description: |
            The list of accounts returned in this response.
          items:
            $ref: "#/components/schemas/AccountResource"
          type: array
        links:
          properties:
            next:
              description: |
                The link to the next page in the results. If this value is `null`
                there is no next page.
              nullable: true
              type: string
            prev:
              description: |
                The link to the previous page in the results. If this value is `null`
                there is no previous page.
              nullable: true
              type: string
          required:
            - prev
            - next
          type: object
      required:
        - data
        - links
      type: object
    ListCategoriesResponse:
      description: |
        Successful response to get all categories and their ancestry. The
        returned list is not paginated.
      properties:
        data:
          description: |
            The list of categories returned in this response.
          items:
            $ref: "#/components/schemas/CategoryResource"
          type: array
      required:
        - data
      type: object
    ListTagsResponse:
      description: |
        Successful response to get all tags. This returns a paginated list of
        tags, which can be scrolled by following the `prev` and `next` links if
        present.
      properties:
        data:
          description: |
            The list of tags returned in this response.
          items:
            $ref: "#/components/schemas/TagResource"
          type: array
        links:
          properties:
            next:
              description: |
                The link to the next page in the results. If this value is `null`
                there is no next page.
              nullable: true
              type: string
            prev:
              description: |
                The link to the previous page in the results. If this value is `null`
                there is no previous page.
              nullable: true
              type: string
          required:
            - prev
            - next
          type: object
      required:
        - data
        - links
      type: object
    ListTransactionsResponse:
      description: |
        Successful response to get all transactions. This returns a paginated
        list of transactions, which can be scrolled by following the `prev` and
        `next` links if present.
      properties:
        data:
          description: |
            The list of transactions returned in this response.
          items:
            $ref: "#/components/schemas/TransactionResource"
          type: array
        links:
          properties:
            next:
              description: |
                The link to the next page in the results. If this value is `null`
                there is no next page.
              nullable: true
              type: string
            prev:
              description: |
                The link to the previous page in the results. If this value is `null`
                there is no previous page.
              nullable: true
              type: string
          required:
            - prev
            - next
          type: object
      required:
        - data
        - links
      type: object
    ListWebhookDeliveryLogsResponse:
      description: |
        Successful response to get all delivery logs for a webhook. This returns
        a paginated list of delivery logs, which can be scrolled by following the
        `next` and `prev` links if present.
      properties:
        data:
          description: |
            The list of delivery logs returned in this response.
          items:
            $ref: "#/components/schemas/WebhookDeliveryLogResource"
          type: array
        links:
          properties:
            next:
              description: |
                The link to the next page in the results. If this value is `null`
                there is no next page.
              nullable: true
              type: string
            prev:
              description: |
                The link to the previous page in the results. If this value is `null`
                there is no previous page.
              nullable: true
              type: string
          required:
            - prev
            - next
          type: object
      required:
        - data
        - links
      type: object
    ListWebhooksResponse:
      description: |
        Successful response to get all webhooks. This returns a paginated list of
        webhooks, which can be scrolled by following the `prev` and `next` links
        if present.
      properties:
        data:
          description: |
            The list of webhooks returned in this response.
          items:
            $ref: "#/components/schemas/WebhookResource"
          type: array
        links:
          properties:
            next:
              description: |
                The link to the next page in the results. If this value is `null`
                there is no next page.
              nullable: true
              type: string
            prev:
              description: |
                The link to the previous page in the results. If this value is `null`
                there is no previous page.
              nullable: true
              type: string
          required:
            - prev
            - next
          type: object
      required:
        - data
        - links
      type: object
    MoneyObject:
      description: |
        Provides information about a value of money.
      properties:
        currencyCode:
          description: |
            The ISO 4217 currency code.
          type: string
        value:
          description: |
            The amount of money, formatted as a string in the relevant currency.
            For example, for an Australian dollar value of $10.56, this field will
            be `"10.56"`. The currency symbol is not included in the string.
          type: string
        valueInBaseUnits:
          description: |
            The amount of money in the smallest denomination for the currency, as a
            64-bit integer.  For example, for an Australian dollar value of $10.56,
            this field will be `1056`.
          type: integer
      required:
        - currencyCode
        - value
        - valueInBaseUnits
      type: object
    OwnershipTypeEnum:
      description: |
        Specifies the structure under which a bank account is owned. Currently
        returned values are `INDIVIDUAL` and `JOINT`.
      enum:
        - INDIVIDUAL
        - JOINT
    PingResponse:
      description: |
        Basic ping response to verify authentication.
      properties:
        meta:
          properties:
            id:
              description: |
                The unique identifier of the authenticated customer.
              type: string
            statusEmoji:
              description: |
                A cute emoji that represents the response status.
              type: string
          required:
            - id
            - statusEmoji
          type: object
      required:
        - meta
      type: object
    RoundUpObject:
      description: |
        Provides information about how a Round Up was applied, such as whether or
        not a boost was included in the Round Up.
      properties:
        amount:
          allOf:
            - $ref: "#/components/schemas/MoneyObject"
          description: |
            The total amount of this Round Up, including any boosts, represented as
            a negative value.
        boostPortion:
          allOf:
            - $ref: "#/components/schemas/MoneyObject"
          description: |
            The portion of the Round Up `amount` owing to boosted Round Ups,
            represented as a negative value. If no boost was added to the Round Up
            this field will be `null`.
          nullable: true
      required:
        - amount
        - boostPortion
      type: object
    TagInputResourceIdentifier:
      description: |
        Uniquely identifies a single tag in the API.
      properties:
        id:
          description: |
            The label of the tag, which also acts as the tag’s unique identifier.
          type: string
        type:
          description: "The type of this resource: `tags`"
          type: string
      required:
        - type
        - id
      type: object
    TagResource:
      description: |
        Provides information about a tag.
      properties:
        id:
          description: |
            The label of the tag, which also acts as the tag’s unique identifier.
          type: string
        relationships:
          properties:
            transactions:
              properties:
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              type: object
          required:
            - transactions
          type: object
        type:
          description: "The type of this resource: `tags`"
          type: string
      required:
        - type
        - id
        - relationships
      type: object
    TransactionResource:
      properties:
        attributes:
          properties:
            amount:
              allOf:
                - $ref: "#/components/schemas/MoneyObject"
              description: |
                The amount of this transaction in Australian dollars. For
                transactions that were once `HELD` but are now `SETTLED`, refer to
                the `holdInfo` field for the original `amount` the transaction was
                `HELD` at.
            cashback:
              allOf:
                - $ref: "#/components/schemas/CashbackObject"
              description: |
                If all or part of this transaction was instantly reimbursed in the
                form of cashback, details of the reimbursement.
              nullable: true
            createdAt:
              description: |
                The date-time at which this transaction was first encountered.
              format: date-time
              type: string
            description:
              description: |
                A short description for this transaction. Usually the merchant name
                for purchases.
              type: string
            foreignAmount:
              allOf:
                - $ref: "#/components/schemas/MoneyObject"
              description: |
                The foreign currency amount of this transaction. This field will be
                `null` for domestic transactions. The amount was converted to the AUD
                amount reflected in the `amount` of this transaction. Refer to the
                `holdInfo` field for the original `foreignAmount` the transaction was
                `HELD` at.
              nullable: true
            holdInfo:
              allOf:
                - $ref: "#/components/schemas/HoldInfoObject"
              description: |
                If this transaction is currently in the `HELD` status, or was ever in
                the `HELD` status, the `amount` and `foreignAmount` of the
                transaction while `HELD`.
              nullable: true
            isCategorizable:
              description: |
                Boolean flag set to true on transactions that support the use of
                categories.
              type: boolean
            message:
              description: |
                Attached message for this transaction, such as a payment message, or a
                transfer note.
              nullable: true
              type: string
            rawText:
              description: |
                The original, unprocessed text of the transaction. This is often not
                a perfect indicator of the actual merchant, but it is useful for
                reconciliation purposes in some cases.
              nullable: true
              type: string
            roundUp:
              allOf:
                - $ref: "#/components/schemas/RoundUpObject"
              description: |
                Details of how this transaction was rounded-up. If no Round Up was
                applied this field will be `null`.
              nullable: true
            settledAt:
              description: |
                The date-time at which this transaction settled. This field will be
                `null` for transactions that are currently in the `HELD` status.
              format: date-time
              nullable: true
              type: string
            status:
              allOf:
                - $ref: "#/components/schemas/TransactionStatusEnum"
              description: |
                The current processing status of this transaction, according to
                whether or not this transaction has settled or is still held.
          required:
            - status
            - rawText
            - description
            - message
            - isCategorizable
            - holdInfo
            - roundUp
            - cashback
            - amount
            - foreignAmount
            - settledAt
            - createdAt
          type: object
        id:
          description: |
            The unique identifier for this transaction.
          type: string
        links:
          properties:
            self:
              description: |
                The canonical link to this resource within the API.
              type: string
          required:
            - self
          type: object
        relationships:
          properties:
            account:
              properties:
                data:
                  properties:
                    id:
                      description: |
                        The unique identifier of the resource within its type.
                      type: string
                    type:
                      description: "The type of this resource: `accounts`"
                      type: string
                  required:
                    - type
                    - id
                  type: object
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              required:
                - data
              type: object
            category:
              properties:
                data:
                  nullable: true
                  properties:
                    id:
                      description: |
                        The unique identifier of the resource within its type.
                      type: string
                    type:
                      description: "The type of this resource: `categories`"
                      type: string
                  required:
                    - type
                    - id
                  type: object
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                    self:
                      description: |
                        The link to retrieve or modify linkage between this resources and the
                        related resource(s) in this relationship.
                      type: string
                  required:
                    - self
                  type: object
              required:
                - data
              type: object
            parentCategory:
              properties:
                data:
                  nullable: true
                  properties:
                    id:
                      description: |
                        The unique identifier of the resource within its type.
                      type: string
                    type:
                      description: "The type of this resource: `categories`"
                      type: string
                  required:
                    - type
                    - id
                  type: object
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              required:
                - data
              type: object
            tags:
              properties:
                data:
                  items:
                    properties:
                      id:
                        description: |
                          The label of the tag, which also acts as the tag’s unique identifier.
                        type: string
                      type:
                        description: "The type of this resource: `tags`"
                        type: string
                    required:
                      - type
                      - id
                    type: object
                  type: array
                links:
                  properties:
                    self:
                      description: |
                        The link to retrieve or modify linkage between this resources and the
                        related resource(s) in this relationship.
                      type: string
                  required:
                    - self
                  type: object
              required:
                - data
              type: object
            transferAccount:
              description: |
                If this transaction is a transfer between accounts, this relationship
                will contain the account the transaction went to/came from. The
                `amount` field can be used to determine the direction of the transfer.
              properties:
                data:
                  nullable: true
                  properties:
                    id:
                      description: |
                        The unique identifier of the resource within its type.
                      type: string
                    type:
                      description: "The type of this resource: `accounts`"
                      type: string
                  required:
                    - type
                    - id
                  type: object
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              required:
                - data
              type: object
          required:
            - account
            - transferAccount
            - category
            - parentCategory
            - tags
          type: object
        type:
          description: "The type of this resource: `transactions`"
          type: string
      required:
        - type
        - id
        - attributes
        - relationships
      type: object
    TransactionStatusEnum:
      description: |
        Specifies which stage of processing a transaction is currently at.
        Currently returned values are `HELD` and `SETTLED`. When a transaction is
        held, its account’s `availableBalance` is affected. When a transaction is
        settled, its account’s `currentBalance` is affected.
      enum:
        - HELD
        - SETTLED
    UpdateTransactionCategoryRequest:
      description: |
        Request to update the category associated with a transaction.
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/CategoryInputResourceIdentifier"
          description: |
            The category to set on the transaction. Set this entire key to `null`
            de-categorize a transaction.
          nullable: true
      required:
        - data
      type: object
    UpdateTransactionTagsRequest:
      description: |
        Request to add or remove tags associated with a transaction.
      properties:
        data:
          description: |
            The tags to add to or remove from the transaction.
          items:
            $ref: "#/components/schemas/TagInputResourceIdentifier"
          type: array
      required:
        - data
      type: object
    WebhookDeliveryLogResource:
      description: |
        Provides historical webhook event delivery information for analysis and
        debugging purposes.
      properties:
        attributes:
          properties:
            createdAt:
              description: |
                The date-time at which this log entry was created.
              format: date-time
              type: string
            deliveryStatus:
              allOf:
                - $ref: "#/components/schemas/WebhookDeliveryStatusEnum"
              description: |
                The success or failure status of this delivery attempt.
            request:
              description: |
                Information about the request that was sent to the webhook URL.
              properties:
                body:
                  description: |
                    The payload that was sent in the request body.
                  type: string
              required:
                - body
              type: object
            response:
              description: |
                Information about the response that was received from the webhook URL.
              nullable: true
              properties:
                body:
                  description: |
                    The payload that was received in the response body.
                  type: string
                statusCode:
                  description: |
                    The HTTP status code received in the response.
                  type: integer
              required:
                - statusCode
                - body
              type: object
          required:
            - request
            - response
            - deliveryStatus
            - createdAt
          type: object
        id:
          description: |
            The unique identifier for this log entry.
          type: string
        relationships:
          properties:
            webhookEvent:
              properties:
                data:
                  properties:
                    id:
                      description: |
                        The unique identifier of the resource within its type.
                      type: string
                    type:
                      description: "The type of this resource: `webhook-events`"
                      type: string
                  required:
                    - type
                    - id
                  type: object
              required:
                - data
              type: object
          required:
            - webhookEvent
          type: object
        type:
          description: "The type of this resource: `webhook-delivery-logs`"
          type: string
      required:
        - type
        - id
        - attributes
        - relationships
      type: object
    WebhookDeliveryStatusEnum:
      description: |
        Specifies the nature of the success or failure of a webhook delivery
        attempt to the subscribed webhook URL. The currently returned values are
        described below:

        - **`DELIVERED`**: The event was delivered to the webhook URL
          successfully and a `200` response was received.
        - **`UNDELIVERABLE`**: The webhook URL was not reachable, or timed out.
        - **`BAD_RESPONSE_CODE`**: The event was delivered to the webhook URL
          but a non-`200` response was received.
      enum:
        - DELIVERED
        - UNDELIVERABLE
        - BAD_RESPONSE_CODE
    WebhookEventCallback:
      description: |
        Asynchronous callback request used for webhook event delivery.
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/WebhookEventResource"
          description: |
            The webhook event data sent to the subscribed webhook.
      required:
        - data
      type: object
    WebhookEventResource:
      description: |
        Provides the event data used in asynchronous webhook event callbacks to
        subscribed endpoints. Webhooks events have defined `eventType`s and may
        optionally relate to other resources within the Up API.
      properties:
        attributes:
          properties:
            createdAt:
              description: |
                The date-time at which this event was generated.
              format: date-time
              type: string
            eventType:
              allOf:
                - $ref: "#/components/schemas/WebhookEventTypeEnum"
              description: |
                The type of this event. This can be used to determine what action to
                take in response to the event.
          required:
            - eventType
            - createdAt
          type: object
        id:
          description: |
            The unique identifier for this event. This will remain constant across
            delivery retries.
          type: string
        relationships:
          properties:
            transaction:
              properties:
                data:
                  properties:
                    id:
                      description: |
                        The unique identifier of the resource within its type.
                      type: string
                    type:
                      description: "The type of this resource: `transactions`"
                      type: string
                  required:
                    - type
                    - id
                  type: object
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              required:
                - data
              type: object
            webhook:
              properties:
                data:
                  properties:
                    id:
                      description: |
                        The unique identifier of the resource within its type.
                      type: string
                    type:
                      description: "The type of this resource: `webhooks`"
                      type: string
                  required:
                    - type
                    - id
                  type: object
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              required:
                - data
              type: object
          required:
            - webhook
          type: object
        type:
          description: "The type of this resource: `webhook-events`"
          type: string
      required:
        - type
        - id
        - attributes
        - relationships
      type: object
    WebhookEventTypeEnum:
      description: |
        Specifies the type of a webhook event. This can be used to determine what
        action to take in response to the event, such as which relationships to
        expect.
      enum:
        - TRANSACTION_CREATED
        - TRANSACTION_SETTLED
        - TRANSACTION_DELETED
        - PING
    WebhookInputResource:
      description: |
        Represents a webhook specified as request input.
      properties:
        attributes:
          properties:
            description:
              description: |
                An optional description for this webhook, up to 64 characters in
                length.
              nullable: true
              type: string
            url:
              description: |
                The URL that this webhook should post events to. This must be a valid
                HTTP or HTTPS URL that does not exceed 300 characters in length.
              format: uri
              type: string
          required:
            - url
          type: object
      required:
        - attributes
      type: object
    WebhookResource:
      description: |
        Provides information about a webhook.
      properties:
        attributes:
          properties:
            createdAt:
              description: |
                The date-time at which this webhook was created.
              format: date-time
              type: string
            description:
              description: |
                An optional description that was provided at the time the webhook was
                created.
              nullable: true
              type: string
            secretKey:
              description: |
                A shared secret key used to sign all webhook events sent to the
                configured webhook URL. This field is returned only once, upon the
                initial creation of the webhook. If lost, create a new webhook and
                delete this webhook.

                The webhook URL receives a request with a
                `X-Up-Authenticity-Signature` header, which is the SHA-256 HMAC of
                the entire raw request body signed using this `secretKey`. It is
                advised to compute and check this signature to verify the
                authenticity of requests sent to the webhook URL. See
                [Handling webhook events](#callback_post_webhookURL) for full
                details.
              type: string
            url:
              description: |
                The URL that this webhook is configured to `POST` events to.
              type: string
          required:
            - url
            - description
            - createdAt
          type: object
        id:
          description: |
            The unique identifier for this webhook.
          type: string
        links:
          properties:
            self:
              description: |
                The canonical link to this resource within the API.
              type: string
          required:
            - self
          type: object
        relationships:
          properties:
            logs:
              properties:
                links:
                  properties:
                    related:
                      description: |
                        The link to retrieve the related resource(s) in this relationship.
                      type: string
                  required:
                    - related
                  type: object
              type: object
          required:
            - logs
          type: object
        type:
          description: "The type of this resource: `webhooks`"
          type: string
      required:
        - type
        - id
        - attributes
        - relationships
      type: object
  securitySchemes:
    bearer_auth:
      scheme: bearer
      type: http
