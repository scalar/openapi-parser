openapi: 3.0.0
info:
  version: 2017-07-25
  x-release: v4
  title: AWS Data Exchange
  description: <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: "#FFFFFF"
  termsOfService: https://aws.amazon.com/service-terms/
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  x-providerName: amazonaws.com
  x-serviceName: dataexchange
  x-aws-signingName: dataexchange
  x-origin:
    - contentType: application/json
      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dataexchange-2017-07-25.normal.json
      converter:
        url: https://github.com/mermade/aws2openapi
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/dataexchange/
servers:
  - url: http://dataexchange.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS Data Exchange multi-region endpoint
  - url: https://dataexchange.{region}.amazonaws.com
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS Data Exchange multi-region endpoint
  - url: http://dataexchange.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Data Exchange endpoint for China (Beijing) and China (Ningxia)
  - url: https://dataexchange.{region}.amazonaws.com.cn
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Data Exchange endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  "/v1/jobs/{JobId}":
    delete:
      operationId: CancelJob
      description: This operation cancels a job. Jobs can be cancelled only when they are in the WAITING state.
      responses:
        "204":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "483":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: JobId
          in: path
          required: true
          description: The unique identifier for a job.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetJob
      description: This operation returns information about a job.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetJobResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: JobId
          in: path
          required: true
          description: The unique identifier for a job.
          schema:
            type: string
    patch:
      operationId: StartJob
      description: This operation starts a job.
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartJobResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "485":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: JobId
          in: path
          required: true
          description: The unique identifier for a job.
          schema:
            type: string
  /v1/data-sets:
    post:
      operationId: CreateDataSet
      description: This operation creates a data set.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDataSetResponse"
        "480":
          description: ServiceLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceLimitExceededException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - AssetType
                - Description
                - Name
              properties:
                AssetType:
                  description: The type of asset that is added to a data set.
                  type: string
                  enum:
                    - S3_SNAPSHOT
                    - REDSHIFT_DATA_SHARE
                    - API_GATEWAY_API
                    - S3_DATA_ACCESS
                    - LAKE_FORMATION_DATA_PERMISSION
                Description:
                  description: A description for the data set. This value can be up to 16,348 characters long.
                  type: string
                Name:
                  description: The name of the data set.
                  type: string
                Tags:
                  description: A data set tag is an optional label that you can assign to a data set when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/__string"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListDataSets
      description: This operation lists your data sets. When listing by origin OWNED, results are sorted by CreatedAt in descending order. When listing by origin ENTITLED, there is no order and the maxResults parameter is ignored.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDataSetsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results returned by a single call.
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - name: nextToken
          in: query
          required: false
          description: The token value retrieved from a previous call to access the next page of results.
          schema:
            type: string
        - name: origin
          in: query
          required: false
          description: A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  /v1/event-actions:
    post:
      operationId: CreateEventAction
      description: This operation creates an event action.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEventActionResponse"
        "480":
          description: ServiceLimitExceededException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceLimitExceededException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Action
                - Event
              properties:
                Action:
                  description: What occurs after a certain event.
                  type: object
                  properties:
                    ExportRevisionToS3:
                      allOf:
                        - $ref: "#/components/schemas/AutoExportRevisionToS3RequestDetails"
                        - description: Details for the export revision to Amazon S3 action.
                Event:
                  description: What occurs to start an action.
                  type: object
                  properties:
                    RevisionPublished:
                      allOf:
                        - $ref: "#/components/schemas/RevisionPublished"
                        - description: What occurs to start the revision publish action.
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListEventActions
      description: This operation lists your event actions.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEventActionsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: eventSourceId
          in: query
          required: false
          description: The unique identifier for the event source.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results returned by a single call.
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - name: nextToken
          in: query
          required: false
          description: The token value retrieved from a previous call to access the next page of results.
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  /v1/jobs:
    post:
      operationId: CreateJob
      description: This operation creates a job.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateJobResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "485":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Details
                - Type
              properties:
                Details:
                  description: The details for the request.
                  type: object
                  properties:
                    ExportAssetToSignedUrl:
                      allOf:
                        - $ref: "#/components/schemas/ExportAssetToSignedUrlRequestDetails"
                        - description: Details about the export to signed URL request.
                    ExportAssetsToS3:
                      allOf:
                        - $ref: "#/components/schemas/ExportAssetsToS3RequestDetails"
                        - description: Details about the export to Amazon S3 request.
                    ExportRevisionsToS3:
                      allOf:
                        - $ref: "#/components/schemas/ExportRevisionsToS3RequestDetails"
                        - description: Details about the export to Amazon S3 request.
                    ImportAssetFromSignedUrl:
                      allOf:
                        - $ref: "#/components/schemas/ImportAssetFromSignedUrlRequestDetails"
                        - description: Details about the import from Amazon S3 request.
                    ImportAssetsFromS3:
                      allOf:
                        - $ref: "#/components/schemas/ImportAssetsFromS3RequestDetails"
                        - description: Details about the import asset from API Gateway API request.
                    ImportAssetsFromRedshiftDataShares:
                      allOf:
                        - $ref: "#/components/schemas/ImportAssetsFromRedshiftDataSharesRequestDetails"
                        - description: Details from an import from Amazon Redshift datashare request.
                    ImportAssetFromApiGatewayApi:
                      allOf:
                        - $ref: "#/components/schemas/ImportAssetFromApiGatewayApiRequestDetails"
                        - description: Details about the import from signed URL request.
                    CreateS3DataAccessFromS3Bucket:
                      allOf:
                        - $ref: "#/components/schemas/CreateS3DataAccessFromS3BucketRequestDetails"
                        - description: Details of the request to create S3 data access from the Amazon S3 bucket.
                    ImportAssetsFromLakeFormationTagPolicy:
                      allOf:
                        - $ref: "#/components/schemas/ImportAssetsFromLakeFormationTagPolicyRequestDetails"
                        - description: Request details for the ImportAssetsFromLakeFormationTagPolicy job.
                Type:
                  description: The type of job to be created.
                  type: string
                  enum:
                    - IMPORT_ASSETS_FROM_S3
                    - IMPORT_ASSET_FROM_SIGNED_URL
                    - EXPORT_ASSETS_TO_S3
                    - EXPORT_ASSET_TO_SIGNED_URL
                    - EXPORT_REVISIONS_TO_S3
                    - IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES
                    - IMPORT_ASSET_FROM_API_GATEWAY_API
                    - CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET
                    - IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListJobs
      description: This operation lists your jobs sorted by CreatedAt in descending order.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListJobsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: dataSetId
          in: query
          required: false
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results returned by a single call.
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - name: nextToken
          in: query
          required: false
          description: The token value retrieved from a previous call to access the next page of results.
          schema:
            type: string
        - name: revisionId
          in: query
          required: false
          description: The unique identifier for a revision.
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  "/v1/data-sets/{DataSetId}/revisions":
    post:
      operationId: CreateRevision
      description: This operation creates a revision for a data set.
      responses:
        "201":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateRevisionResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Comment:
                  description: An optional comment about the revision.
                  type: string
                  minLength: 0
                  maxLength: 16384
                Tags:
                  description: A revision tag is an optional label that you can assign to a revision when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/__string"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: ListDataSetRevisions
      description: This operation lists a data set's revisions sorted by CreatedAt in descending order.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDataSetRevisionsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results returned by a single call.
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - name: nextToken
          in: query
          required: false
          description: The token value retrieved from a previous call to access the next page of results.
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
  "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}":
    delete:
      operationId: DeleteAsset
      description: This operation deletes an asset.
      responses:
        "204":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "485":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: AssetId
          in: path
          required: true
          description: The unique identifier for an asset.
          schema:
            type: string
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: RevisionId
          in: path
          required: true
          description: The unique identifier for a revision.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetAsset
      description: This operation returns information about an asset.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAssetResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: AssetId
          in: path
          required: true
          description: The unique identifier for an asset.
          schema:
            type: string
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: RevisionId
          in: path
          required: true
          description: The unique identifier for a revision.
          schema:
            type: string
    patch:
      operationId: UpdateAsset
      description: This operation updates an asset.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAssetResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "485":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: AssetId
          in: path
          required: true
          description: The unique identifier for an asset.
          schema:
            type: string
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: RevisionId
          in: path
          required: true
          description: The unique identifier for a revision.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Name
              properties:
                Name:
                  description: The name of the asset. When importing from Amazon S3, the Amazon S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target Amazon S3 object key. When importing from Amazon API Gateway API, the API name is used as the asset name. When importing from Amazon Redshift, the datashare name is used as the asset name. When importing from AWS Lake Formation, the static values of "Database(s) included in the LF-tag policy" or "Table(s) included in LF-tag policy" are used as the name.
                  type: string
  "/v1/data-sets/{DataSetId}":
    delete:
      operationId: DeleteDataSet
      description: This operation deletes a data set.
      responses:
        "204":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "485":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetDataSet
      description: This operation returns information about a data set.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataSetResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
    patch:
      operationId: UpdateDataSet
      description: This operation updates a data set.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateDataSetResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  description: The description for the data set.
                  type: string
                Name:
                  description: The name of the data set.
                  type: string
  "/v1/event-actions/{EventActionId}":
    delete:
      operationId: DeleteEventAction
      description: This operation deletes the event action.
      responses:
        "204":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: EventActionId
          in: path
          required: true
          description: The unique identifier for the event action.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetEventAction
      description: This operation retrieves information about an event action.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventActionResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: EventActionId
          in: path
          required: true
          description: The unique identifier for the event action.
          schema:
            type: string
    patch:
      operationId: UpdateEventAction
      description: This operation updates the event action.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateEventActionResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: EventActionId
          in: path
          required: true
          description: The unique identifier for the event action.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Action:
                  description: What occurs after a certain event.
                  type: object
                  properties:
                    ExportRevisionToS3:
                      allOf:
                        - $ref: "#/components/schemas/AutoExportRevisionToS3RequestDetails"
                        - description: Details for the export revision to Amazon S3 action.
  "/v1/data-sets/{DataSetId}/revisions/{RevisionId}":
    delete:
      operationId: DeleteRevision
      description: This operation deletes a revision.
      responses:
        "204":
          description: Success
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "485":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: RevisionId
          in: path
          required: true
          description: The unique identifier for a revision.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    get:
      operationId: GetRevision
      description: This operation returns information about a revision.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRevisionResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: RevisionId
          in: path
          required: true
          description: The unique identifier for a revision.
          schema:
            type: string
    patch:
      operationId: UpdateRevision
      description: This operation updates a revision.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRevisionResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "485":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: RevisionId
          in: path
          required: true
          description: The unique identifier for a revision.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Comment:
                  description: An optional comment about the revision.
                  type: string
                  minLength: 0
                  maxLength: 16384
                Finalized:
                  description: Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.
                  type: boolean
  "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets":
    get:
      operationId: ListRevisionAssets
      description: This operation lists a revision's assets sorted alphabetically in descending order.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRevisionAssetsResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "483":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results returned by a single call.
          schema:
            type: integer
            minimum: 1
            maximum: 200
        - name: nextToken
          in: query
          required: false
          description: The token value retrieved from a previous call to access the next page of results.
          schema:
            type: string
        - name: RevisionId
          in: path
          required: true
          description: The unique identifier for a revision.
          schema:
            type: string
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/tags/{ResourceArn}":
    get:
      operationId: ListTagsForResource
      description: This operation lists the tags on the resource.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsForResourceResponse"
      parameters:
        - name: ResourceArn
          in: path
          required: true
          description: An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
          schema:
            type: string
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
    post:
      operationId: TagResource
      description: This operation tags a resource.
      responses:
        "204":
          description: Success
      parameters:
        - name: ResourceArn
          in: path
          required: true
          description: An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: A label that consists of a customer-defined key and an optional value.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/__string"
  "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/revoke":
    post:
      operationId: RevokeRevision
      description: This operation revokes subscribers' access to a revision.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevokeRevisionResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "484":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "485":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: DataSetId
          in: path
          required: true
          description: The unique identifier for a data set.
          schema:
            type: string
        - name: RevisionId
          in: path
          required: true
          description: The unique identifier for a revision.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - RevocationComment
              properties:
                RevocationComment:
                  description: A required comment to inform subscribers of the reason their access to the revision was revoked.
                  type: string
                  minLength: 10
                  maxLength: 512
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  /v1#x-amzn-dataexchange-asset-id&x-amzn-dataexchange-data-set-id&x-amzn-dataexchange-revision-id:
    post:
      operationId: SendApiAsset
      description: This operation invokes an API Gateway API asset. The request is proxied to the provider’s API Gateway API.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendApiAssetResponse"
        "480":
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceNotFoundException"
        "481":
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThrottlingException"
        "482":
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDeniedException"
        "483":
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationException"
        "484":
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerException"
      parameters:
        - name: QueryStringParameters
          in: query
          required: false
          description: Attach query string parameters to the end of the URI (for example, /v1/examplePath?exampleParam=exampleValue).
          schema:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/__string"
        - name: x-amzn-dataexchange-asset-id
          in: header
          required: true
          description: Asset ID value for the API request.
          schema:
            type: string
        - name: x-amzn-dataexchange-data-set-id
          in: header
          required: true
          description: Data set ID value for the API request.
          schema:
            type: string
        - name: x-amzn-dataexchange-http-method
          in: header
          required: false
          description: HTTP method value for the API request. Alternatively, you can use the appropriate verb in your request.
          schema:
            type: string
        - name: x-amzn-dataexchange-path
          in: header
          required: false
          description: URI path value for the API request. Alternatively, you can set the URI path directly by invoking /v1/{pathValue}.
          schema:
            type: string
        - name: x-amzn-dataexchange-revision-id
          in: header
          required: true
          description: Revision ID value for the API request.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Body:
                  description: The request body.
                  type: string
                x-amzn-dataexchange-header-:
                  description: Any header value prefixed with x-amzn-dataexchange-header- will have that stripped before sending the Asset API request. Use this when you want to override a header that AWS Data Exchange uses. Alternatively, you can use the header without a prefix to the HTTP request.
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/__string"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
  "/tags/{ResourceArn}#tagKeys":
    delete:
      operationId: UntagResource
      description: This operation removes one or more tags from a resource.
      responses:
        "204":
          description: Success
      parameters:
        - name: ResourceArn
          in: path
          required: true
          description: An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
          schema:
            type: string
        - name: tagKeys
          in: query
          required: true
          description: The key tags.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/__string"
    parameters:
      - $ref: "#/components/parameters/X-Amz-Content-Sha256"
      - $ref: "#/components/parameters/X-Amz-Date"
      - $ref: "#/components/parameters/X-Amz-Algorithm"
      - $ref: "#/components/parameters/X-Amz-Credential"
      - $ref: "#/components/parameters/X-Amz-Security-Token"
      - $ref: "#/components/parameters/X-Amz-Signature"
      - $ref: "#/components/parameters/X-Amz-SignedHeaders"
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    ResourceNotFoundException: {}
    ThrottlingException: {}
    ConflictException: {}
    ValidationException: {}
    InternalServerException: {}
    CreateDataSetResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the data set.
        AssetType:
          allOf:
            - $ref: "#/components/schemas/AssetType"
            - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the data set was created, in ISO 8601 format.
        Description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: The description for the data set.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: The name of the data set.
        Origin:
          allOf:
            - $ref: "#/components/schemas/Origin"
            - description: A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          allOf:
            - $ref: "#/components/schemas/OriginDetails"
            - description: If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.
        Tags:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - description: The tags for the data set.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the data set was last updated, in ISO 8601 format.
    __string:
      type: string
    ServiceLimitExceededException: {}
    AccessDeniedException: {}
    CreateEventActionResponse:
      type: object
      properties:
        Action:
          allOf:
            - $ref: "#/components/schemas/Action"
            - description: What occurs after a certain event.
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the event action.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the event action was created, in ISO 8601 format.
        Event:
          allOf:
            - $ref: "#/components/schemas/Event"
            - description: What occurs to start an action.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the event action was last updated, in ISO 8601 format.
    AutoExportRevisionToS3RequestDetails:
      type: object
      required:
        - RevisionDestination
      properties:
        Encryption:
          allOf:
            - $ref: "#/components/schemas/ExportServerSideEncryption"
            - description: Encryption configuration for the auto export job.
        RevisionDestination:
          allOf:
            - $ref: "#/components/schemas/AutoExportRevisionDestinationEntry"
            - description: A revision destination is the Amazon S3 bucket folder destination to where the export will be sent.
      description: Details of the operation to be performed by the job.
    RevisionPublished:
      type: object
      required:
        - DataSetId
      properties:
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The data set ID of the published revision.
      description: Information about the published revision.
    CreateJobResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the job.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the job was created, in ISO 8601 format.
        Details:
          allOf:
            - $ref: "#/components/schemas/ResponseDetails"
            - description: Details about the job.
        Errors:
          allOf:
            - $ref: "#/components/schemas/ListOfJobError"
            - description: The errors associated with jobs.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the job.
        State:
          allOf:
            - $ref: "#/components/schemas/State"
            - description: The state of the job.
        Type:
          allOf:
            - $ref: "#/components/schemas/Type"
            - description: The job type.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the job was last updated, in ISO 8601 format.
    ExportAssetToSignedUrlRequestDetails:
      type: object
      required:
        - AssetId
        - DataSetId
        - RevisionId
      properties:
        AssetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the asset that is exported to a signed URL.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this export job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this export request.
      description: Details of the operation to be performed by the job.
    ExportAssetsToS3RequestDetails:
      type: object
      required:
        - AssetDestinations
        - DataSetId
        - RevisionId
      properties:
        AssetDestinations:
          allOf:
            - $ref: "#/components/schemas/ListOfAssetDestinationEntry"
            - description: The destination for the asset.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this export job.
        Encryption:
          allOf:
            - $ref: "#/components/schemas/ExportServerSideEncryption"
            - description: Encryption configuration for the export job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this export request.
      description: Details of the operation to be performed by the job.
    ExportRevisionsToS3RequestDetails:
      type: object
      required:
        - DataSetId
        - RevisionDestinations
      properties:
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this export job.
        Encryption:
          allOf:
            - $ref: "#/components/schemas/ExportServerSideEncryption"
            - description: Encryption configuration for the export job.
        RevisionDestinations:
          allOf:
            - $ref: "#/components/schemas/ListOfRevisionDestinationEntry"
            - description: The destination for the revision.
      description: Details of the operation to be performed by the job.
    ImportAssetFromSignedUrlRequestDetails:
      type: object
      required:
        - AssetName
        - DataSetId
        - Md5Hash
        - RevisionId
      properties:
        AssetName:
          allOf:
            - $ref: "#/components/schemas/AssetName"
            - description: The name of the asset. When importing from Amazon S3, the Amazon S3 object key is used as the asset name.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this import job.
        Md5Hash:
          allOf:
            - $ref: "#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093"
            - description: The Base64-encoded Md5 hash for the asset, used to ensure the integrity of the file at that location.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this import request.
      description: Details of the operation to be performed by the job.
    ImportAssetsFromS3RequestDetails:
      type: object
      required:
        - AssetSources
        - DataSetId
        - RevisionId
      properties:
        AssetSources:
          allOf:
            - $ref: "#/components/schemas/ListOfAssetSourceEntry"
            - description: Is a list of Amazon S3 bucket and object key pairs.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this import job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this import request.
      description: Details of the operation to be performed by the job.
    ImportAssetsFromRedshiftDataSharesRequestDetails:
      type: object
      required:
        - AssetSources
        - DataSetId
        - RevisionId
      properties:
        AssetSources:
          allOf:
            - $ref: "#/components/schemas/ListOfRedshiftDataShareAssetSourceEntry"
            - description: A list of Amazon Redshift datashare assets.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this import job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this import job.
      description: Details from an import from Amazon Redshift datashare request.
    ImportAssetFromApiGatewayApiRequestDetails:
      type: object
      required:
        - ApiId
        - ApiName
        - ApiSpecificationMd5Hash
        - DataSetId
        - ProtocolType
        - RevisionId
        - Stage
      properties:
        ApiDescription:
          allOf:
            - $ref: "#/components/schemas/ApiDescription"
            - description: The API description. Markdown supported.
        ApiId:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API Gateway API ID.
        ApiKey:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API Gateway API key.
        ApiName:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API name.
        ApiSpecificationMd5Hash:
          allOf:
            - $ref: "#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093"
            - description: The Base64-encoded MD5 hash of the OpenAPI 3.0 JSON API specification file. It is used to ensure the integrity of the file.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The data set ID.
        ProtocolType:
          allOf:
            - $ref: "#/components/schemas/ProtocolType"
            - description: The protocol type.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The revision ID.
        Stage:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API stage.
      description: The request details.
    CreateS3DataAccessFromS3BucketRequestDetails:
      type: object
      required:
        - AssetSource
        - DataSetId
        - RevisionId
      properties:
        AssetSource:
          allOf:
            - $ref: "#/components/schemas/S3DataAccessAssetSourceEntry"
            - description: Details about the S3 data access source asset.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with the creation of this Amazon S3 data access.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for a revision.
      description: Details of the operation to create an Amazon S3 data access from an S3 bucket.
    ImportAssetsFromLakeFormationTagPolicyRequestDetails:
      type: object
      required:
        - CatalogId
        - RoleArn
        - DataSetId
        - RevisionId
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/AwsAccountId"
            - description: The identifier for the AWS Glue Data Catalog.
        Database:
          allOf:
            - $ref: "#/components/schemas/DatabaseLFTagPolicyAndPermissions"
            - description: A structure for the database object.
        Table:
          allOf:
            - $ref: "#/components/schemas/TableLFTagPolicyAndPermissions"
            - description: A structure for the table object.
        RoleArn:
          allOf:
            - $ref: "#/components/schemas/RoleArn"
            - description: The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions of subscribers to AWS Lake Formation data permissions.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this import job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this import job.
      description: Details about the assets imported from an AWS Lake Formation tag policy request.
    CreateRevisionResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the revision.
        Comment:
          allOf:
            - $ref: "#/components/schemas/__stringMin0Max16384"
            - description: An optional comment about the revision.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was created, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with the data set revision.
        Finalized:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.
        Tags:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - description: The tags for the revision.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was last updated, in ISO 8601 format.
        RevocationComment:
          allOf:
            - $ref: "#/components/schemas/__stringMin10Max512"
            - description: A required comment to inform subscribers of the reason their access to the revision was revoked.
        Revoked:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: A status indicating that subscribers' access to the revision was revoked.
        RevokedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was revoked, in ISO 8601 format.
    GetAssetResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the asset.
        AssetDetails:
          allOf:
            - $ref: "#/components/schemas/AssetDetails"
            - description: Details about the asset.
        AssetType:
          allOf:
            - $ref: "#/components/schemas/AssetType"
            - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the asset was created, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this asset.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the asset.
        Name:
          allOf:
            - $ref: "#/components/schemas/AssetName"
            - description: The name of the asset. When importing from Amazon S3, the Amazon S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target Amazon S3 object key. When importing from Amazon API Gateway API, the API name is used as the asset name. When importing from Amazon Redshift, the datashare name is used as the asset name. When importing from AWS Lake Formation, the static values of "Database(s) included in the LF-tag policy" or "Table(s) included in the LF-tag policy" are used as the asset name.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this asset.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The asset ID of the owned asset corresponding to the entitled asset being viewed. This parameter is returned when an asset owner is viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the asset was last updated, in ISO 8601 format.
    GetDataSetResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the data set.
        AssetType:
          allOf:
            - $ref: "#/components/schemas/AssetType"
            - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the data set was created, in ISO 8601 format.
        Description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: The description for the data set.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: The name of the data set.
        Origin:
          allOf:
            - $ref: "#/components/schemas/Origin"
            - description: A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          allOf:
            - $ref: "#/components/schemas/OriginDetails"
            - description: If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.
        Tags:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - description: The tags for the data set.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the data set was last updated, in ISO 8601 format.
    GetEventActionResponse:
      type: object
      properties:
        Action:
          allOf:
            - $ref: "#/components/schemas/Action"
            - description: What occurs after a certain event.
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the event action.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the event action was created, in ISO 8601 format.
        Event:
          allOf:
            - $ref: "#/components/schemas/Event"
            - description: What occurs to start an action.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the event action was last updated, in ISO 8601 format.
    GetJobResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the job.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the job was created, in ISO 8601 format.
        Details:
          allOf:
            - $ref: "#/components/schemas/ResponseDetails"
            - description: Details about the job.
        Errors:
          allOf:
            - $ref: "#/components/schemas/ListOfJobError"
            - description: The errors associated with jobs.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the job.
        State:
          allOf:
            - $ref: "#/components/schemas/State"
            - description: The state of the job.
        Type:
          allOf:
            - $ref: "#/components/schemas/Type"
            - description: The job type.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the job was last updated, in ISO 8601 format.
    GetRevisionResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the revision.
        Comment:
          allOf:
            - $ref: "#/components/schemas/__stringMin0Max16384"
            - description: An optional comment about the revision.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was created, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with the data set revision.
        Finalized:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.
        Tags:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - description: The tags for the revision.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was last updated, in ISO 8601 format.
        RevocationComment:
          allOf:
            - $ref: "#/components/schemas/__stringMin10Max512"
            - description: A required comment to inform subscribers of the reason their access to the revision was revoked.
        Revoked:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: A status indicating that subscribers' access to the revision was revoked.
        RevokedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was revoked, in ISO 8601 format.
    ListDataSetRevisionsResponse:
      type: object
      properties:
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The token value retrieved from a previous call to access the next page of results.
        Revisions:
          allOf:
            - $ref: "#/components/schemas/ListOfRevisionEntry"
            - description: The asset objects listed by the request.
    ListDataSetsResponse:
      type: object
      properties:
        DataSets:
          allOf:
            - $ref: "#/components/schemas/ListOfDataSetEntry"
            - description: The data set objects listed by the request.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The token value retrieved from a previous call to access the next page of results.
    ListEventActionsResponse:
      type: object
      properties:
        EventActions:
          allOf:
            - $ref: "#/components/schemas/ListOfEventActionEntry"
            - description: The event action objects listed by the request.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The token value retrieved from a previous call to access the next page of results.
    ListJobsResponse:
      type: object
      properties:
        Jobs:
          allOf:
            - $ref: "#/components/schemas/ListOfJobEntry"
            - description: The jobs listed by the request.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The token value retrieved from a previous call to access the next page of results.
    ListRevisionAssetsResponse:
      type: object
      properties:
        Assets:
          allOf:
            - $ref: "#/components/schemas/ListOfAssetEntry"
            - description: The asset objects listed by the request.
        NextToken:
          allOf:
            - $ref: "#/components/schemas/NextToken"
            - description: The token value retrieved from a previous call to access the next page of results.
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - xml:
                name: tags
              description: A label that consists of a customer-defined key and an optional value.
    RevokeRevisionResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the revision.
        Comment:
          allOf:
            - $ref: "#/components/schemas/__stringMin0Max16384"
            - description: An optional comment about the revision.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was created, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with the data set revision.
        Finalized:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was last updated, in ISO 8601 format.
        RevocationComment:
          allOf:
            - $ref: "#/components/schemas/__stringMin10Max512"
            - description: A required comment to inform subscribers of the reason their access to the revision was revoked.
        Revoked:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: A status indicating that subscribers' access to the revision was revoked.
        RevokedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was revoked, in ISO 8601 format.
    SendApiAssetResponse:
      type: object
      properties:
        Body:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The response body from the underlying API tracked by the API asset.
        ResponseHeaders:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - description: The response headers from the underlying API tracked by the API asset.
    StartJobResponse:
      type: object
      properties: {}
    UpdateAssetResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the asset.
        AssetDetails:
          allOf:
            - $ref: "#/components/schemas/AssetDetails"
            - description: Details about the asset.
        AssetType:
          allOf:
            - $ref: "#/components/schemas/AssetType"
            - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the asset was created, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this asset.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the asset.
        Name:
          allOf:
            - $ref: "#/components/schemas/AssetName"
            - description: The name of the asset. When importing from Amazon S3, the Amazon S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target Amazon S3 object key. When importing from Amazon API Gateway API, the API name is used as the asset name. When importing from Amazon Redshift, the datashare name is used as the asset name. When importing from AWS Lake Formation, the static values of "Database(s) included in the LF-tag policy"- or "Table(s) included in LF-tag policy" are used as the asset name.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this asset.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The asset ID of the owned asset corresponding to the entitled asset being viewed. This parameter is returned when an asset owner is viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the asset was last updated, in ISO 8601 format.
    UpdateDataSetResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the data set.
        AssetType:
          allOf:
            - $ref: "#/components/schemas/AssetType"
            - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the data set was created, in ISO 8601 format.
        Description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: The description for the data set.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: The name of the data set.
        Origin:
          allOf:
            - $ref: "#/components/schemas/Origin"
            - description: A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          allOf:
            - $ref: "#/components/schemas/OriginDetails"
            - description: If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the data set was last updated, in ISO 8601 format.
    UpdateEventActionResponse:
      type: object
      properties:
        Action:
          allOf:
            - $ref: "#/components/schemas/Action"
            - description: What occurs after a certain event.
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the event action.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the event action was created, in ISO 8601 format.
        Event:
          allOf:
            - $ref: "#/components/schemas/Event"
            - description: What occurs to start an action.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the event action was last updated, in ISO 8601 format.
    UpdateRevisionResponse:
      type: object
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the revision.
        Comment:
          allOf:
            - $ref: "#/components/schemas/__stringMin0Max16384"
            - description: An optional comment about the revision.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was created, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with the data set revision.
        Finalized:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was last updated, in ISO 8601 format.
        RevocationComment:
          allOf:
            - $ref: "#/components/schemas/__stringMin10Max512"
            - description: A required comment to inform subscribers of the reason their access to the revision was revoked.
        Revoked:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: A status indicating that subscribers' access to the revision was revoked.
        RevokedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was revoked, in ISO 8601 format.
    Action:
      type: object
      properties:
        ExportRevisionToS3:
          allOf:
            - $ref: "#/components/schemas/AutoExportRevisionToS3RequestDetails"
            - description: Details for the export revision to Amazon S3 action.
      description: What occurs after a certain event.
    ApiDescription:
      type: string
    Timestamp:
      type: string
      format: date-time
    ProtocolType:
      type: string
      enum:
        - REST
    ApiGatewayApiAsset:
      type: object
      properties:
        ApiDescription:
          allOf:
            - $ref: "#/components/schemas/ApiDescription"
            - description: The API description of the API asset.
        ApiEndpoint:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API endpoint of the API asset.
        ApiId:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The unique identifier of the API asset.
        ApiKey:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API key of the API asset.
        ApiName:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API name of the API asset.
        ApiSpecificationDownloadUrl:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The download URL of the API specification of the API asset.
        ApiSpecificationDownloadUrlExpiresAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the upload URL expires, in ISO 8601 format.
        ProtocolType:
          allOf:
            - $ref: "#/components/schemas/ProtocolType"
            - description: The protocol type of the API asset.
        Stage:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The stage of the API asset.
      description: The API Gateway API that is the asset.
    Arn:
      type: string
    Id:
      type: string
    AssetDestinationEntry:
      type: object
      required:
        - AssetId
        - Bucket
      properties:
        AssetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the asset.
        Bucket:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon S3 bucket that is the destination for the asset.
        Key:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The name of the object in Amazon S3 for the asset.
      description: The destination for the asset.
    S3SnapshotAsset:
      type: object
      required:
        - Size
      properties:
        Size:
          allOf:
            - $ref: "#/components/schemas/__doubleMin0"
            - description: The size of the Amazon S3 object that is the object.
      description: The Amazon S3 object that is the asset.
    RedshiftDataShareAsset:
      type: object
      required:
        - Arn
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon Resource Name (ARN) of the datashare asset.
      description: The Amazon Redshift datashare asset.
    S3DataAccessAsset:
      type: object
      required:
        - Bucket
      properties:
        Bucket:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon S3 bucket hosting data to be shared in the S3 data access.
        KeyPrefixes:
          allOf:
            - $ref: "#/components/schemas/ListOf__string"
            - description: The Amazon S3 bucket used for hosting shared data in the Amazon S3 data access.
        Keys:
          allOf:
            - $ref: "#/components/schemas/ListOf__string"
            - description: S3 keys made available using this asset.
        S3AccessPointAlias:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The automatically-generated bucket-style alias for your Amazon S3 Access Point. Customers can access their entitled data using the S3 Access Point alias.
        S3AccessPointArn:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The ARN for your Amazon S3 Access Point. Customers can also access their entitled data using the S3 Access Point ARN.
        KmsKeysToGrant:
          allOf:
            - $ref: "#/components/schemas/ListOfKmsKeysToGrant"
            - description: " List of AWS KMS CMKs (Key Management System Customer Managed Keys) and ARNs used to encrypt S3 objects being shared in this S3 Data Access asset. Providers must include all AWS KMS keys used to encrypt these shared S3 objects."
      description: The Amazon S3 data access that is the asset.
    LakeFormationDataPermissionAsset:
      type: object
      required:
        - LakeFormationDataPermissionDetails
        - LakeFormationDataPermissionType
        - Permissions
      properties:
        LakeFormationDataPermissionDetails:
          allOf:
            - $ref: "#/components/schemas/LakeFormationDataPermissionDetails"
            - description: Details about the AWS Lake Formation data permission.
        LakeFormationDataPermissionType:
          allOf:
            - $ref: "#/components/schemas/LakeFormationDataPermissionType"
            - description: The data permission type.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/ListOfLFPermissions"
            - description: The permissions granted to the subscribers on the resource.
        RoleArn:
          allOf:
            - $ref: "#/components/schemas/RoleArn"
            - description: The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions to AWS Lake Formation data permissions.
      description: The AWS Lake Formation data permission asset.
    AssetDetails:
      type: object
      properties:
        S3SnapshotAsset:
          allOf:
            - $ref: "#/components/schemas/S3SnapshotAsset"
            - description: The Amazon S3 object that is the asset.
        RedshiftDataShareAsset:
          allOf:
            - $ref: "#/components/schemas/RedshiftDataShareAsset"
            - description: The Amazon Redshift datashare that is the asset.
        ApiGatewayApiAsset:
          allOf:
            - $ref: "#/components/schemas/ApiGatewayApiAsset"
            - description: Information about the API Gateway API asset.
        S3DataAccessAsset:
          allOf:
            - $ref: "#/components/schemas/S3DataAccessAsset"
            - description: The Amazon S3 data access that is the asset.
        LakeFormationDataPermissionAsset:
          allOf:
            - $ref: "#/components/schemas/LakeFormationDataPermissionAsset"
            - description: The AWS Lake Formation data permission that is the asset.
      description: Details about the asset.
    AssetType:
      type: string
      enum:
        - S3_SNAPSHOT
        - REDSHIFT_DATA_SHARE
        - API_GATEWAY_API
        - S3_DATA_ACCESS
        - LAKE_FORMATION_DATA_PERMISSION
    AssetName:
      type: string
    AssetEntry:
      type: object
      required:
        - Arn
        - AssetDetails
        - AssetType
        - CreatedAt
        - DataSetId
        - Id
        - Name
        - RevisionId
        - UpdatedAt
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the asset.
        AssetDetails:
          allOf:
            - $ref: "#/components/schemas/AssetDetails"
            - description: Details about the asset.
        AssetType:
          allOf:
            - $ref: "#/components/schemas/AssetType"
            - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the asset was created, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this asset.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the asset.
        Name:
          allOf:
            - $ref: "#/components/schemas/AssetName"
            - description: The name of the asset. When importing from Amazon S3, the Amazon S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target Amazon S3 object key. When importing from Amazon API Gateway API, the API name is used as the asset name. When importing from Amazon Redshift, the datashare name is used as the asset name. When importing from AWS Lake Formation, the static values of "Database(s) included in LF-tag policy" or "Table(s) included in LF-tag policy" are used as the asset name.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this asset.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The asset ID of the owned asset corresponding to the entitled asset being viewed. This parameter is returned when an asset owner is viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the asset was last updated, in ISO 8601 format.
      description: An asset in AWS Data Exchange is a piece of data (Amazon S3 object) or a means of fulfilling data (Amazon Redshift datashare or Amazon API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access). The asset can be a structured data file, an image file, or some other data file that can be stored as an Amazon S3 object, an Amazon API Gateway API, or an Amazon Redshift datashare, an AWS Lake Formation data permission, or an Amazon S3 data access. When you create an import job for your files, API Gateway APIs, Amazon Redshift datashares, AWS Lake Formation data permission, or Amazon S3 data access, you create an asset in AWS Data Exchange.
    AssetSourceEntry:
      type: object
      required:
        - Bucket
        - Key
      properties:
        Bucket:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon S3 bucket that's part of the source of the asset.
        Key:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The name of the object in Amazon S3 for the asset.
      description: The source of the assets.
    AutoExportRevisionDestinationEntry:
      type: object
      required:
        - Bucket
      properties:
        Bucket:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon S3 bucket that is the destination for the event action.
        KeyPattern:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: A string representing the pattern for generated names of the individual assets in the revision. For more information about key patterns, see <a href="https://docs.aws.amazon.com/data-exchange/latest/userguide/jobs.html#revision-export-keypatterns">Key patterns when exporting revisions</a>.
      description: A revision destination is the Amazon S3 bucket folder destination to where the export will be sent.
    ExportServerSideEncryption:
      type: object
      required:
        - Type
      properties:
        KmsKeyArn:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon Resource Name (ARN) of the AWS KMS key you want to use to encrypt the Amazon S3 objects. This parameter is required if you choose aws:kms as an encryption type.
        Type:
          allOf:
            - $ref: "#/components/schemas/ServerSideEncryptionTypes"
            - description: The type of server side encryption used for encrypting the objects in Amazon S3.
      description: Encryption configuration of the export job. Includes the encryption type in addition to the AWS KMS key. The KMS key is only necessary if you chose the KMS encryption type.
    AwsAccountId:
      type: string
      pattern: .*/^[\d]{12}$/.*
      minLength: 12
      maxLength: 12
    CancelJobRequest:
      type: object
      title: CancelJobRequest
      properties: {}
    Code:
      type: string
      enum:
        - ACCESS_DENIED_EXCEPTION
        - INTERNAL_SERVER_EXCEPTION
        - MALWARE_DETECTED
        - RESOURCE_NOT_FOUND_EXCEPTION
        - SERVICE_QUOTA_EXCEEDED_EXCEPTION
        - VALIDATION_EXCEPTION
        - MALWARE_SCAN_ENCRYPTED_FILE
    Description:
      type: string
    Name:
      type: string
    MapOf__string:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/__string"
    CreateDataSetRequest:
      type: object
      required:
        - AssetType
        - Description
        - Name
      title: CreateDataSetRequest
      properties:
        AssetType:
          allOf:
            - $ref: "#/components/schemas/AssetType"
            - description: The type of asset that is added to a data set.
        Description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: A description for the data set. This value can be up to 16,348 characters long.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: The name of the data set.
        Tags:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - description: A data set tag is an optional label that you can assign to a data set when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.
    Origin:
      type: string
      enum:
        - OWNED
        - ENTITLED
    OriginDetails:
      type: object
      required:
        - ProductId
      properties:
        ProductId:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The product ID of the origin of the data set.
      description: Details about the origin of the data set.
    Event:
      type: object
      properties:
        RevisionPublished:
          allOf:
            - $ref: "#/components/schemas/RevisionPublished"
            - description: What occurs to start the revision publish action.
      description: What occurs to start an action.
    CreateEventActionRequest:
      type: object
      required:
        - Action
        - Event
      title: CreateEventActionRequest
      properties:
        Action:
          allOf:
            - $ref: "#/components/schemas/Action"
            - description: What occurs after a certain event.
        Event:
          allOf:
            - $ref: "#/components/schemas/Event"
            - description: What occurs to start an action.
    RequestDetails:
      type: object
      properties:
        ExportAssetToSignedUrl:
          allOf:
            - $ref: "#/components/schemas/ExportAssetToSignedUrlRequestDetails"
            - description: Details about the export to signed URL request.
        ExportAssetsToS3:
          allOf:
            - $ref: "#/components/schemas/ExportAssetsToS3RequestDetails"
            - description: Details about the export to Amazon S3 request.
        ExportRevisionsToS3:
          allOf:
            - $ref: "#/components/schemas/ExportRevisionsToS3RequestDetails"
            - description: Details about the export to Amazon S3 request.
        ImportAssetFromSignedUrl:
          allOf:
            - $ref: "#/components/schemas/ImportAssetFromSignedUrlRequestDetails"
            - description: Details about the import from Amazon S3 request.
        ImportAssetsFromS3:
          allOf:
            - $ref: "#/components/schemas/ImportAssetsFromS3RequestDetails"
            - description: Details about the import asset from API Gateway API request.
        ImportAssetsFromRedshiftDataShares:
          allOf:
            - $ref: "#/components/schemas/ImportAssetsFromRedshiftDataSharesRequestDetails"
            - description: Details from an import from Amazon Redshift datashare request.
        ImportAssetFromApiGatewayApi:
          allOf:
            - $ref: "#/components/schemas/ImportAssetFromApiGatewayApiRequestDetails"
            - description: Details about the import from signed URL request.
        CreateS3DataAccessFromS3Bucket:
          allOf:
            - $ref: "#/components/schemas/CreateS3DataAccessFromS3BucketRequestDetails"
            - description: Details of the request to create S3 data access from the Amazon S3 bucket.
        ImportAssetsFromLakeFormationTagPolicy:
          allOf:
            - $ref: "#/components/schemas/ImportAssetsFromLakeFormationTagPolicyRequestDetails"
            - description: Request details for the ImportAssetsFromLakeFormationTagPolicy job.
      description: The details for the request.
    Type:
      type: string
      enum:
        - IMPORT_ASSETS_FROM_S3
        - IMPORT_ASSET_FROM_SIGNED_URL
        - EXPORT_ASSETS_TO_S3
        - EXPORT_ASSET_TO_SIGNED_URL
        - EXPORT_REVISIONS_TO_S3
        - IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES
        - IMPORT_ASSET_FROM_API_GATEWAY_API
        - CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET
        - IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY
    CreateJobRequest:
      type: object
      required:
        - Details
        - Type
      title: CreateJobRequest
      properties:
        Details:
          allOf:
            - $ref: "#/components/schemas/RequestDetails"
            - description: The details for the CreateJob request.
        Type:
          allOf:
            - $ref: "#/components/schemas/Type"
            - description: The type of job to be created.
    ResponseDetails:
      type: object
      properties:
        ExportAssetToSignedUrl:
          allOf:
            - $ref: "#/components/schemas/ExportAssetToSignedUrlResponseDetails"
            - description: Details for the export to signed URL response.
        ExportAssetsToS3:
          allOf:
            - $ref: "#/components/schemas/ExportAssetsToS3ResponseDetails"
            - description: Details for the export to Amazon S3 response.
        ExportRevisionsToS3:
          allOf:
            - $ref: "#/components/schemas/ExportRevisionsToS3ResponseDetails"
            - description: Details for the export revisions to Amazon S3 response.
        ImportAssetFromSignedUrl:
          allOf:
            - $ref: "#/components/schemas/ImportAssetFromSignedUrlResponseDetails"
            - description: Details for the import from signed URL response.
        ImportAssetsFromS3:
          allOf:
            - $ref: "#/components/schemas/ImportAssetsFromS3ResponseDetails"
            - description: Details for the import from Amazon S3 response.
        ImportAssetsFromRedshiftDataShares:
          allOf:
            - $ref: "#/components/schemas/ImportAssetsFromRedshiftDataSharesResponseDetails"
            - description: Details from an import from Amazon Redshift datashare response.
        ImportAssetFromApiGatewayApi:
          allOf:
            - $ref: "#/components/schemas/ImportAssetFromApiGatewayApiResponseDetails"
            - description: The response details.
        CreateS3DataAccessFromS3Bucket:
          allOf:
            - $ref: "#/components/schemas/CreateS3DataAccessFromS3BucketResponseDetails"
            - description: Response details from the CreateS3DataAccessFromS3Bucket job.
        ImportAssetsFromLakeFormationTagPolicy:
          allOf:
            - $ref: "#/components/schemas/ImportAssetsFromLakeFormationTagPolicyResponseDetails"
            - description: Response details from the ImportAssetsFromLakeFormationTagPolicy job.
      description: Details for the response.
    ListOfJobError:
      type: array
      items:
        $ref: "#/components/schemas/JobError"
    State:
      type: string
      enum:
        - WAITING
        - IN_PROGRESS
        - ERROR
        - COMPLETED
        - CANCELLED
        - TIMED_OUT
    __stringMin0Max16384:
      type: string
      minLength: 0
      maxLength: 16384
    CreateRevisionRequest:
      type: object
      title: CreateRevisionRequest
      properties:
        Comment:
          allOf:
            - $ref: "#/components/schemas/__stringMin0Max16384"
            - description: An optional comment about the revision.
        Tags:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - description: A revision tag is an optional label that you can assign to a revision when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.
    __boolean:
      type: boolean
    __stringMin10Max512:
      type: string
      minLength: 10
      maxLength: 512
    S3DataAccessAssetSourceEntry:
      type: object
      required:
        - Bucket
      properties:
        Bucket:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon S3 bucket used for hosting shared data in the Amazon S3 data access.
        KeyPrefixes:
          allOf:
            - $ref: "#/components/schemas/ListOf__string"
            - description: Organizes Amazon S3 asset key prefixes stored in an Amazon S3 bucket.
        Keys:
          allOf:
            - $ref: "#/components/schemas/ListOf__string"
            - description: The keys used to create the Amazon S3 data access.
        KmsKeysToGrant:
          allOf:
            - $ref: "#/components/schemas/ListOfKmsKeysToGrant"
            - description: List of AWS KMS CMKs (Key Management System Customer Managed Keys) and ARNs used to encrypt S3 objects being shared in this S3 Data Access asset.
      description: Source details for an Amazon S3 data access asset.
    CreateS3DataAccessFromS3BucketResponseDetails:
      type: object
      required:
        - AssetSource
        - DataSetId
        - RevisionId
      properties:
        AssetSource:
          allOf:
            - $ref: "#/components/schemas/S3DataAccessAssetSourceEntry"
            - description: Details about the asset source from an Amazon S3 bucket.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for this data set.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision.
      description: Details about the response of the operation to create an S3 data access from an S3 bucket.
    DataSetEntry:
      type: object
      required:
        - Arn
        - AssetType
        - CreatedAt
        - Description
        - Id
        - Name
        - Origin
        - UpdatedAt
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the data set.
        AssetType:
          allOf:
            - $ref: "#/components/schemas/AssetType"
            - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the data set was created, in ISO 8601 format.
        Description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: The description for the data set.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: The name of the data set.
        Origin:
          allOf:
            - $ref: "#/components/schemas/Origin"
            - description: A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          allOf:
            - $ref: "#/components/schemas/OriginDetails"
            - description: If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the data set was last updated, in ISO 8601 format.
      description: A data set is an AWS resource with one or more revisions.
    ListOfLFTags:
      type: array
      items:
        $ref: "#/components/schemas/LFTag"
    DatabaseLFTagPolicy:
      type: object
      required:
        - Expression
      properties:
        Expression:
          allOf:
            - $ref: "#/components/schemas/ListOfLFTags"
            - description: A list of LF-tag conditions that apply to database resources.
      description: The LF-tag policy for database resources.
    ListOfDatabaseLFTagPolicyPermissions:
      type: array
      items:
        $ref: "#/components/schemas/DatabaseLFTagPolicyPermission"
    DatabaseLFTagPolicyAndPermissions:
      type: object
      required:
        - Expression
        - Permissions
      properties:
        Expression:
          allOf:
            - $ref: "#/components/schemas/ListOfLFTags"
            - description: A list of LF-tag conditions that apply to database resources.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/ListOfDatabaseLFTagPolicyPermissions"
            - description: The permissions granted to subscribers on database resources.
      description: The LF-tag policy and permissions for database resources.
    DatabaseLFTagPolicyPermission:
      type: string
      enum:
        - DESCRIBE
    DeleteAssetRequest:
      type: object
      title: DeleteAssetRequest
      properties: {}
    DeleteDataSetRequest:
      type: object
      title: DeleteDataSetRequest
      properties: {}
    DeleteEventActionRequest:
      type: object
      title: DeleteEventActionRequest
      properties: {}
    DeleteRevisionRequest:
      type: object
      title: DeleteRevisionRequest
      properties: {}
    ImportAssetFromSignedUrlJobErrorDetails:
      type: object
      required:
        - AssetName
      properties:
        AssetName:
          allOf:
            - $ref: "#/components/schemas/AssetName"
            - description: Details about the job error.
      description: Details about the job error.
    ListOfAssetSourceEntry:
      type: array
      items:
        $ref: "#/components/schemas/AssetSourceEntry"
    Details:
      type: object
      properties:
        ImportAssetFromSignedUrlJobErrorDetails:
          allOf:
            - $ref: "#/components/schemas/ImportAssetFromSignedUrlJobErrorDetails"
            - description: Information about the job error.
        ImportAssetsFromS3JobErrorDetails:
          allOf:
            - $ref: "#/components/schemas/ListOfAssetSourceEntry"
            - description: Details about the job error.
      description: Information about the job error.
    EventActionEntry:
      type: object
      required:
        - Action
        - Arn
        - CreatedAt
        - Event
        - Id
        - UpdatedAt
      properties:
        Action:
          allOf:
            - $ref: "#/components/schemas/Action"
            - description: What occurs after a certain event.
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The Amazon Resource Name (ARN) for the event action.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the event action was created, in ISO 8601 format.
        Event:
          allOf:
            - $ref: "#/components/schemas/Event"
            - description: What occurs to start an action.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the event action was last updated, in ISO 8601 format.
      description: An event action is an object that defines the relationship between a specific event and an automated action that will be taken on behalf of the customer.
    ExportAssetToSignedUrlResponseDetails:
      type: object
      required:
        - AssetId
        - DataSetId
        - RevisionId
      properties:
        AssetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the asset associated with this export job.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this export job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this export response.
        SignedUrl:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The signed URL for the export request.
        SignedUrlExpiresAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the signed URL expires, in ISO 8601 format.
      description: The details of the export to signed URL response.
    ListOfAssetDestinationEntry:
      type: array
      items:
        $ref: "#/components/schemas/AssetDestinationEntry"
    ExportAssetsToS3ResponseDetails:
      type: object
      required:
        - AssetDestinations
        - DataSetId
        - RevisionId
      properties:
        AssetDestinations:
          allOf:
            - $ref: "#/components/schemas/ListOfAssetDestinationEntry"
            - description: The destination in Amazon S3 where the asset is exported.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this export job.
        Encryption:
          allOf:
            - $ref: "#/components/schemas/ExportServerSideEncryption"
            - description: Encryption configuration of the export job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this export response.
      description: Details about the export to Amazon S3 response.
    ListOfRevisionDestinationEntry:
      type: array
      items:
        $ref: "#/components/schemas/RevisionDestinationEntry"
    ExportRevisionsToS3ResponseDetails:
      type: object
      required:
        - DataSetId
        - RevisionDestinations
      properties:
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this export job.
        Encryption:
          allOf:
            - $ref: "#/components/schemas/ExportServerSideEncryption"
            - description: Encryption configuration of the export job.
        RevisionDestinations:
          allOf:
            - $ref: "#/components/schemas/ListOfRevisionDestinationEntry"
            - description: The destination in Amazon S3 where the revision is exported.
        EventActionArn:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon Resource Name (ARN) of the event action.
      description: Details about the export revisions to Amazon S3 response.
    ServerSideEncryptionTypes:
      type: string
      enum:
        - aws:kms
        - AES256
    GetAssetRequest:
      type: object
      title: GetAssetRequest
      properties: {}
    GetDataSetRequest:
      type: object
      title: GetDataSetRequest
      properties: {}
    GetEventActionRequest:
      type: object
      title: GetEventActionRequest
      properties: {}
    GetJobRequest:
      type: object
      title: GetJobRequest
      properties: {}
    GetRevisionRequest:
      type: object
      title: GetRevisionRequest
      properties: {}
    __stringMin24Max24PatternAZaZ094AZaZ092AZaZ093:
      type: string
      pattern: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
      minLength: 24
      maxLength: 24
    ImportAssetFromApiGatewayApiResponseDetails:
      type: object
      required:
        - ApiId
        - ApiName
        - ApiSpecificationMd5Hash
        - ApiSpecificationUploadUrl
        - ApiSpecificationUploadUrlExpiresAt
        - DataSetId
        - ProtocolType
        - RevisionId
        - Stage
      properties:
        ApiDescription:
          allOf:
            - $ref: "#/components/schemas/ApiDescription"
            - description: The API description.
        ApiId:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API ID.
        ApiKey:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API key.
        ApiName:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API name.
        ApiSpecificationMd5Hash:
          allOf:
            - $ref: "#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093"
            - description: The Base64-encoded Md5 hash for the API asset, used to ensure the integrity of the API at that location.
        ApiSpecificationUploadUrl:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The upload URL of the API specification.
        ApiSpecificationUploadUrlExpiresAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the upload URL expires, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The data set ID.
        ProtocolType:
          allOf:
            - $ref: "#/components/schemas/ProtocolType"
            - description: The protocol type.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The revision ID.
        Stage:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The API stage.
      description: The response details.
    ImportAssetFromSignedUrlResponseDetails:
      type: object
      required:
        - AssetName
        - DataSetId
        - RevisionId
      properties:
        AssetName:
          allOf:
            - $ref: "#/components/schemas/AssetName"
            - description: The name for the asset associated with this import job.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this import job.
        Md5Hash:
          allOf:
            - $ref: "#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093"
            - description: The Base64-encoded Md5 hash for the asset, used to ensure the integrity of the file at that location.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this import response.
        SignedUrl:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The signed URL.
        SignedUrlExpiresAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The time and date at which the signed URL expires, in ISO 8601 format.
      description: The details in the response for an import request, including the signed URL and other information.
    TableLFTagPolicyAndPermissions:
      type: object
      required:
        - Expression
        - Permissions
      properties:
        Expression:
          allOf:
            - $ref: "#/components/schemas/ListOfLFTags"
            - description: A list of LF-tag conditions that apply to table resources.
        Permissions:
          allOf:
            - $ref: "#/components/schemas/ListOfTableTagPolicyLFPermissions"
            - description: The permissions granted to subscribers on table resources.
      description: The LF-tag policy and permissions that apply to table resources.
    RoleArn:
      type: string
      pattern: arn:aws:iam::(\d{12}):role\/.+
    ImportAssetsFromLakeFormationTagPolicyResponseDetails:
      type: object
      required:
        - CatalogId
        - RoleArn
        - DataSetId
        - RevisionId
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/AwsAccountId"
            - description: The identifier for the AWS Glue Data Catalog.
        Database:
          allOf:
            - $ref: "#/components/schemas/DatabaseLFTagPolicyAndPermissions"
            - description: A structure for the database object.
        Table:
          allOf:
            - $ref: "#/components/schemas/TableLFTagPolicyAndPermissions"
            - description: A structure for the table object.
        RoleArn:
          allOf:
            - $ref: "#/components/schemas/RoleArn"
            - description: The IAM role's ARN that allows AWS Data Exchange to assume the role and grant and revoke permissions to AWS Lake Formation data permissions.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this import job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this import job.
      description: Details from an import AWS Lake Formation tag policy job response.
    ListOfRedshiftDataShareAssetSourceEntry:
      type: array
      items:
        $ref: "#/components/schemas/RedshiftDataShareAssetSourceEntry"
    ImportAssetsFromRedshiftDataSharesResponseDetails:
      type: object
      required:
        - AssetSources
        - DataSetId
        - RevisionId
      properties:
        AssetSources:
          allOf:
            - $ref: "#/components/schemas/ListOfRedshiftDataShareAssetSourceEntry"
            - description: A list of Amazon Redshift datashare asset sources.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this import job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this import job.
      description: Details from an import from Amazon Redshift datashare response.
    ImportAssetsFromS3ResponseDetails:
      type: object
      required:
        - AssetSources
        - DataSetId
        - RevisionId
      properties:
        AssetSources:
          allOf:
            - $ref: "#/components/schemas/ListOfAssetSourceEntry"
            - description: Is a list of Amazon S3 bucket and object key pairs.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with this import job.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision associated with this import response.
      description: Details from an import from Amazon S3 response.
    JobEntry:
      type: object
      required:
        - Arn
        - CreatedAt
        - Details
        - Id
        - State
        - Type
        - UpdatedAt
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the job.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the job was created, in ISO 8601 format.
        Details:
          allOf:
            - $ref: "#/components/schemas/ResponseDetails"
            - description: Details of the operation to be performed by the job, such as export destination details or import source details.
        Errors:
          allOf:
            - $ref: "#/components/schemas/ListOfJobError"
            - description: Errors for jobs.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the job.
        State:
          allOf:
            - $ref: "#/components/schemas/State"
            - description: The state of the job.
        Type:
          allOf:
            - $ref: "#/components/schemas/Type"
            - description: The job type.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the job was last updated, in ISO 8601 format.
      description: AWS Data Exchange Jobs are asynchronous import or export operations used to create or copy assets. A data set owner can both import and export as they see fit. Someone with an entitlement to a data set can only export. Jobs are deleted 90 days after they are created.
    JobErrorLimitName:
      type: string
      enum:
        - Assets per revision
        - Asset size in GB
        - Amazon Redshift datashare assets per revision
        - AWS Lake Formation data permission assets per revision
        - Amazon S3 data access assets per revision
    __double:
      type: number
      format: double
    JobErrorResourceTypes:
      type: string
      enum:
        - REVISION
        - ASSET
        - DATA_SET
    JobError:
      type: object
      required:
        - Code
        - Message
      properties:
        Code:
          allOf:
            - $ref: "#/components/schemas/Code"
            - description: The code for the job error.
        Details:
          allOf:
            - $ref: "#/components/schemas/Details"
            - description: The details about the job error.
        LimitName:
          allOf:
            - $ref: "#/components/schemas/JobErrorLimitName"
            - description: The name of the limit that was reached.
        LimitValue:
          allOf:
            - $ref: "#/components/schemas/__double"
            - description: The value of the exceeded limit.
        Message:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The message related to the job error.
        ResourceId:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The unique identifier for the resource related to the error.
        ResourceType:
          allOf:
            - $ref: "#/components/schemas/JobErrorResourceTypes"
            - description: The type of resource related to the error.
      description: An error that occurred with the job request.
    KmsKeyArn:
      type: string
      minLength: 1
      maxLength: 2048
    KmsKeyToGrant:
      type: object
      required:
        - KmsKeyArn
      properties:
        KmsKeyArn:
          allOf:
            - $ref: "#/components/schemas/KmsKeyArn"
            - description: The AWS KMS CMK (Key Management System Customer Managed Key) used to encrypt S3 objects in the shared S3 Bucket. AWS Data exchange will create a KMS grant for each subscriber to allow them to access and decrypt their entitled data that is encrypted using this KMS key specified.
      description: The Amazon Resource Name (ARN) of the AWS KMS key used to encrypt the shared S3 objects.
    LFPermission:
      type: string
      enum:
        - DESCRIBE
        - SELECT
    TableLFTagPolicy:
      type: object
      required:
        - Expression
      properties:
        Expression:
          allOf:
            - $ref: "#/components/schemas/ListOfLFTags"
            - description: A list of LF-tag conditions that apply to table resources.
      description: The LF-tag policy for a table resource.
    LFResourceDetails:
      type: object
      properties:
        Database:
          allOf:
            - $ref: "#/components/schemas/DatabaseLFTagPolicy"
            - description: Details about the database resource included in the AWS Lake Formation data permission.
        Table:
          allOf:
            - $ref: "#/components/schemas/TableLFTagPolicy"
            - description: Details about the table resource included in the AWS Lake Formation data permission.
      description: Details about the AWS Lake Formation resource (Table or Database) included in the AWS Lake Formation data permission.
    LFResourceType:
      type: string
      enum:
        - TABLE
        - DATABASE
    String:
      type: string
    ListOfLFTagValues:
      type: array
      items:
        $ref: "#/components/schemas/String"
    LFTag:
      type: object
      required:
        - TagKey
        - TagValues
      properties:
        TagKey:
          allOf:
            - $ref: "#/components/schemas/String"
            - description: The key name for the LF-tag.
        TagValues:
          allOf:
            - $ref: "#/components/schemas/ListOfLFTagValues"
            - description: A list of LF-tag values.
      description: A structure that allows an LF-admin to grant permissions on certain conditions.
    LFTagPolicyDetails:
      type: object
      required:
        - CatalogId
        - ResourceType
        - ResourceDetails
      properties:
        CatalogId:
          allOf:
            - $ref: "#/components/schemas/AwsAccountId"
            - description: The identifier for the AWS Glue Data Catalog.
        ResourceType:
          allOf:
            - $ref: "#/components/schemas/LFResourceType"
            - description: The resource type for which the LF-tag policy applies.
        ResourceDetails:
          allOf:
            - $ref: "#/components/schemas/LFResourceDetails"
            - description: Details for the Lake Formation Resources included in the LF-tag policy.
      description: Details about the LF-tag policy.
    LakeFormationDataPermissionDetails:
      type: object
      properties:
        LFTagPolicy:
          allOf:
            - $ref: "#/components/schemas/LFTagPolicyDetails"
            - description: Details about the LF-tag policy.
      description: Details about the AWS Lake Formation data permission.
    LakeFormationDataPermissionType:
      type: string
      enum:
        - LFTagPolicy
    ListOfLFPermissions:
      type: array
      items:
        $ref: "#/components/schemas/LFPermission"
    MaxResults:
      type: integer
      minimum: 1
      maximum: 200
    ListDataSetRevisionsRequest:
      type: object
      title: ListDataSetRevisionsRequest
      properties: {}
    NextToken:
      type: string
    ListOfRevisionEntry:
      type: array
      items:
        $ref: "#/components/schemas/RevisionEntry"
    ListDataSetsRequest:
      type: object
      title: ListDataSetsRequest
      properties: {}
    ListOfDataSetEntry:
      type: array
      items:
        $ref: "#/components/schemas/DataSetEntry"
    ListEventActionsRequest:
      type: object
      title: ListEventActionsRequest
      properties: {}
    ListOfEventActionEntry:
      type: array
      items:
        $ref: "#/components/schemas/EventActionEntry"
    ListJobsRequest:
      type: object
      title: ListJobsRequest
      properties: {}
    ListOfJobEntry:
      type: array
      items:
        $ref: "#/components/schemas/JobEntry"
    ListOfAssetEntry:
      type: array
      items:
        $ref: "#/components/schemas/AssetEntry"
    ListOfKmsKeysToGrant:
      type: array
      items:
        $ref: "#/components/schemas/KmsKeyToGrant"
      minItems: 1
      maxItems: 10
    RedshiftDataShareAssetSourceEntry:
      type: object
      required:
        - DataShareArn
      properties:
        DataShareArn:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon Resource Name (ARN) of the datashare asset.
      description: The source of the Amazon Redshift datashare asset.
    RevisionDestinationEntry:
      type: object
      required:
        - Bucket
        - RevisionId
      properties:
        Bucket:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The Amazon S3 bucket that is the destination for the assets in the revision.
        KeyPattern:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: A string representing the pattern for generated names of the individual assets in the revision. For more information about key patterns, see <a href="https://docs.aws.amazon.com/data-exchange/latest/userguide/jobs.html#revision-export-keypatterns">Key patterns when exporting revisions</a>.
        RevisionId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision.
      description: The destination where the assets in the revision will be exported.
    RevisionEntry:
      type: object
      required:
        - Arn
        - CreatedAt
        - DataSetId
        - Id
        - UpdatedAt
      properties:
        Arn:
          allOf:
            - $ref: "#/components/schemas/Arn"
            - description: The ARN for the revision.
        Comment:
          allOf:
            - $ref: "#/components/schemas/__stringMin0Max16384"
            - description: An optional comment about the revision.
        CreatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was created, in ISO 8601 format.
        DataSetId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the data set associated with the data set revision.
        Finalized:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: To publish a revision to a data set in a product, the revision must first be finalized. Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products. Finalized revisions can be published through the AWS Data Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet AWS Marketplace Catalog API action. When using the API, revisions are uniquely identified by their ARN.
        Id:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The unique identifier for the revision.
        SourceId:
          allOf:
            - $ref: "#/components/schemas/Id"
            - description: The revision ID of the owned revision corresponding to the entitled revision being viewed. This parameter is returned when a revision owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was last updated, in ISO 8601 format.
        RevocationComment:
          allOf:
            - $ref: "#/components/schemas/__stringMin10Max512"
            - description: A required comment to inform subscribers of the reason their access to the revision was revoked.
        Revoked:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: A status indicating that subscribers' access to the revision was revoked.
        RevokedAt:
          allOf:
            - $ref: "#/components/schemas/Timestamp"
            - description: The date and time that the revision was revoked, in ISO 8601 format.
      description: A revision is a container for one or more assets.
    TableTagPolicyLFPermission:
      type: string
      enum:
        - DESCRIBE
        - SELECT
    ListOfTableTagPolicyLFPermissions:
      type: array
      items:
        $ref: "#/components/schemas/TableTagPolicyLFPermission"
    ListOf__string:
      type: array
      items:
        $ref: "#/components/schemas/__string"
    ListRevisionAssetsRequest:
      type: object
      title: ListRevisionAssetsRequest
      properties: {}
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    RevokeRevisionRequest:
      type: object
      required:
        - RevocationComment
      title: RevokeRevisionRequest
      properties:
        RevocationComment:
          allOf:
            - $ref: "#/components/schemas/__stringMin10Max512"
            - description: A required comment to inform subscribers of the reason their access to the revision was revoked.
    __doubleMin0:
      type: number
      format: double
    SendApiAssetRequest:
      type: object
      title: SendApiAssetRequest
      properties:
        Body:
          allOf:
            - $ref: "#/components/schemas/__string"
            - description: The request body.
        RequestHeaders:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - xml:
                name: x-amzn-dataexchange-header-
              description: Any header value prefixed with x-amzn-dataexchange-header- will have that stripped before sending the Asset API request. Use this when you want to override a header that AWS Data Exchange uses. Alternatively, you can use the header without a prefix to the HTTP request.
    StartJobRequest:
      type: object
      title: StartJobRequest
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - Tags
      title: TagResourceRequest
      properties:
        Tags:
          allOf:
            - $ref: "#/components/schemas/MapOf__string"
            - xml:
                name: tags
              description: A label that consists of a customer-defined key and an optional value.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateAssetRequest:
      type: object
      required:
        - Name
      title: UpdateAssetRequest
      properties:
        Name:
          allOf:
            - $ref: "#/components/schemas/AssetName"
            - description: The name of the asset. When importing from Amazon S3, the Amazon S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target Amazon S3 object key. When importing from Amazon API Gateway API, the API name is used as the asset name. When importing from Amazon Redshift, the datashare name is used as the asset name. When importing from AWS Lake Formation, the static values of "Database(s) included in the LF-tag policy" or "Table(s) included in LF-tag policy" are used as the name.
    UpdateDataSetRequest:
      type: object
      title: UpdateDataSetRequest
      properties:
        Description:
          allOf:
            - $ref: "#/components/schemas/Description"
            - description: The description for the data set.
        Name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - description: The name of the data set.
    UpdateEventActionRequest:
      type: object
      title: UpdateEventActionRequest
      properties:
        Action:
          allOf:
            - $ref: "#/components/schemas/Action"
            - description: What occurs after a certain event.
    UpdateRevisionRequest:
      type: object
      title: UpdateRevisionRequest
      properties:
        Comment:
          allOf:
            - $ref: "#/components/schemas/__stringMin0Max16384"
            - description: An optional comment about the revision.
        Finalized:
          allOf:
            - $ref: "#/components/schemas/__boolean"
            - description: Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.
security:
  - hmac: []
